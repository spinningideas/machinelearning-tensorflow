{"version":3,"sources":["pages/Sentiment.js"],"names":["Sentiment","useState","locData","setLocData","metadata","setMetadata","model","setModel","sentimentInputText","setSentimentInputText","sentimentScore","setSentimentScore","machineLearningService","MachineLearningService","localizationService","LocalizationService","url","a","tf","console","log","fetch","metadataJson","json","useEffect","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","then","loadModel","loadMetadata","container","spacing","item","xs","className","sentiment","sentimentinstructions","href","color","variant","target","rel","md","lg","xl","label","onChange","e","value","multiline","rows","style","width","onClick","text","sequence","trim","toLowerCase","replace","split","map","word","wordIndex","word_index","index_from","vocabulary_size","paddedSequence","padSequences","max_len","tensor2DMatrix","predictionOutput","predict","score","dataSync","dispose","getSentimentScore","fontSize"],"mappings":"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","file":"static/js/9.af1f08dc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport MoodIcon from '@material-ui/icons/Mood';\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n\nexport default function Sentiment() {\n  const [locData, setLocData] = useState({});\n  const [metadata, setMetadata] = useState();\n  const [model, setModel] = useState();\n  const [sentimentInputText, setSentimentInputText] = useState('');\n  const [sentimentScore, setSentimentScore] = useState('');\n\n  const machineLearningService = MachineLearningService();\n  const localizationService = LocalizationService();\n\n  const OOV_INDEX = 2;\n  const url = {\n    model: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\n    metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json',\n  };\n\n  useEffect(() => {\n    async function loadLocalization() {\n      const locCode = localizationService.getUserLocale();\n\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\n        ['sentiment', 'sentimentdescription', 'sentimentinstructions', 'moreinfo'],\n        locCode\n      );\n      setLocData(locDataLoaded);\n    }\n    loadLocalization();\n  }, []);\n\n  useEffect(() => {\n    tf.ready().then(() => {\n      loadModel(url);\n      loadMetadata(url);\n    });\n  }, []);\n\n  async function loadModel(url) {\n    try {\n      const model = await tf.loadLayersModel(url.model);\n      setModel(model);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function loadMetadata(url) {\n    try {\n      const metadataJson = await fetch(url.metadata);\n      const metadata = await metadataJson.json();\n      setMetadata(metadata);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const getSentimentScore = (text) => {\n    const sentimentParsedText = text\n      .trim()\n      .toLowerCase()\n      .replace(/(\\.|,|!)/g, '')\n      .split(' ');\n    const sequence = sentimentParsedText.map((word) => {\n      let wordIndex = metadata.word_index[word] + metadata.index_from;\n      if (wordIndex > metadata.vocabulary_size) {\n        wordIndex = OOV_INDEX;\n      }\n      return wordIndex;\n    });\n\n    const paddedSequence = machineLearningService.padSequences([sequence], metadata.max_len);\n    const tensor2DMatrix = tf.tensor2d(paddedSequence, [1, metadata.max_len]);\n    const predictionOutput = model.predict(tensor2DMatrix);\n    const score = predictionOutput.dataSync()[0];\n\n    predictionOutput.dispose();\n\n    setSentimentScore(score);\n\n    return score;\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12} className=\"contentpanel-site\">\n        <h3>{locData.sentiment}</h3>\n        <p>{locData.sentimentinstructions}</p>\n        <p>\n          {' '}\n          <Button\n            className=\"ml-2\"\n            href={url.model}\n            color=\"primary\"\n            variant=\"outlined\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n\t\t\t\t\t\tModel Link\n          </Button>\n          <Button\n            className=\"ml-2\"\n            color=\"primary\"\n            variant=\"outlined\"\n            href={url.metadata}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n\t\t\t\t\t\tModel Metadata\n          </Button>\n        </p>\n        <Grid container spacing={0}>\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            <Card className=\"card white-bg-color bl-1 bb-1\">\n              <CardContent>\n                <TextField\n                  label=\"Type your text here\"\n                  onChange={(e) => setSentimentInputText(e.target.value)}\n                  value={sentimentInputText}\n                  multiline\n                  rows={3}\n                  variant=\"outlined\"\n                  style={{ width: '100%' }}\n                />\n              </CardContent>\n              <CardActions>\n                {sentimentInputText !== '' ? (\n                  <Button color=\"secondary\" onClick={() => getSentimentScore(sentimentInputText)}>\n\t\t\t\t\t\t\t\t\t\tView Sentiment\n                  </Button>\n                ) : (\n                  <></>\n                )}\n              </CardActions>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            {sentimentScore !== '' ? (\n              <Card className=\"card white-bg-color bl-1 bb-1\">\n                <CardContent>\n                  <p>\n                    <span className=\"text-bold\">Score</span> (1 = Positive, 0 = Negative)\n                  </p>\n                  <p>{sentimentScore}</p>\n                  {sentimentScore > 0.6 ? (\n                    <MoodIcon className=\"success-color\" style={{ fontSize: 40 }} />\n                  ) : (\n                    <MoodBadIcon className=\"fail-color\" style={{ fontSize: 40 }} />\n                  )}\t\t\t\t\t\t\n                </CardContent>\n              </Card>\n            ) : (\n              <></>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}