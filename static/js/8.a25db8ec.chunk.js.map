{"version":3,"sources":["components/Shared/DownloadFileButton.js","components/Shared/BoundingBox.js","pages/ObjectDetectionImage.js"],"names":["useStyles","makeStyles","theme","avatar","margin","spacing","DownloadFileButton","text","filePath","display","classes","IconButton","className","color","target","style","visibility","title","href","download","Avatar","alt","src","BoundingBox","box","label","probability","parentImgRef","left","top","width","height","parentImgTop","current","offsetTop","parentImgLeft","offsetLeft","lableValue","probabilityValue","Math","round","boundingBoxContainer","position","border","padding","labelContainer","bottom","background","fontSize","fontFamily","probabilityContainer","right","borderRadius","ObjectDetectionImage","useState","locData","setLocData","selectedFile","setSelectedFile","model","setModel","detectedObjects","setDetectedObjects","objectDetectionIsOccuring","setObjectDetectionIsOccuring","selectedImageRef","useRef","localizationService","LocalizationService","machineLearningService","MachineLearningService","modelUrl","useEffect","a","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","tf","then","loadModel","modelUrlToLoad","fromTFHub","zeroTensor","executeAsync","result","Promise","all","map","t","data","dispose","console","log","handleImageObjectDetection","performImageObjectDetection","getTensorFromRawImage","img","fromPixels","expandDims","cast","tensorData","getCocoSSDClasses","detectObjects","DetectedObjects","object","boundingBox","class","Grid","container","item","xs","objectdetectionimage","objectdetectiondescriptionimage","objectdetectioninstructionsimage","Button","variant","rel","md","lg","xl","Card","CardContent","accept","multiple","id","type","onChange","e","file","files","reader","FileReader","onload","readAsDataURL","Tooltip","htmlFor","aria-label","component","name","CardActions","onClick","LoadingIndicator","size","Box","justifyContent","ref"],"mappings":"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","file":"static/js/8.a25db8ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  avatar: {\r\n    margin: theme.spacing(0),\r\n  },\r\n}));\r\n\r\nfunction DownloadFileButton({ text, filePath, display }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <IconButton\r\n      className=\"ml-2\"\r\n      color=\"primary\"\r\n      target=\"_blank\"\r\n      style={{\r\n        visibility: display ? 'visible' : 'hidden',\r\n      }}\r\n      title={text}\r\n      href={filePath}\r\n      download\r\n    >\r\n      <Avatar className={classes.avatar} alt={text} src={filePath} />\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nexport default DownloadFileButton;\r\n","import * as React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst BoundingBox = ({ box, label, probability, parentImgRef }) => {\r\n  const color = '#00e5ff';\r\n  let [left, top, width, height] = box;\r\n  let parentImgTop = parentImgRef.current.offsetTop;\r\n  let parentImgLeft = parentImgRef.current.offsetLeft;\r\n  const lableValue = label ? label : 'no class provided';\r\n  const probabilityValue = probability ? Math.round(probability * 100) + '%' : 0;\r\n\r\n  top = Math.round(top + parentImgTop);\r\n  left = Math.round(left + parentImgLeft);\r\n  width = Math.round(width);\r\n  height = Math.round(height);\r\n\r\n  const useStyles = makeStyles(() => ({\r\n    boundingBoxContainer: {\r\n      position: 'absolute',\r\n      border: '0.2rem solid ' + color,\r\n      top: top,\r\n      margin: 0,\r\n      padding: 0,\r\n    },\r\n    labelContainer: {\r\n      display: 'block',\r\n      position: 'absolute',\r\n      bottom: 0,\r\n      color: '#212121',\r\n      background: color,\r\n      padding: '0.3rem 0.6rem',\r\n      margin: 0,\r\n      fontSize: '1.2rem',\r\n      fontFamily: 'monospace',\r\n      left: -1,\r\n    },\r\n    probabilityContainer: {\r\n      display: 'block',\r\n      position: 'absolute',\r\n      bottom: 0,\r\n      color: '#212121',\r\n      background: color,\r\n      padding: '0.3rem 0.6rem',\r\n      margin: 0,\r\n      fontSize: '1.2rem',\r\n      fontFamily: 'monospace',\r\n      right: 0,\r\n      borderRadius: '0',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={classes.boundingBoxContainer}\r\n      style={{ width, top, height, left }}\r\n      label={label}\r\n      probability={probability}\r\n    >\r\n      <div className={classes.labelContainer}>{lableValue}</div>\r\n      <div className={classes.probabilityContainer}>{probabilityValue}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoundingBox;\r\n","import React, { useEffect, useState, useRef } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n// material-ui\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PublishSharpIcon from '@material-ui/icons/PublishSharp';\n// Components\nimport LoadingIndicator from 'components/Shared/LoadingIndicator';\nimport DownloadFileButton from 'components/Shared/DownloadFileButton';\nimport BoundingBox from 'components/Shared/BoundingBox';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\nexport default function ObjectDetectionImage() {\n  const [locData, setLocData] = useState({});\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [model, setModel] = useState();\n  const [detectedObjects, setDetectedObjects] = useState(null);\n  const [objectDetectionIsOccuring, setObjectDetectionIsOccuring] = useState(false);\n\n  const selectedImageRef = useRef(null);\n\n  const localizationService = LocalizationService();\n  const machineLearningService = MachineLearningService();\n\n  const modelUrl = 'https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1';\n\n  useEffect(() => {\n    async function loadLocalization() {\n      const locCode = localizationService.getUserLocale();\n\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\n        ['objectdetectionimage', 'objectdetectiondescriptionimage', 'objectdetectioninstructionsimage', 'moreinfo'],\n        locCode\n      );\n      setLocData(locDataLoaded);\n    }\n    loadLocalization();\n  }, []);\n\n  useEffect(() => {\n    tf.ready().then(() => {\n      loadModel(modelUrl);\n    });\n  }, [modelUrl]);\n\n  const loadModel = async (modelUrlToLoad) => {\n    try {\n      const model = await tf.loadGraphModel(modelUrlToLoad, { fromTFHub: true });\n      // warm up model with empty image\n      const zeroTensor = tf.zeros([1, 300, 300, 3], 'int32');\n      const result = await model.executeAsync(zeroTensor);\n      await Promise.all(result.map((t) => t.data()));\n      result.map((t) => t.dispose());\n      zeroTensor.dispose();\n\n      setModel(model);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleSelectImage = (e) => {\n    const [file] = e.target.files;\n    if (file) {\n      const reader = new FileReader();\n      const { current } = selectedImageRef;\n      current.file = file;\n      reader.onload = (e) => {\n        current.src = e.target.result;\n      };\n      reader.readAsDataURL(file);\n      setSelectedFile(file);\n    }\n  };\n\n  const handleImageObjectDetection = async () => {\n    setObjectDetectionIsOccuring(true);\n    await performImageObjectDetection();\n  };\n\n  const getTensorFromRawImage = (img) => {\n    const tensor = tf.tidy(() => {\n      const tens = tf.browser.fromPixels(img);\n      return tens.expandDims(0).cast('int32');\n    });\n    return tensor;\n  };\n\n  const performImageObjectDetection = async () => {\n    const tensorData = getTensorFromRawImage(selectedImageRef.current);\n    const width = selectedImageRef.current?.width ?? 0;\n    const height = selectedImageRef.current?.height ?? 0;\n    const classes = machineLearningService.getCocoSSDClasses();\n    const maxOutputSize = 5;\n    const minConfidence = 0;\n\n    const detectedObjects = await machineLearningService.detectObjects(\n      model,\n      tensorData,\n      width,\n      height,\n      classes,\n      maxOutputSize,\n      minConfidence\n    );\n\n    setDetectedObjects(detectedObjects);\n\n    setObjectDetectionIsOccuring(false);\n  };\n\n  const DetectedObjects = () => {\n    if (detectedObjects) {\n      return detectedObjects.map((object) => (\n        <BoundingBox\n          key={object.class + object.probability}\n          parentImgRef={selectedImageRef}\n          box={object.boundingBox}\n          label={object.class}\n          probability={object.probability}\n        />\n      ));\n    }\n    return <></>;\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12} className=\"contentpanel-site\">\n        <h3>{locData.objectdetectionimage}</h3>\n        <h5>{locData.objectdetectiondescriptionimage}</h5>\n        <p>\n          {locData.objectdetectioninstructionsimage}{' '}\n          <Button className=\"ml-2\" href={modelUrl} color=\"primary\" variant=\"outlined\" target=\"_blank\" rel=\"noopener\">\n            View Model\n          </Button>\n        </p>\n        <Grid container spacing={0}>\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            <Card className=\"card white-bg-color bl-1 bb-1\">\n              <CardContent>\n                <input\n                  style={{ display: 'none' }}\n                  accept=\"image/jpeg\"\n                  multiple={false}\n                  id=\"faceImage\"\n                  type=\"file\"\n                  onChange={handleSelectImage}\n                />\n                <Tooltip title=\"Select Image\">\n                  <label htmlFor=\"faceImage\">\n                    <IconButton color=\"primary\" aria-label=\"upload image\" component=\"span\">\n                      <PublishSharpIcon fontSize=\"large\" />\n                    </IconButton>\n                  </label>\n                </Tooltip>\n                <label>{selectedFile ? selectedFile.name : 'Select Image'}</label>. . .\n                <DownloadFileButton\n                  display={true}\n                  text=\"Download Apple/Carrot Image\"\n                  filePath=\"images/apple-carrot.jpg\"\n                />\n                <DownloadFileButton display={true} text=\"Download Hot Dog Image\" filePath=\"images/hotdog.jpg\" />\n                <DownloadFileButton display={true} text=\"Download strawberry Image\" filePath=\"images/strawberry.jpg\" />\n              </CardContent>\n              <CardActions>\n                {selectedFile ? (\n                  <Button color=\"primary\" onClick={() => handleImageObjectDetection()}>\n                    Perform Object Detection\n                  </Button>\n                ) : (\n                  <></>\n                )}\n                <LoadingIndicator display={objectDetectionIsOccuring} size={40} />\n              </CardActions>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            <Box display=\"flex\" justifyContent=\"center\">\n              <img\n                id=\"img-selectedfile\"\n                className=\"mt-2\"\n                ref={selectedImageRef}\n                src={selectedFile}\n                style={{\n                  visibility: selectedFile != null ? 'visible' : 'hidden',\n                }}\n                alt=\"Selected file to analyze\"\n              />\n              <DetectedObjects />\n            </Box>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}