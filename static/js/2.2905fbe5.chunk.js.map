{"version":3,"sources":["../node_modules/@tensorflow-models/coco-ssd/dist/coco-ssd.es2017.esm.min.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js","../../src/tex_util.ts","../../src/canvas_util.ts","../../src/webgl_util.ts","../../src/flags_webgl.ts","../../src/glsl_version.ts","../../src/shader_compiler_util.ts","../../src/decode_matrix_gpu.ts","../../src/decode_matrix_packed_gpu.ts","../../src/encode_float_gpu.ts","../../src/encode_float_packed_gpu.ts","../../src/encode_matrix_gpu.ts","../../src/encode_matrix_packed_gpu.ts","../../src/gpgpu_util.ts","../../src/gpgpu_context.ts","../../src/shader_compiler.ts","../../src/gpgpu_math.ts","../../../src/utils/binary_impl.ts","../../src/cpu_util.ts","../../../src/kernels/Complex.ts","../../../src/utils/zeros_impl.ts","../../../src/kernels/Identity.ts","../../../src/kernels/Real.ts","../../../src/kernels/Cast.ts","../../../src/utils/binary_utils.ts","../../../src/kernels/Add.ts","../../../src/utils/unary_impl.ts","../../../src/utils/unary_utils.ts","../../../src/kernels/Ceil.ts","../../../src/kernels/Exp.ts","../../../src/kernels/Expm1.ts","../../../src/kernels/Floor.ts","../../../src/kernels/Greater.ts","../../../src/kernels/Less.ts","../../../src/kernels/Log.ts","../../../src/kernels/Maximum.ts","../../../src/kernels/Minimum.ts","../../../src/kernels/Multiply.ts","../../../src/kernels/Neg.ts","../../../src/kernels/Transpose_impl.ts","../../../src/kernels/Transpose.ts","../../../src/kernels/Prod.ts","../../../src/kernels/Rsqrt.ts","../../../src/kernels/Abs.ts","../../../src/kernels/Slice.ts","../../../src/kernels/Sub.ts","../../../src/kernel_utils/shared.ts","../../../src/kernels/Bincount_impl.ts","../../../src/kernels/Concat_impl.ts","../../../src/kernels/GatherV2_impl.ts","../../../src/kernels/LinSpace_impl.ts","../../../src/kernels/Max_impl.ts","../../../src/kernels/Range_impl.ts","../../../src/kernels/StridedSlice_impl.ts","../../../src/kernels/Tile_impl.ts","../../../src/kernels/TopK_impl.ts","../../../src/kernels/Unique_impl.ts","../../src/packing_util.ts","../../src/pack_gpu.ts","../../src/reshape_packed_gpu.ts","../../src/texture_manager.ts","../../src/unaryop_gpu.ts","../../src/unaryop_packed_gpu.ts","../../src/unpack_gpu.ts","../../src/backend_webgl.ts","../../src/base.ts","../../src/binaryop_gpu.ts","../../src/binaryop_packed_gpu.ts","../../../src/kernels/LeakyRelu.ts","../../../src/kernels/Prelu.ts","../../../src/kernel_utils/kernel_funcs_utils.ts","../../src/mulmat_packed_gpu.ts","../../src/binaryop_complex_gpu.ts","../../../src/kernels/Reshape.ts","../../../src/kernel_utils/reshape.ts","../../src/mean_gpu.ts","../../src/reduce_gpu.ts","../../../src/kernel_utils/reduce.ts","../../src/transpose_gpu.ts","../../src/transpose_packed_gpu.ts","../../../src/kernels/Sum.ts","../../../src/kernels/Sum_impl.ts","../../../src/kernels/BatchMatMul_impl.ts","../../../src/kernels/_FusedMatMul.ts","../../../src/kernels/Acos.ts","../../../src/kernels/Acosh.ts","../../src/addn_gpu.ts","../../src/addn_packed_gpu.ts","../../../src/kernels/AddN.ts","../../../src/kernels/All.ts","../../../src/kernels/Any.ts","../../src/argminmax_gpu.ts","../../src/argminmax_packed_gpu.ts","../../../src/kernel_utils/arg_min_max.ts","../../../src/kernels/ArgMax.ts","../../../src/kernels/ArgMin.ts","../../../src/kernels/Asin.ts","../../../src/kernels/Asinh.ts","../../../src/kernels/Atan.ts","../../../src/kernels/Atan2.ts","../../../src/kernels/Atanh.ts","../../src/pool_gpu.ts","../../../src/kernels/AvgPool.ts","../../../src/kernels/AvgPool3D.ts","../../src/avg_pool_backprop_gpu.ts","../../../src/kernels/AvgPool3DGrad.ts","../../../src/kernels/AvgPoolGrad.ts","../../../src/kernels/BatchMatMul.ts","../../src/batchnorm_gpu.ts","../../src/batchnorm_packed_gpu.ts","../../../src/kernels/BatchNorm.ts","../../src/slice_gpu.ts","../../src/slice_packed_gpu.ts","../../../src/kernels/BatchToSpaceND.ts","../../../src/kernels/Bincount.ts","../../../src/kernels/NotEqual.ts","../../../src/kernel_utils/int.ts","../../src/clip_gpu.ts","../../src/clip_packed_gpu.ts","../../../src/kernels/ClipByValue.ts","../../src/complex_abs_gpu.ts","../../../src/kernels/ComplexAbs.ts","../../src/concat_gpu.ts","../../src/concat_packed_gpu.ts","../../../src/kernels/Imag.ts","../../../src/kernels/Concat.ts","../../src/conv_gpu.ts","../../src/im2col_packed_gpu.ts","../../../src/kernels/Conv2D_impl.ts","../../../src/kernels/Conv2D.ts","../../src/conv_backprop_gpu.ts","../../../src/kernels/Conv2DBackpropFilter.ts","../../../src/kernels/Conv2DBackpropInput.ts","../../../src/kernels/Conv3D.ts","../../../src/kernels/Conv3DBackpropFilterV2.ts","../../../src/kernels/Conv3DBackpropInputV2.ts","../../../src/kernels/Cos.ts","../../../src/kernels/Cosh.ts","../../src/crop_and_resize_gpu.ts","../../../src/kernels/CropAndResize.ts","../../src/cumsum_gpu.ts","../../../src/kernels/Cumsum.ts","../../../src/kernels/DenseBincount.ts","../../src/depth_to_space_gpu.ts","../../../src/kernels/DepthToSpace.ts","../../src/conv_gpu_depthwise.ts","../../src/conv_packed_gpu_depthwise.ts","../../../src/kernels/DepthwiseConv2dNative.ts","../../src/conv_backprop_gpu_depthwise.ts","../../../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../src/diag_gpu.ts","../../../src/kernels/Diag.ts","../../src/dilation_gpu.ts","../../../src/kernels/Dilation2D.ts","../../../src/kernels/Elu.ts","../../../src/kernels/EluGrad.ts","../../../src/kernels/Equal.ts","../../../src/kernels/Erf.ts","../../../src/kernels/ExpandDims.ts","../../src/fft_gpu.ts","../../../src/kernels/FFT_impl.ts","../../../src/kernels/FFT.ts","../../src/fill_gpu.ts","../../../src/kernels/Fill.ts","../../../src/kernels/FromPixels.ts","../../src/flip_left_right_gpu.ts","../../../src/kernels/FlipLeftRight.ts","../../../src/kernels/FloorDiv.ts","../../../../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../../../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../../src/kernels/FusedConv2D.ts","../../../src/kernels/FusedDepthwiseConv2D.ts","../../src/gather_nd_gpu.ts","../../../src/kernels/GatherNd.ts","../../src/gather_gpu.ts","../../../src/kernels/GatherV2.ts","../../../src/kernels/GreaterEqual.ts","../../../src/kernels/IFFT.ts","../../../src/kernels/IsFinite.ts","../../../src/kernels/IsInf.ts","../../../src/kernels/IsNaN.ts","../../../src/kernels/LessEqual.ts","../../../src/kernels/LinSpace.ts","../../../src/kernels/Log1p.ts","../../../src/kernels/LogicalAnd.ts","../../../src/kernels/LogicalNot.ts","../../../src/kernels/LogicalOr.ts","../../src/lrn_gpu.ts","../../src/lrn_packed_gpu.ts","../../../src/kernels/LRN.ts","../../src/lrn_grad_gpu.ts","../../../src/kernels/LRNGrad.ts","../../../src/kernels/Max.ts","../../../src/kernels/MaxPool.ts","../../../src/kernels/MaxPool3D.ts","../../src/max_pool_backprop_gpu.ts","../../../src/kernels/MaxPool3DGrad.ts","../../../src/kernels/MaxPoolGrad.ts","../../../src/kernels/MaxPoolWithArgmax.ts","../../../src/kernels/MaxPoolWithArgmax_impl.ts","../../../src/kernels/Mean.ts","../../../src/kernels/Mean_impl.ts","../../../src/kernels/Min.ts","../../src/mirror_pad_gpu.ts","../../src/mirror_pad_packed_gpu.ts","../../../src/kernels/MirrorPad.ts","../../../src/kernels/Mod.ts","../../src/multinomial_gpu.ts","../../../src/kernels/RealDiv.ts","../../../src/kernels/Softmax.ts","../../../src/kernels/Multinomial.ts","../../../src/kernels/NonMaxSuppressionV3.ts","../../../src/kernels/NonMaxSuppressionV4.ts","../../../src/kernels/NonMaxSuppressionV5.ts","../../src/onehot_gpu.ts","../../../src/kernels/OneHot.ts","../../../src/kernels/ZerosLike.ts","../../../src/kernels/OnesLike.ts","../../../src/kernels/Pack.ts","../../src/pad_gpu.ts","../../src/pad_packed_gpu.ts","../../../src/kernels/PadV2.ts","../../../src/kernels/Pow.ts","../../../src/kernels/Range.ts","../../../src/kernels/Reciprocal.ts","../../../src/kernels/Relu.ts","../../../src/kernels/Relu6.ts","../../src/resize_bilinear_gpu.ts","../../src/resize_bilinear_packed_gpu.ts","../../../src/kernels/ResizeBilinear.ts","../../src/resize_bilinear_backprop_gpu.ts","../../../src/kernels/ResizeBilinearGrad.ts","../../src/resize_nearest_neighbor_gpu.ts","../../../src/kernels/ResizeNearestNeighbor.ts","../../src/resize_nearest_neighbor_backprop_gpu.ts","../../../src/kernels/ResizeNearestNeighborGrad.ts","../../src/reverse_gpu.ts","../../src/reverse_packed_gpu.ts","../../../src/kernels/Reverse.ts","../../src/rotate_gpu.ts","../../../src/kernels/RotateWithOffset.ts","../../../src/kernels/Round.ts","../../src/scatter_gpu.ts","../../../src/kernels/ScatterNd.ts","../../src/select_gpu.ts","../../../src/kernels/Select.ts","../../../src/kernels/Selu.ts","../../../src/kernels/Sigmoid.ts","../../../src/kernels/Sign.ts","../../../src/kernels/Sin.ts","../../../src/kernels/Sinh.ts","../../../src/kernels/Softplus.ts","../../../src/kernels/SpaceToBatchND.ts","../../../src/kernels/SparseToDense.ts","../../../src/kernels/SplitV.ts","../../../src/kernels/Sqrt.ts","../../../src/kernels/Square.ts","../../../src/kernels/SquaredDifference.ts","../../../src/kernels/Step.ts","../../src/strided_slice_gpu.ts","../../../src/kernels/StridedSlice.ts","../../../src/kernels/Tan.ts","../../../src/kernels/Tanh.ts","../../src/tile_gpu.ts","../../../src/kernels/Tile.ts","../../../src/kernels/TopK.ts","../../../src/kernels/Unique.ts","../../../src/kernels/Unpack.ts","../../src/segment_gpu.ts","../../src/register_all_kernels.ts","../../../src/kernels/UnsortedSegmentSum.ts","../../src/backend_cpu.ts","../../../src/utils/fused_utils.ts","../../../src/utils/pool_utils.ts","../../../src/kernels/Clip.ts","../../../src/kernels/Dilation2DBackpropFilter.ts","../../../src/kernels/Dilation2DBackpropInput.ts","../../../src/utils/fft_utils.ts","../../../src/kernels/Scatter_impl.ts"],"names":["e","a","m","i","1","name","id","displayName","2","3","4","5","6","7","8","9","10","11","13","14","15","16","17","18","19","20","21","22","23","24","25","27","28","31","32","33","34","35","36","37","38","39","40","41","42","43","44","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","67","70","72","73","74","75","76","77","78","79","80","81","82","84","85","86","87","88","89","90","d","this","modelPath","getPrefix","loadGraphModel","model","zeros","executeAsync","Promise","all","map","data","dispose","tidy","Tensor","browser","fromPixels","expandDims","s","shape","n","l","t","dataSync","o","calculateMaxScores","p","r","c","getBackend","setBackend","y","tensor2d","image","nonMaxSuppression","N","buildDetectedObjects","length","push","bbox","class","score","Number","MIN_VALUE","infer","ObjectDetection","load","Error","base","modelUrl","indexOf","version","Object","defineProperty","value","exports","require","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","module","arr","Array","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","arrayLikeToArray","minLen","prototype","toString","call","slice","constructor","from","test","len","arr2","TypeError","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","then","fn","self","args","arguments","apply","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","gl","TextureUsage","PhysicalTextureType","ENV","registerFlag","callAndCheck","outVals","element","reduceType","vecType","updateSnippet","sum","x","transposeA","backend","channel","coords","rank","concat","isChannelsLast","intermediates","convInfo","val","activationSnippet","dim","isImage","inputs","attrs","shapeInfo","dtype","xVals","alignCorners","signConfig","kernelName","backendName","kernelFunc","softplusConfig","squaredDifference","activation","filterDepth","b","res","output","axis"],"mappings":"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","file":"static/js/2.2905fbe5.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n!function(e,a){\"object\"==typeof exports&&\"undefined\"!=typeof module?a(exports,require(\"@tensorflow/tfjs-converter\"),require(\"@tensorflow/tfjs-core\")):\"function\"==typeof define&&define.amd?define([\"exports\",\"@tensorflow/tfjs-converter\",\"@tensorflow/tfjs-core\"],a):a((e=e||self).cocoSsd=e.cocoSsd||{},e.tf,e.tf)}(this,(function(e,a,m){\"use strict\";const i={1:{name:\"/m/01g317\",id:1,displayName:\"person\"},2:{name:\"/m/0199g\",id:2,displayName:\"bicycle\"},3:{name:\"/m/0k4j\",id:3,displayName:\"car\"},4:{name:\"/m/04_sv\",id:4,displayName:\"motorcycle\"},5:{name:\"/m/05czz6l\",id:5,displayName:\"airplane\"},6:{name:\"/m/01bjv\",id:6,displayName:\"bus\"},7:{name:\"/m/07jdr\",id:7,displayName:\"train\"},8:{name:\"/m/07r04\",id:8,displayName:\"truck\"},9:{name:\"/m/019jd\",id:9,displayName:\"boat\"},10:{name:\"/m/015qff\",id:10,displayName:\"traffic light\"},11:{name:\"/m/01pns0\",id:11,displayName:\"fire hydrant\"},13:{name:\"/m/02pv19\",id:13,displayName:\"stop sign\"},14:{name:\"/m/015qbp\",id:14,displayName:\"parking meter\"},15:{name:\"/m/0cvnqh\",id:15,displayName:\"bench\"},16:{name:\"/m/015p6\",id:16,displayName:\"bird\"},17:{name:\"/m/01yrx\",id:17,displayName:\"cat\"},18:{name:\"/m/0bt9lr\",id:18,displayName:\"dog\"},19:{name:\"/m/03k3r\",id:19,displayName:\"horse\"},20:{name:\"/m/07bgp\",id:20,displayName:\"sheep\"},21:{name:\"/m/01xq0k1\",id:21,displayName:\"cow\"},22:{name:\"/m/0bwd_0j\",id:22,displayName:\"elephant\"},23:{name:\"/m/01dws\",id:23,displayName:\"bear\"},24:{name:\"/m/0898b\",id:24,displayName:\"zebra\"},25:{name:\"/m/03bk1\",id:25,displayName:\"giraffe\"},27:{name:\"/m/01940j\",id:27,displayName:\"backpack\"},28:{name:\"/m/0hnnb\",id:28,displayName:\"umbrella\"},31:{name:\"/m/080hkjn\",id:31,displayName:\"handbag\"},32:{name:\"/m/01rkbr\",id:32,displayName:\"tie\"},33:{name:\"/m/01s55n\",id:33,displayName:\"suitcase\"},34:{name:\"/m/02wmf\",id:34,displayName:\"frisbee\"},35:{name:\"/m/071p9\",id:35,displayName:\"skis\"},36:{name:\"/m/06__v\",id:36,displayName:\"snowboard\"},37:{name:\"/m/018xm\",id:37,displayName:\"sports ball\"},38:{name:\"/m/02zt3\",id:38,displayName:\"kite\"},39:{name:\"/m/03g8mr\",id:39,displayName:\"baseball bat\"},40:{name:\"/m/03grzl\",id:40,displayName:\"baseball glove\"},41:{name:\"/m/06_fw\",id:41,displayName:\"skateboard\"},42:{name:\"/m/019w40\",id:42,displayName:\"surfboard\"},43:{name:\"/m/0dv9c\",id:43,displayName:\"tennis racket\"},44:{name:\"/m/04dr76w\",id:44,displayName:\"bottle\"},46:{name:\"/m/09tvcd\",id:46,displayName:\"wine glass\"},47:{name:\"/m/08gqpm\",id:47,displayName:\"cup\"},48:{name:\"/m/0dt3t\",id:48,displayName:\"fork\"},49:{name:\"/m/04ctx\",id:49,displayName:\"knife\"},50:{name:\"/m/0cmx8\",id:50,displayName:\"spoon\"},51:{name:\"/m/04kkgm\",id:51,displayName:\"bowl\"},52:{name:\"/m/09qck\",id:52,displayName:\"banana\"},53:{name:\"/m/014j1m\",id:53,displayName:\"apple\"},54:{name:\"/m/0l515\",id:54,displayName:\"sandwich\"},55:{name:\"/m/0cyhj_\",id:55,displayName:\"orange\"},56:{name:\"/m/0hkxq\",id:56,displayName:\"broccoli\"},57:{name:\"/m/0fj52s\",id:57,displayName:\"carrot\"},58:{name:\"/m/01b9xk\",id:58,displayName:\"hot dog\"},59:{name:\"/m/0663v\",id:59,displayName:\"pizza\"},60:{name:\"/m/0jy4k\",id:60,displayName:\"donut\"},61:{name:\"/m/0fszt\",id:61,displayName:\"cake\"},62:{name:\"/m/01mzpv\",id:62,displayName:\"chair\"},63:{name:\"/m/02crq1\",id:63,displayName:\"couch\"},64:{name:\"/m/03fp41\",id:64,displayName:\"potted plant\"},65:{name:\"/m/03ssj5\",id:65,displayName:\"bed\"},67:{name:\"/m/04bcr3\",id:67,displayName:\"dining table\"},70:{name:\"/m/09g1w\",id:70,displayName:\"toilet\"},72:{name:\"/m/07c52\",id:72,displayName:\"tv\"},73:{name:\"/m/01c648\",id:73,displayName:\"laptop\"},74:{name:\"/m/020lf\",id:74,displayName:\"mouse\"},75:{name:\"/m/0qjjc\",id:75,displayName:\"remote\"},76:{name:\"/m/01m2v\",id:76,displayName:\"keyboard\"},77:{name:\"/m/050k8\",id:77,displayName:\"cell phone\"},78:{name:\"/m/0fx9l\",id:78,displayName:\"microwave\"},79:{name:\"/m/029bxz\",id:79,displayName:\"oven\"},80:{name:\"/m/01k6s3\",id:80,displayName:\"toaster\"},81:{name:\"/m/0130jx\",id:81,displayName:\"sink\"},82:{name:\"/m/040b_t\",id:82,displayName:\"refrigerator\"},84:{name:\"/m/0bt_c3\",id:84,displayName:\"book\"},85:{name:\"/m/01x3z\",id:85,displayName:\"clock\"},86:{name:\"/m/02s195\",id:86,displayName:\"vase\"},87:{name:\"/m/01lsmm\",id:87,displayName:\"scissors\"},88:{name:\"/m/0kmg4\",id:88,displayName:\"teddy bear\"},89:{name:\"/m/03wvsk\",id:89,displayName:\"hair drier\"},90:{name:\"/m/012xff\",id:90,displayName:\"toothbrush\"}};class d{constructor(e,a){this.modelPath=a||`https://storage.googleapis.com/tfjs-models/savedmodel/${this.getPrefix(e)}/model.json`}getPrefix(e){return\"lite_mobilenet_v2\"===e?\"ssd\"+e:\"ssd_\"+e}async load(){this.model=await a.loadGraphModel(this.modelPath);const e=m.zeros([1,300,300,3],\"int32\"),i=await this.model.executeAsync(e);await Promise.all(i.map(e=>e.data())),i.map(e=>e.dispose()),e.dispose()}async infer(e,a,i){const d=m.tidy(()=>(e instanceof m.Tensor||(e=m.browser.fromPixels(e)),e.expandDims(0))),s=d.shape[1],n=d.shape[2],l=await this.model.executeAsync(d),t=l[0].dataSync(),o=l[1].dataSync();d.dispose(),m.dispose(l);const[p,r]=this.calculateMaxScores(t,l[0].shape[1],l[0].shape[2]),c=m.getBackend();\"webgl\"===m.getBackend()&&m.setBackend(\"cpu\");const y=m.tidy(()=>{const e=m.tensor2d(o,[l[1].shape[1],l[1].shape[3]]);return m.image.nonMaxSuppression(e,p,a,i,i)}),N=y.dataSync();return y.dispose(),c!==m.getBackend()&&m.setBackend(c),this.buildDetectedObjects(n,s,o,p,N,r)}buildDetectedObjects(e,a,m,d,s,n){const l=s.length,t=[];for(let o=0;o<l;o++){const l=[];for(let e=0;e<4;e++)l[e]=m[4*s[o]+e];const p=l[0]*a,r=l[1]*e,c=l[2]*a,y=l[3]*e;l[0]=r,l[1]=p,l[2]=y-r,l[3]=c-p,t.push({bbox:l,class:i[n[s[o]]+1].displayName,score:d[s[o]]})}return t}calculateMaxScores(e,a,m){const i=[],d=[];for(let s=0;s<a;s++){let a=Number.MIN_VALUE,n=-1;for(let i=0;i<m;i++)e[s*m+i]>a&&(a=e[s*m+i],n=i);i[s]=a,d[s]=n}return[i,d]}async detect(e,a=20,m=.5){return this.infer(e,a,m)}dispose(){null!=this.model&&this.model.dispose()}}e.ObjectDetection=d,e.load=async function(e={}){if(null==m)throw new Error(\"Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.\");const a=e.base||\"lite_mobilenet_v2\",i=e.modelUrl;if(-1===[\"mobilenet_v1\",\"mobilenet_v2\",\"lite_mobilenet_v2\"].indexOf(a))throw new Error(\"ObjectDetection constructed with invalid base model \"+a+\". Valid names are 'mobilenet_v1', 'mobilenet_v2' and 'lite_mobilenet_v2'.\");const s=new d(a,i);return await s.load(),s},e.version=\"2.2.1\",Object.defineProperty(e,\"__esModule\",{value:!0})}));\n//# sourceMappingURL=coco-ssd.es2017.esm.min.js.map\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nexport var PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape) {\n    const size = util.sizeFromShape(shape);\n    const texelsNeeded = Math.ceil(size / 4);\n    return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\n            `${channelsPerTexture}`);\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    const requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n    }\n    let dst = 0;\n    for (let src = 0; src < unpackedArray.length; src += 4) {\n        for (let c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return w * h * 4;\n}\nexport function getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    let internalFormatFloat;\n    let internalFormatHalfFloat;\n    let internalFormatPackedHalfFloat;\n    let internalFormatPackedFloat;\n    let textureFormatFloat;\n    let downloadTextureFormat;\n    let downloadUnpackNumChannels;\n    let defaultNumChannels;\n    let textureTypeHalfFloat;\n    let textureTypeFloat;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n    }\n    downloadTextureFormat = gl.RGBA;\n    return {\n        internalFormatFloat,\n        internalFormatHalfFloat,\n        internalFormatPackedHalfFloat,\n        internalFormatPackedFloat,\n        textureFormatFloat,\n        downloadTextureFormat,\n        downloadUnpackNumChannels,\n        defaultNumChannels,\n        textureTypeHalfFloat,\n        textureTypeFloat\n    };\n}\n//# sourceMappingURL=tex_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n    alpha: false,\n    antialias: false,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: false,\n    depth: false,\n    stencil: false,\n    failIfMajorPerformanceCaveat: true\n};\nexport function clearWebGLContext(webGLVersion) {\n    delete contexts[webGLVersion];\n}\nexport function setWebGLContext(webGLVersion, gl) {\n    contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion) {\n    if (!(webGLVersion in contexts)) {\n        const newCtx = getWebGLRenderingContext(webGLVersion);\n        if (newCtx !== null) {\n            contexts[webGLVersion] = newCtx;\n        }\n        else {\n            console.log('Could not get context for WebGL version', webGLVersion);\n            return null;\n        }\n    }\n    const gl = contexts[webGLVersion];\n    if (gl.isContextLost()) {\n        delete contexts[webGLVersion];\n        return getWebGLContext(webGLVersion);\n    }\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.STENCIL_TEST);\n    gl.disable(gl.BLEND);\n    gl.disable(gl.DITHER);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.disable(gl.SAMPLE_COVERAGE);\n    gl.enable(gl.SCISSOR_TEST);\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n    if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n        return new OffscreenCanvas(300, 150);\n    }\n    else if (typeof document !== 'undefined') {\n        return document.createElement('canvas');\n    }\n    else {\n        throw new Error('Cannot create a canvas in this context');\n    }\n}\nfunction getWebGLRenderingContext(webGLVersion) {\n    if (webGLVersion !== 1 && webGLVersion !== 2) {\n        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n    }\n    const canvas = createCanvas(webGLVersion);\n    canvas.addEventListener('webglcontextlost', (ev) => {\n        ev.preventDefault();\n        delete contexts[webGLVersion];\n    }, false);\n    if (webGLVersion === 1) {\n        return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n    }\n    return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}\n//# sourceMappingURL=canvas_util.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { getTextureConfig } from './tex_util';\nexport function callAndCheck(gl, func) {\n    const returnValue = func();\n    if (env().getBool('DEBUG')) {\n        checkWebGLError(gl);\n    }\n    return returnValue;\n}\nfunction checkWebGLError(gl) {\n    const error = gl.getError();\n    if (error !== gl.NO_ERROR) {\n        throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n    }\n}\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\nexport function canBeRepresented(num) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n        (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n        return true;\n    }\n    return false;\n}\nexport function getWebGLErrorMessage(gl, status) {\n    switch (status) {\n        case gl.NO_ERROR:\n            return 'NO_ERROR';\n        case gl.INVALID_ENUM:\n            return 'INVALID_ENUM';\n        case gl.INVALID_VALUE:\n            return 'INVALID_VALUE';\n        case gl.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n        case gl.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n        case gl.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n        default:\n            return `Unknown error code ${status}`;\n    }\n}\nexport function getExtensionOrThrow(gl, extensionName) {\n    return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nexport function createVertexShader(gl, vertexShaderSource) {\n    const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n    callAndCheck(gl, () => gl.compileShader(vertexShader));\n    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n        console.log(gl.getShaderInfoLog(vertexShader));\n        throw new Error('Failed to compile vertex shader.');\n    }\n    return vertexShader;\n}\nexport function createFragmentShader(gl, fragmentShaderSource) {\n    const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n    callAndCheck(gl, () => gl.compileShader(fragmentShader));\n    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n    }\n    return fragmentShader;\n}\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n    const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n    if (lineNumberRegexResult == null) {\n        console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n        console.log(shaderSource);\n        return;\n    }\n    const lineNumber = +lineNumberRegexResult[1];\n    const shaderLines = shaderSource.split('\\n');\n    const pad = shaderLines.length.toString().length + 2;\n    const linesWithLineNumbers = shaderLines.map((line, lineNumber) => util.rightPad((lineNumber + 1).toString(), pad) + line);\n    let maxLineLength = 0;\n    for (let i = 0; i < linesWithLineNumbers.length; i++) {\n        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n    }\n    const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n    const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n    const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n    console.log(beforeErrorLines.join('\\n'));\n    console.log(shaderInfoLog.split('\\n')[0]);\n    console.log(`%c ${util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n    console.log(afterErrorLines.join('\\n'));\n}\nexport function createProgram(gl) {\n    return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\nexport function linkProgram(gl, program) {\n    callAndCheck(gl, () => gl.linkProgram(program));\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Failed to link vertex and fragment shaders.');\n    }\n}\nexport function validateProgram(gl, program) {\n    callAndCheck(gl, () => gl.validateProgram(program));\n    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Shader program validation failed.');\n    }\n}\nexport function createStaticVertexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function createStaticIndexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function getNumChannels() {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        return 1;\n    }\n    return 4;\n}\nexport function createTexture(gl) {\n    return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\nexport function validateTextureSize(width, height) {\n    const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if ((width <= 0) || (height <= 0)) {\n        const requested = `[${width}x${height}]`;\n        throw new Error('Requested texture size ' + requested + ' is invalid.');\n    }\n    if ((width > maxTextureSize) || (height > maxTextureSize)) {\n        const requested = `[${width}x${height}]`;\n        const max = `[${maxTextureSize}x${maxTextureSize}]`;\n        throw new Error('Requested texture size ' + requested +\n            ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n    }\n}\nexport function createFramebuffer(gl) {\n    return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\nexport function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n    const loc = gl.getAttribLocation(program, attribute);\n    if (loc === -1) {\n        // The GPU compiler decided to strip out this attribute because it's unused,\n        // thus no need to bind.\n        return false;\n    }\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));\n    callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n    return true;\n}\nexport function bindTextureUnit(gl, texture, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\nexport function unbindTextureUnit(gl, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function getProgramUniformLocationOrThrow(gl, program, uniformName) {\n    return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform \"' + uniformName + '\" not present in program.');\n}\nexport function getProgramUniformLocation(gl, program, uniformName) {\n    return gl.getUniformLocation(program, uniformName);\n}\nexport function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {\n    callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n    callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\nexport function bindCanvasToFramebuffer(gl) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n    callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\nexport function bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\nexport function unbindColorTextureFromFramebuffer(gl, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\nexport function validateFramebuffer(gl) {\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n    }\n}\nexport function getFramebufferErrorMessage(gl, status) {\n    switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n            return 'FRAMEBUFFER_UNSUPPORTED';\n        default:\n            return `unknown error ${status}`;\n    }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n    const tOrNull = callAndCheck(gl, () => returnTOrNull());\n    if (tOrNull == null) {\n        throw new Error(failureMessage);\n    }\n    return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n    const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n    const glTextureUnit = textureUnit + gl.TEXTURE0;\n    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n        const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n        throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n    }\n}\nexport function getBatchDim(shape, dimsToSkip = 2) {\n    return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\nexport function getRowsCols(shape) {\n    if (shape.length === 0) {\n        throw Error('Cannot get rows and columns of an empty shape array.');\n    }\n    return [\n        shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n    ];\n}\nexport function getShapeAs3D(shape) {\n    let shapeAs3D = [1, 1, 1];\n    const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n    if (!isScalar) {\n        shapeAs3D =\n            [getBatchDim(shape), ...getRowsCols(shape)];\n    }\n    return shapeAs3D;\n}\nexport function getTextureShapeFromLogicalShape(logShape, isPacked = false) {\n    let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if (isPacked) {\n        maxTexSize = maxTexSize * 2;\n        // This logic ensures we accurately count the number of packed texels needed\n        // to accommodate the tensor. We can only pack values in the same texel if\n        // they are from adjacent pairs of rows/cols within the same batch. So if a\n        // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n        // fact that the texels containing the third row are half empty.\n        logShape = logShape.map((d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n        // Packed texture height is at least 2 (the channel height of a single\n        // texel).\n        if (logShape.length === 1) {\n            logShape = [2, logShape[0]];\n        }\n    }\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n        const squeezeResult = util.squeezeShape(logShape);\n        logShape = squeezeResult.newShape;\n    }\n    let size = util.sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTexSize) {\n        return [1, size];\n    }\n    else if (logShape.length === 2 && logShape[0] <= maxTexSize &&\n        logShape[1] <= maxTexSize) {\n        return logShape;\n    }\n    else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n        logShape[2] <= maxTexSize) {\n        return [logShape[0] * logShape[1], logShape[2]];\n    }\n    else if (logShape.length === 3 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2]];\n    }\n    else if (logShape.length === 4 &&\n        logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n        logShape[3] <= maxTexSize) {\n        return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    }\n    else if (logShape.length === 4 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    }\n    else {\n        if (isPacked) {\n            // For packed textures size equals the number of channels required to\n            // accommodate the texture data. However in order to squarify such that\n            // inner dimensions stay even, we rewrite size to equal the number of\n            // texels. Then in the return statement we rehydrate the squarified\n            // dimensions to channel units.\n            const batchDim = getBatchDim(logShape);\n            let rows = 2, cols = 2;\n            if (logShape.length) {\n                [rows, cols] = getRowsCols(logShape);\n            }\n            size = batchDim * (rows / 2) * (cols / 2);\n            return util.sizeToSquarishShape(size).map(d => d * 2);\n        }\n        return util.sizeToSquarishShape(size);\n    }\n}\nfunction isEven(n) {\n    return n % 2 === 0;\n}\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1, shape2) {\n    shape1 = shape1.slice(-2);\n    shape2 = shape2.slice(-2);\n    if (util.arraysEqual(shape1, shape2)) {\n        return true;\n    }\n    if (!shape1.length || !shape2.length) { // One of the shapes is a scalar.\n        return true;\n    }\n    if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n        shape2[1] === 0) {\n        return true;\n    }\n    if (shape1.length !== shape2.length) { // One of the shapes is a vector.\n        const shape1Cols = shape1.slice(-1)[0];\n        const shape2Cols = shape2.slice(-1)[0];\n        if (shape1Cols === shape2Cols) {\n            return true;\n        }\n        if (isEven(shape1Cols) && isEven(shape2Cols) &&\n            (shape1[0] === 1 || shape2[0] === 1)) {\n            return true;\n        }\n    }\n    return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE;\nlet MAX_TEXTURES_IN_SHADER;\nexport function getWebGLMaxTextureSize(webGLVersion) {\n    if (MAX_TEXTURE_SIZE == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n    return MAX_TEXTURE_SIZE;\n}\nexport function resetMaxTextureSize() {\n    MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n    MAX_TEXTURES_IN_SHADER = null;\n}\nexport function getMaxTexturesInShader(webGLVersion) {\n    if (MAX_TEXTURES_IN_SHADER == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    }\n    // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n    return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion) {\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    let queryTimerVersion;\n    const gl = getWebGLContext(webGLVersion);\n    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n        webGLVersion === 2) {\n        queryTimerVersion = 2;\n    }\n    else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n        queryTimerVersion = 1;\n    }\n    else {\n        queryTimerVersion = 0;\n    }\n    return queryTimerVersion;\n}\nexport function hasExtension(gl, extensionName) {\n    const ext = gl.getExtension(extensionName);\n    return ext != null;\n}\nexport function isWebGLVersionEnabled(webGLVersion) {\n    try {\n        const gl = getWebGLContext(webGLVersion);\n        if (gl != null) {\n            return true;\n        }\n    }\n    catch (e) {\n        console.log('Error when getting WebGL context: ', e);\n        return false;\n    }\n    return false;\n}\nexport function isCapableOfRenderingToFloatTexture(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n    }\n    else {\n        if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n            return false;\n        }\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n        if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n            return false;\n        }\n    }\n    else {\n        if (hasExtension(gl, 'EXT_color_buffer_float')) {\n            return createFloatTextureAndBindToFramebuffer(gl);\n        }\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n            const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);\n        }\n        return false;\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\nfunction createFloatTextureAndBindToFramebuffer(gl) {\n    const texConfig = getTextureConfig(gl);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nfunction createHalfFloatTextureAndBindToFramebuffer(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nexport function isWebGLFenceEnabled(webGLVersion) {\n    if (webGLVersion !== 2) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    // tslint:disable-next-line:no-any\n    const isEnabled = gl.fenceSync != null;\n    return isEnabled;\n}\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` +\n                'in the WebGL backend.');\n        }\n    });\n}\n//# sourceMappingURL=webgl_util.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n    if (isWebGLVersionEnabled(2)) {\n        return 2;\n    }\n    else if (isWebGLVersionEnabled(1)) {\n        return 1;\n    }\n    return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n    const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n    !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n    return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n        false :\n        ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n    // Use uniform uploads only when 32bit floats are supported. In\n    // 16bit\n    // environments there are problems with comparing a 16bit texture value\n    // with a 32bit uniform value.\n    const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n    return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n    return -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n    }\n});\n//# sourceMappingURL=flags_webgl.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport function getGlslDifferences() {\n    let version;\n    let attribute;\n    let varyingVs;\n    let varyingFs;\n    let texture2D;\n    let output;\n    let defineOutput;\n    let defineSpecialNaN;\n    let defineSpecialInf;\n    let defineRound;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        version = '#version 300 es';\n        attribute = 'in';\n        varyingVs = 'out';\n        varyingFs = 'in';\n        texture2D = 'texture';\n        output = 'outputColor';\n        defineOutput = 'out vec4 outputColor;';\n        // Use custom isnan definition to work across differences between\n        // implementations on various platforms. While this should happen in ANGLE\n        // we still see differences between android and windows (on chrome) when\n        // using isnan directly.\n        defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n        // In webgl 2 we do not need to specify a custom isinf so there is no\n        // need for a special INFINITY constant.\n        defineSpecialInf = ``;\n        defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    else {\n        version = '';\n        attribute = 'attribute';\n        varyingVs = 'varying';\n        varyingFs = 'varying';\n        texture2D = 'texture2D';\n        output = 'gl_FragColor';\n        defineOutput = '';\n        // WebGL1 has no built in isnan so we define one here.\n        defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n        defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n        defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    return {\n        version,\n        attribute,\n        varyingVs,\n        varyingFs,\n        texture2D,\n        output,\n        defineOutput,\n        defineSpecialNaN,\n        defineSpecialInf,\n        defineRound\n    };\n}\n//# sourceMappingURL=glsl_version.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {\n    const strides = util.computeStrides(shape);\n    return strides\n        .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\nfunction buildVec(x) {\n    if (x.length === 1) {\n        return `${x[0]}`;\n    }\n    return `vec${x.length}(${x.join(',')})`;\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x, y) {\n    if (x.length !== y.length) {\n        throw new Error(`Vectors to be dotted must be of the same length -` +\n            `got ${x.length} and ${y.length}`);\n    }\n    const slices = [];\n    const nearestVec4 = Math.floor(x.length / 4);\n    const nearestVec4Remainder = x.length % 4;\n    for (let i = 0; i < nearestVec4; i++) {\n        const xSlice = x.slice(i * 4, i * 4 + 4);\n        const ySlice = y.slice(i * 4, i * 4 + 4);\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    if (nearestVec4Remainder !== 0) {\n        let xSlice = x.slice(nearestVec4 * 4);\n        let ySlice = y.slice(nearestVec4 * 4);\n        if (xSlice.length === 1) {\n            xSlice = xSlice.map(d => `float(${d})`);\n            ySlice = ySlice.map(d => `float(${d})`);\n        }\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    return slices.map((d, i) => `dot(${d})`).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape) {\n    const strides = util.computeStrides(shape).map(d => d.toString());\n    return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n//# sourceMappingURL=shader_compiler_util.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nimport { getDenseTexShape, PackingScheme } from './tex_util';\nexport class DecodeMatrixProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        const texShape = getDenseTexShape(outputShape);\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=decode_matrix_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nimport { getDenseTexShape, PackingScheme } from './tex_util';\nexport class DecodeMatrixPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        const texShape = getDenseTexShape(outputShape);\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=decode_matrix_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_float_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_float_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport class EncodeMatrixProgram {\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        const glsl = getGlslDifferences();\n        const [height, width] = texShape;\n        this.outputShape = outputShape;\n        let output = `result`;\n        if (inputIsUnsignedByte) {\n            output = `floor(result * 255. + 0.5)`;\n        }\n        this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_matrix_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nexport class EncodeMatrixPackedProgram {\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = getGlslDifferences();\n        const [height, width] = texShape;\n        this.outputShape = outputShape;\n        let mainLoop = '';\n        let output = 'result';\n        if (inputIsUnsignedByte) {\n            output = 'floor(result * 255. + 0.5)';\n        }\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                const channel = row * 2 + col;\n                mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_matrix_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n    const glsl = getGlslDifferences();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(width, height);\n    const texture = webgl_util.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return texture;\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n//# sourceMappingURL=gpgpu_util.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.vertexAttrsAreBound = false;\n        this.itemsToPoll = [];\n        const glVersion = env().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            setWebGLContext(glVersion, gl);\n        }\n        else {\n            this.gl = getWebGLContext(glVersion);\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (env().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return env().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        webgl_util.callAndCheck(gl, () => gl.finish());\n        webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShaderSource) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        const fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);\n        const vertexShader = gpgpu_util.createVertexShader(gl);\n        const program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        webgl_util.linkProgram(gl, program);\n        if (this.debug) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.debug) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        });\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n//# sourceMappingURL=gpgpu_context.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst { getBroadcastDims } = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n    });\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = getGlslDifferences();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet =\n            getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet =\n            getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (usesPackedTextures) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo);\n        case 2:\n            return getPackedSampler2D(inInfo);\n        case 3:\n            return getPackedSampler3D(inInfo);\n        default:\n            return getPackedSamplerND(inInfo);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = getGlslDifferences();\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n//# sourceMappingURL=shader_compiler.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nexport function compileProgram(gpgpu, program, inputs, output) {\n    const userCode = program.userCode;\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);\n    const webGLProgram = gpgpu.createProgram(source);\n    // Add special uniforms (NAN, INFINITY)\n    let infLoc = null;\n    const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const uniformLocations = {};\n    for (let i = 0; i < program.variableNames.length; i++) {\n        const varName = program.variableNames[i];\n        const shouldThrow = false;\n        uniformLocations[varName] =\n            gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n        uniformLocations[`offset${varName}`] =\n            gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    }\n    return {\n        program,\n        source,\n        webGLProgram,\n        uniformLocations,\n        inShapeInfos,\n        outShapeInfo,\n        infLoc,\n        nanLoc,\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customSetup) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    // Set special uniforms (NAN, INFINITY)\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    inputs.forEach((input, i) => {\n        const varName = binary.program.variableNames[i];\n        const varLoc = binary.uniformLocations[varName];\n        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            return;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            return;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n    });\n    if (customSetup != null) {\n        customSetup(gpgpu, binary.webGLProgram);\n    }\n    gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n        keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode;\n    return key;\n}\n//# sourceMappingURL=gpgpu_math.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);\n        }\n    });\n}\n//# sourceMappingURL=cpu_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const realVals = backend.data.get(real.dataId).values;\n    const imagVals = backend.data.get(imag.dataId).values;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.data.get(complexInfo.dataId);\n    // The complex tensor owns the underlying real and imag tensorInfos, only the\n    // complex tensor tracks refCount, when complexData is disposed the\n    // underlying tensorData will be disposed.\n    complex.complexTensorInfos = {\n        real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n        imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n    };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'cpu',\n    kernelFunc: complex\n};\n//# sourceMappingURL=Complex.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(backend, shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(backend, shape, 'float32');\n        const imag = zeros(backend, shape, 'float32');\n        return complex({ inputs: { real, imag }, backend });\n    }\n    const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n    return backend.makeTensorInfo(shape, dtype, values);\n}\n//# sourceMappingURL=zeros_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nexport const identityConfig = {\n    kernelName: Identity,\n    backendName: 'cpu',\n    kernelFunc: identity\n};\n//# sourceMappingURL=Identity.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nexport function real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const real = backend.data.get(input.dataId).complexTensorInfos.real;\n    const realVal = backend.data.get(real.dataId).values;\n    // When complex tensor is disposed, its underlying parts will be disposed too.\n    // Make new tensor out of the real value of the complex. This makes sure the\n    // value is still accessible even if complex tensor is disposed.\n    return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nexport const realConfig = {\n    kernelName: Real,\n    backendName: 'cpu',\n    kernelFunc: real\n};\n//# sourceMappingURL=Real.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensorInfo }, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (dtype === 'int32') {\n        const values = backend.data.get(x.dataId).values;\n        const resultValues = Int32Array.from(values);\n        return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n    }\n    if (dtype === 'bool') {\n        // This is essentially the result of notEqual(x, 0). We avoid using\n        // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n        // cast -> notEqual -> binary_utils.\n        const xVals = backend.data.get(x.dataId).values;\n        const zero = util.toTypedArray([0], x.dtype);\n        const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n        return backend.makeTensorInfo(resultShape, 'bool', resultData);\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'cpu',\n    kernelFunc: cast\n};\n//# sourceMappingURL=Cast.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n    if (complexImpl == null) {\n        return ({ inputs, backend }) => {\n            const { a, b } = inputs;\n            const cpuBackend = backend;\n            assertNotComplex([a, b], name);\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        };\n    }\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const cpuBackend = backend;\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            const $aComplex = cast({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n            const aReal = $aComplexVals.complexTensorInfos.real;\n            const aImag = $aComplexVals.complexTensorInfos.imag;\n            const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n            const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n            const $bComplex = cast({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n            const bReal = $bComplexVals.complexTensorInfos.real;\n            const bImag = $bComplexVals.complexTensorInfos.imag;\n            const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n            const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n            const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n            const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n            const result = complex({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\n            cpuBackend.disposeIntermediateTensorInfo($aComplex);\n            cpuBackend.disposeIntermediateTensorInfo($bComplex);\n            cpuBackend.disposeIntermediateTensorInfo(resultReal);\n            cpuBackend.disposeIntermediateTensorInfo(resultImag);\n            return result;\n        }\n        else {\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        }\n    };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op) {\n    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n        const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultSize = util.sizeFromShape(resultShape);\n        const resultRank = resultShape.length;\n        const resultStrides = util.computeStrides(resultShape);\n        const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n        const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n        const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n        const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n        const aRank = aShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bRank = bShape.length;\n        const bStrides = util.computeStrides(bShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                resultRealVals[i] = result.real;\n                resultImagVals[i] = result.imag;\n            }\n        }\n        else {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                resultRealVals[i] = opResult.real;\n                resultImagVals[i] = opResult.imag;\n            }\n        }\n        return [resultRealVals, resultImagVals, resultShape];\n    };\n}\n//# sourceMappingURL=binary_utils.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n//# sourceMappingURL=unary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(name, op, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const xSize = util.sizeFromShape(x.shape);\n        const $dtype = dtype || x.dtype;\n        const newValues = util.getArrayFromDType($dtype, xSize);\n        for (let i = 0; i < xSize; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const $dtype = dtype || x.dtype;\n        const newValues = unaryImpl(values, $dtype, attrs);\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n//# sourceMappingURL=unary_utils.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n//# sourceMappingURL=Ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n//# sourceMappingURL=Exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n//# sourceMappingURL=Expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n//# sourceMappingURL=Log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, attrs, backend } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    assertNotComplex(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    const values = backend.data.get(x.dataId).values;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n    const dataId = backend.write(result, newShape, x.dtype);\n    return { dataId, shape: newShape, dtype: x.dtype };\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'cpu',\n    kernelFunc: transpose\n};\n//# sourceMappingURL=Transpose.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n//# sourceMappingURL=Rsqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, lessImpl: lessImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, prodImpl: prodImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, stridedSliceImpl: stridedSliceImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU, } = shared;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, ceilImplCPU, concatImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherV2ImplCPU, greaterImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, prodImplCPU, simpleAbsImplCPU, sliceImplCPU, stridedSliceImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU, };\n//# sourceMappingURL=shared.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n//# sourceMappingURL=Concat_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        outBuf.values[i] = xBuf.values[originalIndex];\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherV2_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=LinSpace_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=Range_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n//# sourceMappingURL=StridedSlice_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n//# sourceMappingURL=Tile_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n//# sourceMappingURL=TopK_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport function getVecChannels(name, rank) {\n    return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\nexport function getChannels(name, rank) {\n    if (rank === 1) {\n        return [name];\n    }\n    return getVecChannels(name, rank);\n}\nexport function getSourceCoords(rank, dims) {\n    if (rank === 1) {\n        return 'rc';\n    }\n    let coords = '';\n    for (let i = 0; i < rank; i++) {\n        coords += dims[i];\n        if (i < rank - 1) {\n            coords += ',';\n        }\n    }\n    return coords;\n}\n//# sourceMappingURL=packing_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        // Only input / output 3D tensors.\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        if (rank === 0) {\n            this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n        }\n        else {\n            const channels = getChannels('rc', rank);\n            const dtype = getCoordsDataType(rank);\n            const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);\n            const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);\n            const output = getOutput(outputShape, channels);\n            this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n        }\n    }\n}\nfunction getSourceCoordsArr(rank, dims) {\n    const coords = [];\n    for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n            let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n            for (let d = 2; d < rank; d++) {\n                coord = `${dims[dims.length - 1 - d]},` + coord;\n            }\n            coords.push(coord);\n        }\n    }\n    return coords;\n}\nfunction getOutOfBoundsCondition(rank, shape, dims) {\n    if (rank === 1) {\n        return `rc > ${shape[0]}`;\n    }\n    let cond = '';\n    for (let i = rank - 2; i < rank; i++) {\n        cond += `${dims[i]} >= ${shape[i]}`;\n        if (i < rank - 1) {\n            cond += '||';\n        }\n    }\n    return cond;\n}\nfunction getSetup(rank, cols, rows, dims) {\n    if (rank === 1) {\n        return '';\n    }\n    const innerDims = dims.slice(-2);\n    return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\nfunction getOutput(shape, dims) {\n    const rank = shape.length;\n    const sourceCoords = getSourceCoordsArr(rank, dims);\n    if (rank === 1) {\n        return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n    }\n    return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n//# sourceMappingURL=pack_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n    constructor(outputShape, inputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        let mainLoop = ``;\n        for (let i = 0; i < 4; i++) {\n            let thisRC = `thisRC = rc;`;\n            if (i % 2 === 1) {\n                thisRC += `thisRC.z += 1;`;\n            }\n            if (i > 1) {\n                thisRC += `thisRC.y += 1;`;\n            }\n            mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n        }\n        this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\nfunction getReshapedInputCoords(shape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n//# sourceMappingURL=reshape_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture } from './gpgpu_util';\nimport { getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureUsage } from './tex_util';\nexport class TextureManager {\n    constructor(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0; // How many bytes that have been allocated\n        // are available for reuse.\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.usedTextures = {};\n    }\n    acquireTexture(shapeRC, usage, isPacked) {\n        const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n        const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextures)) {\n            this.usedTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this._numBytesFree -= texBytes;\n            this.log();\n            const newTexture = this.freeTextures[shapeKey].shift();\n            this.usedTextures[shapeKey].push(newTexture);\n            return newTexture;\n        }\n        let newTexture;\n        if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n            newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n            newTexture =\n                this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n            newTexture =\n                this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        this.usedTextures[shapeKey].push(newTexture);\n        this.numUsedTextures++;\n        this._numBytesAllocated += texBytes;\n        this.log();\n        return newTexture;\n    }\n    releaseTexture(texture, shape, logicalTexType, isPacked) {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n        const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n        if (deleteTexThreshold !== -1 &&\n            this._numBytesAllocated > deleteTexThreshold) {\n            this.gpgpu.deleteMatrixTexture(texture);\n            this._numBytesAllocated -= texBytes;\n        }\n        else {\n            this.freeTextures[shapeKey].push(texture);\n            this.numFreeTextures++;\n            this._numBytesFree += texBytes;\n        }\n        this.numUsedTextures--;\n        const texList = this.usedTextures[shapeKey];\n        const texIndex = texList.indexOf(texture);\n        if (texIndex < 0) {\n            throw new Error('Cannot release a texture that was never provided by this ' +\n                'texture manager');\n        }\n        texList.splice(texIndex, 1);\n        this.log();\n    }\n    log() {\n        if (!this.logEnabled) {\n            return;\n        }\n        const total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);\n        const freeRatio = this._numBytesFree / this._numBytesAllocated;\n        console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n        console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);\n    }\n    get numBytesAllocated() {\n        return this._numBytesAllocated;\n    }\n    get numBytesFree() {\n        return this._numBytesFree;\n    }\n    getNumUsedTextures() {\n        return this.numUsedTextures;\n    }\n    getNumFreeTextures() {\n        return this.numFreeTextures;\n    }\n    dispose() {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        for (const texShape in this.freeTextures) {\n            this.freeTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        for (const texShape in this.usedTextures) {\n            this.usedTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        this.freeTextures = null;\n        this.usedTextures = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0;\n    }\n}\nfunction numBytesForInternalFormat(gl, internalFormat) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    if (internalFormat === glany.R32F) {\n        return 4;\n    }\n    else if (internalFormat === glany.R16F) {\n        return 2;\n    }\n    else if (internalFormat === glany.RGBA32F) {\n        return 16;\n    }\n    else if (internalFormat === gl.RGBA) {\n        return 16;\n    }\n    else if (internalFormat === glany.RGBA16F) {\n        return 8;\n    }\n    throw new Error(`Unknown internal format ${internalFormat}`);\n}\nexport function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n    // It is not possible to infer packed status from the texture type because\n    // depending on the textureConfig, different  texture types may resolve to the\n    // same internal format (e.g. in WebGL1, the internal format for\n    // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n    // explicitly.\n    const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n    let numElements;\n    if (isPacked) {\n        const [packedWidth, packedHeight] = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = packedWidth * packedHeight;\n    }\n    else {\n        const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = width * height;\n    }\n    const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n    return numElements * bytesPerElement;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n    switch (physicalTexType) {\n        case PhysicalTextureType.PACKED_2X2_FLOAT32:\n            return getInternalFormatForPackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_2X2_FLOAT16:\n            return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT32:\n            return getInternalFormatForFloat32MatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT16:\n            return getInternalFormatForFloat16MatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n            return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n        default:\n            throw new Error(`Unknown physical texture type ${physicalTexType}`);\n    }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n        if (isPacked) {\n            return PhysicalTextureType.PACKED_2X2_FLOAT32;\n        }\n        return PhysicalTextureType.UNPACKED_FLOAT32;\n    }\n    if (isPacked) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT16;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n    if (logicalTexType === TextureUsage.UPLOAD) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n        return getPhysicalTextureForRendering(isPacked);\n    }\n    else if (logicalTexType === TextureUsage.DOWNLOAD ||\n        logicalTexType === TextureUsage.PIXELS) {\n        return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n    }\n    throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n    return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n//# sourceMappingURL=texture_manager.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class UnaryOpProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nexport const LINEAR = `return x;`;\nexport const ABS = `return abs(x);`;\nexport function STEP(alpha = 0.0) {\n    return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nexport const CLONE = 'return x;';\n//# sourceMappingURL=unaryop_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const LINEAR = `return x;`;\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport class UnaryOpPackedProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=unaryop_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class UnpackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        const channels = getChannels('rc', rank);\n        const dtype = getCoordsDataType(rank);\n        const sourceCoords = getSourceCoords(rank, channels);\n        const innerDims = channels.slice(-2);\n        const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n        this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=unpack_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = {};\n        this.texData.set(dataId, {\n            shape,\n            dtype,\n            values,\n            usage: TextureUsage.UPLOAD,\n            refCount: 1,\n            complexParentRefCount: 0\n        });\n        return dataId;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    /**\n     * Decrease refCount of a `TextureData` if it is a component of complex\n     * tensor.\n     */\n    decComplexRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            if (texData.complexParentRefCount > 0) {\n                texData.refCount--;\n            }\n        }\n    }\n    move(dataId, values, shape, dtype) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, {\n            shape,\n            dtype,\n            values,\n            usage: TextureUsage.UPLOAD,\n            refCount: 1,\n            complexParentRefCount: 0\n        });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        const dataId = tensorInfo.dataId;\n        if (this.texData.has(dataId)) {\n            const textureData = this.texData.get(dataId);\n            textureData.refCount--;\n            if (textureData.refCount < 1) {\n                this.disposeData(dataId);\n            }\n        }\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            this.disposeData(dataId);\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    disposeData(dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return;\n        }\n        // Trying to dispose a textureData that has a 'kept' refCount, e.g. trying\n        // to dispose a tensor whose data bucket is shared with a complex tensor. In\n        // this case we are removing a reference to the textureData, but we\n        // shouldn't actually dispose the texture.\n        if (this.texData.get(dataId).complexParentRefCount > 0) {\n            this.texData.get(dataId).refCount--;\n            return;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.texData.get(complexTensorInfos.real.dataId).complexParentRefCount--;\n            this.disposeIntermediateTensorInfo(complexTensorInfos.real);\n            this.texData.get(complexTensorInfos.imag.dataId).complexParentRefCount--;\n            this.disposeIntermediateTensorInfo(complexTensorInfos.imag);\n        }\n        this.texData.delete(dataId);\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend &&\n            cpuBackend == null) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        return this.compileAndRun(program, [x], dtype);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        const { dataId } = this.makeTensorInfo(shape, dtype, values);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport { registerBackend } from '@tensorflow/tfjs-core';\nimport { MathBackendCPU } from './backend_cpu';\nimport * as shared from './shared';\nexport { MathBackendCPU } from './backend_cpu';\nexport { version as version_cpu } from './version';\nexport { shared };\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n//# sourceMappingURL=base.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nexport class BinaryOpPackedProgram {\n    constructor(op, aShape, bShape, checkOutOfBounds = false) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const rank = this.outputShape.length;\n        let checkOutOfBoundsString = '';\n        if (checkOutOfBounds) {\n            if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n                checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n            }\n            else {\n                const dtype = getCoordsDataType(rank);\n                checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n                if (rank === 1) {\n                    checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                }\n                else {\n                    const channels = getChannels('coords', rank);\n                    checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                }\n            }\n        }\n        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function leakyRelu(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { alpha } = attrs;\n    assertNotComplex([x], 'leakyRelu');\n    const xSize = util.sizeFromShape(x.shape);\n    const xVals = backend.data.get(x.dataId).values;\n    const outVals = util.getTypedArrayFromDType('float32', xSize);\n    for (let i = 0; i < xVals.length; i++) {\n        outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n    }\n    return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\nexport const leakyReluConfig = {\n    kernelName: LeakyRelu,\n    backendName: 'cpu',\n    kernelFunc: leakyRelu\n};\n//# sourceMappingURL=LeakyRelu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nconst preluImpl = createSimpleBinaryKernelImpl((xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\nexport function prelu(args) {\n    const { inputs, backend } = args;\n    const { x, alpha } = inputs;\n    assertNotComplex([x, alpha], 'prelu');\n    const aVals = backend.data.get(x.dataId).values;\n    const bVals = backend.data.get(alpha.dataId).values;\n    const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n    return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\nexport const preluConfig = {\n    kernelName: Prelu,\n    backendName: 'cpu',\n    kernelFunc: prelu,\n};\n//# sourceMappingURL=Prelu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const $dtype = dtype || x.dtype;\n        if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n            const xData = webglBackend.texData.get(x.dataId);\n            const outValues = cpuKernelImpl(xData.values, $dtype);\n            return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, opSnippet);\n        }\n        return webglBackend.runWebGLProgram(program, [x], $dtype);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        if (supportsComplex && a.dtype === 'complex64') {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [real, imag] = [\n                [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n                [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n            ].map(complexParts => {\n                const [aPart, bPart] = complexParts;\n                const aHandle = {\n                    dataId: aPart.dataId,\n                    dtype: aPart.dtype,\n                    shape: a.shape\n                };\n                const bHandle = {\n                    dataId: bPart.dataId,\n                    dtype: bPart.dtype,\n                    shape: b.shape\n                };\n                const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n                return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n            });\n            const complexOutput = complex({ inputs: { real, imag }, backend: webglBackend });\n            webglBackend.disposeIntermediateTensorInfo(real);\n            webglBackend.disposeIntermediateTensorInfo(imag);\n            // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n            return complexOutput;\n        }\n        const $dtype = dtype || upcastType(a.dtype, b.dtype);\n        if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, aData.values, bData.values, $dtype);\n            const out = webglBackend.makeTensorInfo(outShape, $dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n            return out;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n            packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n        }\n        else {\n            program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        }\n        return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return PRELU_PACKED;\n        }\n        return PRELU;\n    }\n    else if (activation === 'leakyrelu') {\n        if (packed) {\n            return LEAKYRELU_PACKED;\n        }\n        return LEAKYRELU;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n//# sourceMappingURL=kernel_funcs_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MatMulPackedProgram {\n    constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {\n        this.variableNames = ['matrixA', 'matrixB'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        const sharedDim = transposeA ? aShape[1] : aShape[2];\n        const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n        const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n        const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n        const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n        const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluActivation) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        let batchASnippet = 'rc.x';\n        let batchBSnippet = 'rc.x';\n        if (aShape[0] < bShape[0]) {\n            batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n        }\n        else if (bShape[0] < aShape[0]) {\n            batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mulmat_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n    REAL: 'return areal * breal - aimag * bimag;',\n    IMAG: 'return areal * bimag + aimag * breal;'\n};\nexport class BinaryOpComplexProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_complex_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    const xSize = util.sizeFromShape(x.shape);\n    const $shape = util.inferFromImplicitShape(shape, xSize);\n    const $xSize = util.sizeFromShape($shape);\n    util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n        `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n        `shape must have the same number of elements.`);\n    backend.incRef(x.dataId);\n    const xData = backend.data.get(x.dataId);\n    if (xData.complexTensorInfos != null) {\n        const real = xData.complexTensorInfos.real;\n        const imag = xData.complexTensorInfos.imag;\n        real.shape = $shape;\n        imag.shape = $shape;\n    }\n    return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nexport const reshapeConfig = {\n    kernelName: Reshape,\n    backendName: 'cpu',\n    kernelFunc: reshape\n};\n//# sourceMappingURL=Reshape.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ReshapePackedProgram } from '../reshape_packed_gpu';\nimport { getBatchDim, getRowsCols } from '../webgl_util';\nexport function packedReshape(input, afterShape, backend) {\n    const input3DShape = [getBatchDim(input.shape),\n        ...getRowsCols(input.shape)];\n    const input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n    };\n    const afterShapeAs3D = [getBatchDim(afterShape),\n        ...getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = backend.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n    return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n}\n//# sourceMappingURL=reshape.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class MeanProgram {\n    constructor(reduceInfo, divisor) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `sumValue += dot(values, ones);`;\n        if (divisor != null) {\n            const denominator = 1 / divisor;\n            updateSnippet = `sumValue += dot(values * ${util.isInt(denominator) ? denominator.toPrecision(2) :\n                denominator}, ones);`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mean_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n    constructor(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        let initializationValue = '0.0';\n        let compareOp = ``;\n        if (reduceType === 'prod') {\n            initializationValue = '1.0';\n        }\n        else if (reduceType === 'min') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '1.0 / 1e-20';\n            compareOp = `min`;\n        }\n        else if (reduceType === 'max') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n            compareOp = `max`;\n        }\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = `sumValue`;\n        }\n        else if (reduceType === 'prod') {\n            returnValue = `prodValue`;\n        }\n        else if (reduceType === 'all') {\n            returnValue = `allValue`;\n        }\n        else if (reduceType === 'any') {\n            returnValue = `anyValue`;\n        }\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        let vecType = `vec4`;\n        if (reduceType === 'all') {\n            initializationValue = '1.0';\n            updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        else if (reduceType === 'any') {\n            initializationValue = '0.0';\n            updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reduce_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n    const stages = [];\n    while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n        const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(outSize);\n        stages.push({\n            inSize: outSize,\n            windowSize,\n            outSize: Math.ceil(outSize / windowSize)\n        });\n    }\n    return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n    const reductionStages = getReductionStages(x.shape);\n    let result = x;\n    for (let i = 0; i < reductionStages.length; i++) {\n        const { inSize, windowSize, outSize } = reductionStages[i];\n        let program;\n        let previousResult;\n        if (reductionType === 'mean') {\n            program = i === 0 ?\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, inSize) :\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize });\n        }\n        else {\n            program = new ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);\n        }\n        previousResult = result;\n        result = backend.runWebGLProgram(program, [result], dtype);\n        if (previousResult.dataId !== x.dataId) {\n            backend.disposeIntermediateTensorInfo(previousResult);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=reduce.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposeProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const switched = getSwitchedCoords(newDim);\n        this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n    }\n}\nfunction getSwitchedCoords(newDim) {\n    const rank = newDim.length;\n    if (rank > 6) {\n        throw Error(`Transpose for rank ${rank} is not yet supported`);\n    }\n    const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n    const switchedCoords = new Array(rank);\n    for (let i = 0; i < newDim.length; i++) {\n        switchedCoords[newDim[i]] = originalOrder[i];\n    }\n    return switchedCoords.join();\n}\n//# sourceMappingURL=transpose_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        if (this.rank > 6) {\n            throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n        }\n        const dtype = getCoordsDataType(this.rank);\n        const outputOrder = getVecChannels('rc', this.rank);\n        const switchedOrder = new Array(this.rank);\n        for (let i = 0; i < newDim.length; i++) {\n            switchedOrder[newDim[i]] = outputOrder[i];\n        }\n        const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n        const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n        const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n        this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n    }\n}\n//# sourceMappingURL=transpose_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'sum');\n    let $x;\n    if (x.dtype === 'bool') {\n        $x = cast({ inputs: { x }, backend, attrs: { dtype: 'int32' } });\n    }\n    else {\n        $x = identity({ inputs: { x }, backend });\n    }\n    const xRank = $x.shape.length;\n    const axes = util.parseAxisParam(axis, $x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = $x;\n    if (permutation != null) {\n        permutedX =\n            transpose({ inputs: { x: $x }, backend, attrs: { perm: permutation } });\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n    const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n    let result = zeros(backend, outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = backend.data.get(result.dataId).values;\n    const aVals = backend.data.get(permutedX.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let sum = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            sum += aVals[offset + j];\n        }\n        vals[i] = sum;\n    }\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n        const oldResult = result;\n        result = reshape({ inputs: { x: result }, backend, attrs: { shape: newShape } });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    backend.disposeIntermediateTensorInfo($x);\n    if (permutation != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return result;\n}\nexport const sumConfig = {\n    kernelName: Sum,\n    backendName: 'cpu',\n    kernelFunc: sum\n};\n//# sourceMappingURL=Sum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transposeImpl } from './Transpose_impl';\nexport function sumImpl(x, axis, keepDims, backend) {\n    const reductionIndices = axis;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const sumInputIsTransposed = permutedAxes != null;\n    let sumInput = x;\n    if (sumInputIsTransposed) {\n        sumInput = transposeImpl(x, permutedAxes, backend);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [sumOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n    let outShape = sumOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n    }\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x: sumInput }, attrs: { shape: [batchSize, inSize] }, backend });\n    const outType = sumOutType(x.dtype);\n    const reduced = reduce(reshapedInput, outType, 'sum', backend);\n    const out = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (sumInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(sumInput);\n    }\n    return out;\n}\n//# sourceMappingURL=Sum_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { upcastType, util } from '@tensorflow/tfjs-core';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport function batchMatMulImpl({ a, b, transposeA, transposeB, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n    util.assert(aRank >= 2 && bRank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` +\n        `same or at least one input batch dimension must be 1. Got input ` +\n        `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n    const outShapeOuterDims = batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ?\n        [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ?\n        [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const intermediates = [a3d, b3d];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation != null ?\n        mapActivationToShaderProgram(activation, true) :\n        null;\n    const containsFusedOps = hasBias || hasPreluActivationWeights ||\n        hasLeakyreluAlpha || fusedActivation != null;\n    let out;\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n        let aVec = a3d;\n        let bVec = b3d;\n        if (transposeA) {\n            aVec = transpose({ inputs: { x: a3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(aVec);\n        }\n        if (transposeB) {\n            bVec = transpose({ inputs: { x: b3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(bVec);\n        }\n        const shouldReshapeA = outerShapeB !== 1;\n        const shouldReshapeB = outerShapeB === 1;\n        let aVec3d = aVec;\n        if (shouldReshapeA) {\n            aVec3d = reshape({\n                inputs: { x: aVec },\n                backend,\n                attrs: { shape: [batchDim, sharedDim, 1] }\n            });\n            intermediates.push(aVec3d);\n        }\n        const axis = outerShapeB === 1 ? 2 : 1;\n        let bVec3d = bVec;\n        if (shouldReshapeB) {\n            bVec3d = reshape({\n                inputs: { x: bVec },\n                backend,\n                attrs: { shape: [batchDim, 1, sharedDim] }\n            });\n            intermediates.push(bVec3d);\n        }\n        const product = multiply({ inputs: { a: aVec3d, b: bVec3d }, backend });\n        out = sum({ inputs: { x: product }, backend, attrs: { axis, keepDims: true } });\n        intermediates.push(product);\n    }\n    else {\n        const dtype = upcastType(a.dtype, b.dtype);\n        const program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = [a3d, b3d];\n        if (bias != null) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        out = backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: outShape } });\n    intermediates.push(out);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return outReshaped;\n}\n//# sourceMappingURL=BatchMatMul_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    let current;\n    let addRes;\n    let activationRes;\n    const intermediates = [];\n    const matMulRes = batchMatMul({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend });\n    current = matMulRes;\n    if (bias) {\n        addRes = add({ inputs: { a: current, b: bias }, backend });\n        intermediates.push(current);\n        current = addRes;\n    }\n    if (activation) {\n        activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n        intermediates.push(current);\n        current = activationRes;\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return current;\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'cpu',\n    kernelFunc: _fusedMatMul,\n};\n//# sourceMappingURL=_FusedMatMul.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\nexport const acosConfig = {\n    kernelName: Acos,\n    backendName: 'cpu',\n    kernelFunc: acos,\n};\n//# sourceMappingURL=Acos.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\nexport const acoshConfig = {\n    kernelName: Acosh,\n    backendName: 'cpu',\n    kernelFunc: acosh,\n};\n//# sourceMappingURL=Acosh.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=addn_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNPackedProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=addn_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    assertNotComplex(inputs, 'addN');\n    const vals = tensors.map(t => backend.data.get(t.dataId).values);\n    const outBuf = buffer(tensors[0].shape, tensors[0].dtype);\n    const outVals = outBuf.values;\n    for (let i = 0; i < tensors.length; i++) {\n        const currVals = vals[i];\n        for (let j = 0; j < outVals.length; j++) {\n            outVals[j] += currVals[j];\n        }\n    }\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'cpu',\n    kernelFunc: addN\n};\n//# sourceMappingURL=AddN.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { All, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function all(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'all');\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let all = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            all = all && value;\n        }\n        vals[i] = all;\n    }\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo($x);\n    }\n    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n    if (keepDims) {\n        const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        const reshapedResult = reshape({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });\n        backend.disposeIntermediateTensorInfo(result);\n        return reshapedResult;\n    }\n    return result;\n}\nexport const allConfig = {\n    kernelName: All,\n    backendName: 'cpu',\n    kernelFunc: all\n};\n//# sourceMappingURL=All.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function any(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'any');\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let anyVal = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            anyVal = anyVal || value;\n        }\n        vals[i] = anyVal;\n    }\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo($x);\n    }\n    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n    if (keepDims) {\n        const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        const reshapedResult = reshape({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });\n        backend.disposeIntermediateTensorInfo(result);\n        return reshapedResult;\n    }\n    return result;\n}\nexport const anyConfig = {\n    kernelName: Any,\n    backendName: 'cpu',\n    kernelFunc: any\n};\n//# sourceMappingURL=Any.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n    constructor(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        const { windowSize, batchSize, outSize } = reduceInfo;\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        const compOp = (op === 'max') ? '>' : '<';\n        const indexSnippet = firstPass ?\n            'inOffset + i;' :\n            'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n    const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n    }\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n        return output;\n    }\n    const result = argReduce(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    if (output.shape.length === x.shape.length) {\n        const result = argReducePacked(backend, x, reduceType, output);\n        backend.disposeIntermediateTensorInfo(output);\n        return result;\n    }\n    return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n        const intermediateTensorInfos = [];\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x }, backend, attrs: { shape: [-1, inSize] } });\n        intermediateTensorInfos.push(a2D);\n        const reduced = argReduce(backend, a2D, reduceType);\n        intermediateTensorInfos.push(reduced);\n        const reshaped = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return reshaped;\n    }\n    return argReducePacked(backend, x, reduceType);\n}\n//# sourceMappingURL=arg_min_max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    assertNotComplex(x, 'argMax');\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    axes = [axes[0]];\n    backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const outSize = util.sizeFromShape(outShape);\n    const vals = util.makeZerosTypedArray(outSize, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        let maxIndex = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n                maxIndex = j;\n            }\n        }\n        vals[i] = maxIndex;\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMaxConfig = {\n    kernelName: ArgMax,\n    backendName: 'cpu',\n    kernelFunc: argMax\n};\n//# sourceMappingURL=ArgMax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    assertNotComplex(x, 'argMin');\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    axes = [axes[0]];\n    backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const outSize = util.sizeFromShape(outShape);\n    const vals = util.makeZerosTypedArray(outSize, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let min = aVals[offset];\n        let minIndex = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value < min) {\n                min = value;\n                minIndex = j;\n            }\n        }\n        vals[i] = minIndex;\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMinConfig = {\n    kernelName: ArgMin,\n    backendName: 'cpu',\n    kernelFunc: argMin\n};\n//# sourceMappingURL=ArgMin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\nexport const asinConfig = {\n    kernelName: Asin,\n    backendName: 'cpu',\n    kernelFunc: asin,\n};\n//# sourceMappingURL=Asin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\nexport const asinhConfig = {\n    kernelName: Asinh,\n    backendName: 'cpu',\n    kernelFunc: asinh,\n};\n//# sourceMappingURL=Asinh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\nexport const atanConfig = {\n    kernelName: Atan,\n    backendName: 'cpu',\n    kernelFunc: atan,\n};\n//# sourceMappingURL=Atan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const atan2Impl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.atan2(aValue, bValue));\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\nexport const atan2Config = {\n    kernelName: Atan2,\n    backendName: 'cpu',\n    kernelFunc: atan2,\n};\n//# sourceMappingURL=Atan2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\nexport const atanhConfig = {\n    kernelName: Atanh,\n    backendName: 'cpu',\n    kernelFunc: atanh,\n};\n//# sourceMappingURL=Atanh.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Pool2DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                flattenPositionStr) :\n                `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\nexport class Pool3DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ?\n                (includeBatchInIndex ?\n                    `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` :\n                    `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n                `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pool_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function avgPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'avgPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    let res;\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        res = identity({ inputs: { x }, backend });\n    }\n    else {\n        const xValues = backend.data.get(x.dataId).values;\n        const strides = util.computeStrides(x.shape);\n        const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n    }\n    return res;\n}\nexport const avgPoolConfig = {\n    kernelName: AvgPool,\n    backendName: 'cpu',\n    kernelFunc: avgPool\n};\n//# sourceMappingURL=AvgPool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function avgPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    assertNotComplex(x, 'avgPool3d');\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);\n    const xValues = backend.data.get(x.dataId).values;\n    const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n    return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const avgPool3DConfig = {\n    kernelName: AvgPool3D,\n    backendName: 'cpu',\n    kernelFunc: avgPool3D\n};\n//# sourceMappingURL=AvgPool3D.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class AvgPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=avg_pool_backprop_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function avgPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    assertNotComplex([dy, input], 'avgPool3DGrad');\n    const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(input.shape, 'float32');\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n    const dyBuf = backend.bufferSync(dy);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                    for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                        // Shader code begins.\n                        const dyDepthCorner = dxDepth - padFront;\n                        const dyRowCorner = dxRow - padTop;\n                        const dyColCorner = dxCol - padLeft;\n                        let dotProd = 0;\n                        for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                            const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                            if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                Math.floor(dyDepth) !== dyDepth) {\n                                continue;\n                            }\n                            for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                    Math.floor(dyRow) !== dyRow) {\n                                    continue;\n                                }\n                                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                        Math.floor(dyCol) !== dyCol) {\n                                        continue;\n                                    }\n                                    const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    dotProd += pixel;\n                                }\n                            }\n                        }\n                        dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const avgPool3DGradConfig = {\n    kernelName: AvgPool3DGrad,\n    backendName: 'cpu',\n    kernelFunc: avgPool3DGrad\n};\n//# sourceMappingURL=AvgPool3DGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function avgPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    assertNotComplex([dy, input], 'avgPoolGrad');\n    const { filterSize, strides, pad } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(x.shape, 'float32');\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n    const dyData = backend.data.get(dy.dataId).values;\n    const dyBuf = buffer(dy.shape, 'float32', dyData);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                    // Shader code begins.\n                    const dyRCorner = dxR - padTop;\n                    const dyCCorner = dxC - padLeft;\n                    let dotProd = 0;\n                    for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                        const dyR = (dyRCorner + wR) / strideHeight;\n                        if (dyR < 0 || dyR >= convInfo.outHeight ||\n                            Math.floor(dyR) !== dyR) {\n                            continue;\n                        }\n                        for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                            const dyC = (dyCCorner + wC) / strideWidth;\n                            if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                Math.floor(dyC) !== dyC) {\n                                continue;\n                            }\n                            const pixel = dyBuf.get(b, dyR, dyC, d);\n                            dotProd += pixel;\n                        }\n                    }\n                    dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const avgPoolGradConfig = {\n    kernelName: AvgPoolGrad,\n    backendName: 'cpu',\n    kernelFunc: avgPoolGrad\n};\n//# sourceMappingURL=AvgPoolGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul, buffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nexport function batchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b } = inputs;\n    const { transposeA, transposeB } = attrs;\n    assertNotComplex([a, b], 'matMul');\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n    util.assert(aRank >= 2 && bRank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` +\n        `same or at least one input batch dimension must be 1. Got input ` +\n        `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n    const outShapeOuterDims = batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n    const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n    const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const a3dValues = backend.data.get(a3d.dataId).values;\n    const b3dValues = backend.data.get(b3d.dataId).values;\n    const a3dStrides = util.computeStrides(a3d.shape);\n    const b3dStrides = util.computeStrides(b3d.shape);\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a3dStrides[0], 1, a3dStrides[1]] :\n        [a3dStrides[0], a3dStrides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b3dStrides[1], b3dStrides[0]] :\n        [b3dStrides[1], 1, b3dStrides[0]];\n    const size = leftDim * rightDim;\n    const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n    const resVals = result.values;\n    const blockSize = backend.blockSize;\n    for (let bi = 0; bi < batchDim; bi++) {\n        for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n            for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n                for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n                    // for when blockSize doesn't evenly divide the input\n                    const iBlock = Math.min(i0 + blockSize, leftDim);\n                    const jBlock = Math.min(j0 + blockSize, rightDim);\n                    const kBlock = Math.min(k0 + blockSize, sharedDim);\n                    for (let i = i0; i < iBlock; i++) {\n                        for (let j = j0; j < jBlock; j++) {\n                            let sum = 0.0;\n                            for (let k = k0; k < kBlock; k++) {\n                                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                                const aVal = a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                                const bVal = b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                                sum += aVal * bVal;\n                            }\n                            resVals[bi * size + (i * rightDim + j)] += sum;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    backend.disposeIntermediateTensorInfo(a3d);\n    backend.disposeIntermediateTensorInfo(b3d);\n    // set correct shape on output.\n    return backend.makeTensorInfo(outShape, result.dtype, result.values);\n}\nexport const batchMatMulConfig = {\n    kernelName: BatchMatMul,\n    backendName: 'cpu',\n    kernelFunc: batchMatMul,\n};\n//# sourceMappingURL=BatchMatMul.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormPackedProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = 'vec4(0.0)';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = 'vec4(1.0)';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function batchNorm(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, scale, offset, mean, variance } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const xVals = backend.data.get(x.dataId).values;\n    const mVals = backend.data.get(mean.dataId).values;\n    const varVals = backend.data.get(variance.dataId).values;\n    const sVals = scale ? backend.data.get(scale.dataId).values :\n        new Float32Array([1]);\n    const offVals = offset ?\n        backend.data.get(offset.dataId).values :\n        new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n        outVals[i] = offVals[offi++] +\n            (xVals[i] - mVals[mi++]) * sVals[si++] /\n                Math.sqrt(varVals[vi++] + varianceEpsilon);\n        if (offi >= offValsLength) {\n            offi = 0;\n        }\n        if (mi >= mValsLength) {\n            mi = 0;\n        }\n        if (si >= sValsLength) {\n            si = 0;\n        }\n        if (vi >= varValsLength) {\n            vi = 0;\n        }\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'cpu',\n    kernelFunc: batchNorm,\n};\n//# sourceMappingURL=BatchNorm.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        const uniformPart = `uniform int start[${this.rank}];`;\n        const sourceCoords = getCoords(this.rank);\n        let body;\n        const coordSum = destSize.map((_, i) => {\n            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n        });\n        body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n        this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    }\n    else if (rank <= 6) {\n        return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n    }\n    else {\n        throw Error(`Slicing for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=slice_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class SlicePackedProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        const coords = getChannels('coords', this.rank);\n        const sourceLoc = getChannels('sourceLoc', this.rank);\n        const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n        const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n        const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n        const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n        const sourceLocSetup = this.rank <= 4 ?\n            `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n            destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n                .join('\\n');\n        this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\n//# sourceMappingURL=slice_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    assertNotComplex([x], 'batchToSpaceND');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const xReshaped = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const xTransposed = transpose({ inputs: { x: xReshaped }, backend, attrs: { perm: permuted } });\n    const xTransposedReshaped = reshape({ inputs: { x: xTransposed }, backend, attrs: { shape: reshapedPermuted } });\n    const result = slice({\n        inputs: { x: xTransposedReshaped },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    backend.disposeIntermediateTensorInfo(xReshaped);\n    backend.disposeIntermediateTensorInfo(xTransposed);\n    backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n    return result;\n}\nexport const batchToSpaceNDConfig = {\n    kernelName: BatchToSpaceND,\n    backendName: 'cpu',\n    kernelFunc: batchToSpaceND\n};\n//# sourceMappingURL=BatchToSpaceND.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl } from './Bincount_impl';\nexport function bincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size } = attrs;\n    const xVals = backend.data.get(x.dataId).values;\n    const weightsVals = backend.data.get(weights.dataId).values;\n    const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\nexport const bincountConfig = {\n    kernelName: Bincount,\n    backendName: 'cpu',\n    kernelFunc: bincount\n};\n//# sourceMappingURL=Bincount.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n//# sourceMappingURL=NotEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnaryOpProgram } from '../unaryop_gpu';\nconst TO_INT = `return float(int(x));`;\nexport function int(input, backend) {\n    const program = new UnaryOpProgram(input.shape, TO_INT);\n    const output = backend.runWebGLProgram(program, [input], 'int32');\n    return { dataId: output.dataId, shape: output.shape, dtype: output.dtype };\n}\n//# sourceMappingURL=int.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n    }\n    getCustomSetupFunc(min, max) {\n        return (gpgpu, webGLProgram) => {\n            if (this.minLoc == null) {\n                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n            }\n            gpgpu.gl.uniform1f(this.minLoc, min);\n            gpgpu.gl.uniform1f(this.maxLoc, max);\n        };\n    }\n}\n//# sourceMappingURL=clip_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipPackedProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n    }\n    getCustomSetupFunc(min, max) {\n        return (gpgpu, webGLProgram) => {\n            if (this.minLoc == null) {\n                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n            }\n            gpgpu.gl.uniform1f(this.minLoc, min);\n            gpgpu.gl.uniform1f(this.maxLoc, max);\n        };\n    }\n}\n//# sourceMappingURL=clip_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue, env } from '@tensorflow/tfjs-core';\nimport { ClipProgram } from '../clip_gpu';\nimport { ClipPackedProgram } from '../clip_packed_gpu';\nexport function clipByValue(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { clipValueMin, clipValueMax } = attrs;\n    let program;\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n        program = new ClipPackedProgram(x.shape);\n    }\n    else {\n        program = new ClipProgram(x.shape);\n    }\n    const customSetup = program.getCustomSetupFunc(clipValueMin, clipValueMax);\n    return backend.runWebGLProgram(program, [x], x.dtype, customSetup);\n}\nexport const clipByValueConfig = {\n    kernelName: ClipByValue,\n    backendName: 'webgl',\n    kernelFunc: clipByValue\n};\n//# sourceMappingURL=ClipByValue.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ComplexAbsProgram {\n    constructor(shape) {\n        this.variableNames = ['real', 'imag'];\n        this.outputShape = shape;\n        this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n    }\n}\n//# sourceMappingURL=complex_abs_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs, util } from '@tensorflow/tfjs-core';\nexport const complexAbs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const complexVals = cpuBackend.data.get(x.dataId);\n    const real = complexVals.complexTensorInfos.real;\n    const imag = complexVals.complexTensorInfos.imag;\n    const realVals = cpuBackend.data.get(real.dataId).values;\n    const imagVals = cpuBackend.data.get(imag.dataId).values;\n    for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n    }\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'cpu',\n    kernelFunc: complexAbs,\n};\n//# sourceMappingURL=ComplexAbs.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n    constructor(shapes) {\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][1];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][1];\n        }\n        const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            snippets.push(`else if (yC < ${offsets[i]}) ` +\n                `setOutput(getT${i}(yR, yC-${shift}));`);\n        }\n        const lastIndex = offsets.length;\n        const lastShift = offsets[offsets.length - 1];\n        snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n    }\n}\n//# sourceMappingURL=concat_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n    constructor(shapes, axis) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, axis);\n        const shape = this.outputShape;\n        const rank = shape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][axis];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][axis];\n        }\n        const channel = channels[axis];\n        const lastChannels = channels.slice(-2);\n        const allChannels = channels.join();\n        let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            // Note: the >= comparison below may seem unnecessary given the check\n            // above but is needed to workaround branch execution issues on some\n            // devices. It makes all the conditions exclusive without relying on\n            // execution order.\n            getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n        }\n        const lastIndex = offsets.length;\n        const shift = offsets[offsets.length - 1];\n        getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n        this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n    }\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels, channel, shift) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n        if (idx === channelIdx) {\n            return `${c} - ${shift}`;\n        }\n        else {\n            return c;\n        }\n    });\n    return res.join();\n}\n//# sourceMappingURL=concat_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Imag } from '@tensorflow/tfjs-core';\nexport function imag(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n    const imagVal = backend.data.get(imag.dataId).values;\n    // When complex tensor is disposed, its underlying parts will be disposed too.\n    // Make new tensor out of the imag value of the complex. This makes sure the\n    // value is still accessible even if complex tensor is disposed.\n    return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\nexport const imagConfig = {\n    kernelName: Imag,\n    backendName: 'cpu',\n    kernelFunc: imag\n};\n//# sourceMappingURL=Imag.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    const shapes = $inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    if ($inputs[0].dtype === 'complex64') {\n        const reals = $inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = $inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concat({ inputs: reals, backend, attrs: { axis: $axis } });\n        const imagConcated = concat({ inputs: imags, backend, attrs: { axis: $axis } });\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const inputs2D = $inputs.map(t => {\n        const innerSize = util.sizeFromShape(t.shape.slice($axis));\n        const shape = [-1, innerSize];\n        return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n    });\n    const inputsValShapes = inputs2D.map(t => {\n        return { vals: backend.data.get(t.dataId).values, shape: t.shape };\n    });\n    // Concats 2d tensors along axis=1.\n    outShape =\n        backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = inputs2D[0].shape[0] === 1;\n    const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n    inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'cpu',\n    kernelFunc: concat\n};\n//# sourceMappingURL=Concat.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivationWeights) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivationWeights) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\nexport class Conv3DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nexport class Im2ColPackedProgram {\n    constructor(outputShape, inputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        const { filterWidth, inChannels, strideWidth, strideHeight, padInfo, outWidth, dilationWidth, dilationHeight, dataFormat } = convInfo;\n        const { left, top } = padInfo;\n        const itemsPerBlockRow = inChannels * filterWidth;\n        const glsl = getGlslDifferences();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 0 : 1;\n        const colDim = isChannelsLast ? 1 : 2;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=im2col_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { Im2ColPackedProgram } from '../im2col_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\nimport { batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD } from './BatchMatMul_impl';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = backend.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n    let out;\n    const intermediates = [];\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n    if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n        !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n        !reshapeWillBeExpensive) {\n        const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n            xShape[0] * xShape[2] * xShape[3];\n        const xReshaped = reshape({\n            inputs: { x },\n            backend,\n            attrs: { shape: [1, targetShape, convInfo.inChannels] }\n        });\n        const filterReshaped = reshape({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        const result = batchMatMulImpl({\n            a: xReshaped,\n            b: filterReshaped,\n            transposeA,\n            transposeB,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        out = reshape({ inputs: { x: result }, backend, attrs: { shape: convInfo.outShape } });\n        intermediates.push(xReshaped);\n        intermediates.push(filterReshaped);\n        intermediates.push(result);\n    }\n    else {\n        // Following optimization is specific to packed |x| with odd row count\n        // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n        // we avoid expensive packed 2x2 reshape by padding row count to next,\n        // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n        // the same (has the same texture layout and and values in the texture) as\n        // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n        // even-rows tensor before the operation and, after the batchMatMul,\n        // fix the even-rows result to have odd number of rows.\n        const targetShape = isChannelsLast ?\n            xShape[0] * xShape[1] * (xShape[2] + 1) :\n            xShape[0] * xShape[2] * (xShape[3] + 1);\n        const xReshaped = {\n            dataId: x.dataId,\n            shape: [1, targetShape, convInfo.inChannels],\n            dtype: x.dtype\n        };\n        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n        // Decrementing row count, after batchMatMul->...->compileProgram leads to\n        // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n        // in compileProgram method, but that would affect compilation of all\n        // programs - instead, provide a copy here, with even row count, before\n        // calling batchMatMul->...->compileProgram and after that, the original\n        // xTexData.shape is restored.\n        const originalXTexDataShape = xTexData.shape;\n        xTexData.shape = xTexData.shape.slice();\n        xTexData.shape[xTexData.shape.length - 2]++;\n        util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n        const filterReshaped = reshape({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        intermediates.push(filterReshaped);\n        const pointwiseConv = batchMatMulImpl({\n            a: xReshaped,\n            b: filterReshaped,\n            backend,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n        util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n        // Restore the input shape to original.\n        xTexData.shape = originalXTexDataShape;\n        // Set the output shape - there is no need for expensive reshape as data\n        // layout is already correct.\n        pointwiseConvTexData.shape = convInfo.outShape;\n        out = identity({ inputs: { x: pointwiseConv }, backend });\n        out.shape = convInfo.outShape;\n        intermediates.push(pointwiseConv);\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n    const intermediates = [];\n    const xSqueezed = reshape({ inputs: { x }, backend, attrs: { shape: x.shape.slice(1) } });\n    const w2Row = reshape({\n        inputs: { x: filter },\n        backend,\n        attrs: { shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim] }\n    });\n    intermediates.push(xSqueezed);\n    intermediates.push(w2Row);\n    const im2ColProgram = new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32');\n    const im2ColReshaped = reshape({\n        inputs: { x: im2Col },\n        backend,\n        attrs: { shape: [1, x2ColShape[0], x2ColShape[1]] }\n    });\n    intermediates.push(im2Col);\n    intermediates.push(im2ColReshaped);\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(im2ColReshaped.shape, w2Row.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [im2ColReshaped, w2Row];\n    if (bias) {\n        inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n        inputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n    const outShape = isChannelsLast ?\n        [1, outHeight, outWidth, convInfo.outChannels] :\n        [1, convInfo.outChannels, outHeight, outWidth];\n    const out = reshape({ inputs: { x: product }, backend, attrs: { shape: outShape } });\n    intermediates.push(product);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n//# sourceMappingURL=Conv2D_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    assertNotComplex([x, filter], 'conv2d');\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const xBatchStride = xStrides[0];\n    const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n    const xColStride = isChannelsLast ? xStrides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xBatchStride;\n        const yOffset1 = b * yBatchStride;\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset2 = yOffset1 + yR * yRowStride;\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const xR = xRCorner + wR * dilationHeight;\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                    continue;\n                }\n                const wOffset1 = wR * filterStrides[0];\n                const xOffset2 = xOffset1 + xR * xRowStride;\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const yOffset3 = yOffset2 + yC * yColStride;\n                    const xCCorner = yC * convInfo.strideWidth - padLeft;\n                    for (let wC = 0; wC < filterWidth; ++wC) {\n                        const xC = xCCorner + wC * dilationWidth;\n                        if (xC < 0 || xC >= convInfo.inWidth) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wC * filterStrides[1];\n                        const xOffset3 = xOffset2 + xC * xColStride;\n                        let wOffset3 = wOffset2;\n                        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                            const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                yVals[yOffset3 + d2 * yChannelStride] +=\n                                    xVal * wVals[wOffset3 + d2];\n                            }\n                            wOffset3 += convInfo.outChannels;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'cpu',\n    kernelFunc: conv2D\n};\n//# sourceMappingURL=Conv2D.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = filterDepth - 1 - convInfo.padInfo.front;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_backprop_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;\n    assertNotComplex([x, dy], 'conv2dBackpropFilter');\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xVals = backend.data.get(x.dataId).values;\n    const dyVals = backend.data.get(dy.dataId).values;\n    const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n    const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n        for (let wC = 0; wC < filterWidth; ++wC) {\n            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    let dotProd = 0;\n                    for (let b = 0; b < convInfo.batchSize; ++b) {\n                        for (let yR = yRMin; yR < yRMax; ++yR) {\n                            const xR = wR + yR * strideHeight - topPad;\n                            for (let yC = yCMin; yC < yCMax; ++yC) {\n                                const xC = wC + yC * strideWidth - leftPad;\n                                if (isChannelsLast) {\n                                    dotProd += xBuf.get(b, xR, xC, d1) *\n                                        dyBuf.get(b, yR, yC, d2);\n                                }\n                                else {\n                                    dotProd += xBuf.get(b, d1, xR, xC) *\n                                        dyBuf.get(b, d2, yR, yC);\n                                }\n                            }\n                        }\n                    }\n                    dW.set(dotProd, wR, wC, d1, d2);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const conv2DBackpropFilterConfig = {\n    kernelName: Conv2DBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: conv2DBackpropFilter\n};\n//# sourceMappingURL=Conv2DBackpropFilter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    assertNotComplex([dy, filter], 'conv2dBackpropInput');\n    const filterStrides = util.computeStrides(filter.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    $dataFormat = convInfo.dataFormat;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const isChannelsLast = $dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dyStrides[0];\n    const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n    const yColStride = isChannelsLast ? dyStrides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let d2 = 0; d2 < outChannels; ++d2) {\n                                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                const weight = fltValues[fltOffset + d2];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    const dxOffset = xBatchStride * b + xRowStride * xR +\n                        xColStride * xC + xChannelStride * d1;\n                    dxValues[dxOffset] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv2DBackpropInputConfig = {\n    kernelName: Conv2DBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: conv2DBackpropInput\n};\n//# sourceMappingURL=Conv2DBackpropInput.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    assertNotComplex([x, filter], 'conv3d');\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n    const { filterDepth, filterHeight, filterWidth, dilationDepth, dilationHeight, dilationWidth, padInfo } = convInfo;\n    const padFront = padInfo.front;\n    const padLeft = padInfo.left;\n    const padTop = padInfo.top;\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xStrides[0];\n        const yOffset1 = b * y.strides[0];\n        for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n            const yOffset2 = yOffset1 + yF * y.strides[1];\n            const xFCorner = yF * convInfo.strideDepth - padFront;\n            for (let wF = 0; wF < filterDepth; ++wF) {\n                const xF = xFCorner + wF * dilationDepth;\n                if (xF < 0 || xF >= convInfo.inDepth) {\n                    continue;\n                }\n                const wOffset1 = wF * filterStrides[0];\n                const xOffset2 = xOffset1 + xF * xStrides[1];\n                for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                    const yOffset3 = yOffset2 + yR * y.strides[2];\n                    const xRCorner = yR * convInfo.strideHeight - padTop;\n                    for (let wR = 0; wR < filterHeight; ++wR) {\n                        const xR = xRCorner + wR * dilationHeight;\n                        if (xR < 0 || xR >= convInfo.inHeight) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wR * filterStrides[1];\n                        const xOffset3 = xOffset2 + xR * xStrides[2];\n                        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                            const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                            const xCCorner = yC * convInfo.strideWidth - padLeft;\n                            for (let wC = 0; wC < filterWidth; ++wC) {\n                                const xC = xCCorner + wC * dilationWidth;\n                                if (xC < 0 || xC >= convInfo.inWidth) {\n                                    continue;\n                                }\n                                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                let wOffset4 = wOffset3;\n                                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                    const xVal = xVals[xOffset4 + d1];\n                                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                        yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                    }\n                                    wOffset4 += convInfo.outChannels;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const conv3DConfig = {\n    kernelName: Conv3D,\n    backendName: 'cpu',\n    kernelFunc: conv3D\n};\n//# sourceMappingURL=Conv3D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropFilterV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, filterShape } = attrs;\n    assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n    const xStrides = util.computeStrides(x.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n    const xValues = backend.data.get(x.dataId).values;\n    const [xS0, xS1, xS2, xS3] = xStrides;\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    for (let wF = 0; wF < filterDepth; ++wF) {\n        const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n        const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n        const wOffset1 = wF * dwS0;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            const wOffset2 = wR * dwS1 + wOffset1;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                const wOffset3 = wC * dwS2 + wOffset2;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const wOffset4 = d1 * dwS3 + wOffset3;\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        let dotProd = 0;\n                        for (let b = 0; b < convInfo.batchSize; ++b) {\n                            const xOffset1 = b * xS0;\n                            const yOffset1 = b * dyS0;\n                            for (let yF = yFMin; yF < yFMax; ++yF) {\n                                const xF = wF + yF * strideDepth - frontPad;\n                                const xOffset2 = xF * xS1 + xOffset1;\n                                const yOffset2 = yF * dyS1 + yOffset1;\n                                for (let yR = yRMin; yR < yRMax; ++yR) {\n                                    const xR = wR + yR * strideHeight - topPad;\n                                    const xOffset3 = xR * xS2 + xOffset2;\n                                    const yOffset3 = yR * dyS2 + yOffset2;\n                                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                                        const xC = wC + yC * strideWidth - leftPad;\n                                        const xOffset4 = xC * xS3 + xOffset3;\n                                        const yOffset4 = yC * dyS3 + yOffset3;\n                                        dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                                    }\n                                }\n                            }\n                        }\n                        dwValues[wOffset4 + d2] = dotProd;\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\nexport const conv3DBackpropFilterV2Config = {\n    kernelName: Conv3DBackpropFilterV2,\n    backendName: 'cpu',\n    kernelFunc: conv3DBackpropFilterV2\n};\n//# sourceMappingURL=Conv3DBackpropFilterV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropInputV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { pad, strides, inputShape } = attrs;\n    assertNotComplex([dy], 'conv3dBackpropInputV2');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n    const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            // Frames of depth\n            for (let xF = 0; xF < inDepth; ++xF) {\n                const xFCorner = xF - frontPad;\n                const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                // Rows as per standard 2d matrix notation\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    // Columns as per standard 2d matrix notation\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yF = xFMin; yF < yFMax; ++yF) {\n                            const wF = yF * strideDepth - xFCorner;\n                            for (let yR = xRMin; yR < yRMax; ++yR) {\n                                const wR = yR * strideHeight - xRCorner;\n                                for (let yC = xCMin; yC < yCMax; ++yC) {\n                                    const wC = yC * strideWidth - xCCorner;\n                                    const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                        fltS1 * (filterHeight - 1 - wR) +\n                                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                                        const pixel = dyValues[dyOffset + d2];\n                                        const weight = fltValues[fltOffset + d2];\n                                        dotProd += pixel * weight;\n                                    }\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                            dotProd;\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv3DBackpropInputV2Config = {\n    kernelName: Conv3DBackpropInputV2,\n    backendName: 'cpu',\n    kernelFunc: conv3DBackpropInputV2\n};\n//# sourceMappingURL=Conv3DBackpropInputV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\nexport const cosConfig = {\n    kernelName: Cos,\n    backendName: 'cpu',\n    kernelFunc: cos,\n};\n//# sourceMappingURL=Cos.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\nexport const coshConfig = {\n    kernelName: Cosh,\n    backendName: 'cpu',\n    kernelFunc: cosh,\n};\n//# sourceMappingURL=Cosh.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class CropAndResizeProgram {\n    constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {\n        this.variableNames = ['Image', 'Boxes', 'BoxInd'];\n        this.outputShape = [];\n        const [batch, imageHeight, imageWidth, depth] = imageShape;\n        const [numBoxes,] = boxShape;\n        const [cropHeight, cropWidth] = cropSize;\n        this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n        const methodId = method === 'bilinear' ? 1 : 0;\n        const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n        const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n            [\n                `${(imageHeight - 1) / (cropHeight - 1)}`,\n                '(y2-y1) * height_ratio',\n                `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (y1+y2) * ${inputHeightFloat}`,\n            ];\n        const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n            [\n                `${(imageWidth - 1) / (cropWidth - 1)}`,\n                '(x2-x1) * width_ratio',\n                `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (x1+x2) * ${inputWidthFloat}`,\n            ];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n        this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=crop_and_resize_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n    const { inputs, backend, attrs } = args;\n    const { image, boxes, boxInd } = inputs;\n    const { cropSize, method, extrapolationValue } = attrs;\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const numBoxes = boxes.shape[0];\n    const [cropHeight, cropWidth] = cropSize;\n    const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n    const boxVals = backend.data.get(boxes.dataId).values;\n    const boxIndVals = backend.data.get(boxInd.dataId).values;\n    const imageVals = backend.data.get(image.dataId).values;\n    const inStride = util.computeStrides(image.shape); // to calculate flat indexes into image\n    const outStride = util.computeStrides(output.shape); // to calculate flat indexes into output\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n        const startInd = b * 4;\n        const y1 = boxVals[startInd];\n        const x1 = boxVals[startInd + 1];\n        const y2 = boxVals[startInd + 2];\n        const x2 = boxVals[startInd + 3];\n        const bInd = boxIndVals[b];\n        if (bInd >= batch) {\n            continue;\n        }\n        const heightScale = (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n        const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n        for (let y = 0; y < cropHeight; y++) {\n            const yInd = (cropHeight > 1) ?\n                y1 * (imageHeight - 1) + y * (heightScale) :\n                0.5 * (y1 + y2) * (imageHeight - 1);\n            if (yInd < 0 || yInd > imageHeight - 1) {\n                for (let x = 0; x < cropWidth; x++) {\n                    for (let c = 0; c < numChannels; c++) {\n                        const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = extrapolationValue;\n                    }\n                }\n                continue;\n            }\n            if (method === 'bilinear') {\n                const topInd = Math.floor(yInd);\n                const bottomInd = Math.ceil(yInd);\n                const yLerp = yInd - topInd;\n                for (let x = 0; x < cropWidth; x++) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const leftInd = Math.floor(xInd);\n                    const rightInd = Math.ceil(xInd);\n                    const xLerp = xInd - leftInd;\n                    for (let c = 0; c < numChannels; c++) {\n                        let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topRight = imageVals[ind];\n                        ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomRight = imageVals[ind];\n                        const top = topLeft + (topRight - topLeft) * xLerp;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                        ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = top + ((bottom - top) * yLerp);\n                    }\n                }\n            }\n            else { // method == \"nearest\"\n                for (let x = 0; x < cropWidth; ++x) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const closestX = Math.round(xInd);\n                    const closestY = Math.round(yInd);\n                    for (let c = 0; c < numChannels; c++) {\n                        const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                            bInd * inStride[0];\n                        const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[outInd] = imageVals[inInd];\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'cpu',\n    kernelFunc: cropAndResize\n};\n//# sourceMappingURL=CropAndResize.js.map","import { getCoordsDataType } from './shader_compiler';\nexport class CumSumProgram {\n    constructor(shape, exclusive, reverse) {\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        const rank = shape.length;\n        const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n        const length = shape[shape.length - 1];\n        let condition = '';\n        let idxString = '';\n        // When exclusive is set, the cumsum op becomes roll op that copies the\n        // value from the previous index based on the direction specified by the\n        // reverse flag.\n        if (exclusive) {\n            condition = reverse ? `end != ${length - 1}` : 'end != 0';\n            idxString = reverse ? 'end + 1' : 'end - 1';\n        }\n        else {\n            condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n            idxString = (reverse ? 'end + pow2' : 'end - pow2');\n        }\n        this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n    }\n    getCustomSetupFunc(index) {\n        return (gpgpu, webGLProgram) => {\n            if (this.index == null) {\n                this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n            }\n            gpgpu.gl.uniform1f(this.index, index);\n        };\n    }\n}\nfunction getCoords(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.x, ${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.x, ${name}.y, ${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\nfunction getFinalCoord(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=cumsum_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    assertNotComplex(x, 'cumsum');\n    const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n    let $x = x;\n    if (permutation != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n    if (permutedAxis !== $x.shape.length - 1) {\n        throw new Error(`backend.cumsum in CPU expects an inner-most ` +\n            `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n    }\n    const resultDtype = upcastType($x.dtype, 'int32');\n    const vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n    const aVals = backend.data.get($x.dataId).values;\n    const finalDim = $x.shape[$x.shape.length - 1];\n    const indexAdjuster = reverse ?\n        (i, j) => i + finalDim - j - 1 :\n        (i, j) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n        for (let j = 0; j < finalDim; j++) {\n            const idx = indexAdjuster(i, j);\n            if (j === 0) {\n                vals[idx] = exclusive ? 0 : aVals[idx];\n            }\n            else {\n                const prevIdx = indexAdjuster(i, j - 1);\n                vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                    aVals[idx] + vals[prevIdx];\n            }\n        }\n    }\n    const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo($x);\n        return reverseTransposedResult;\n    }\n    return result;\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'cpu',\n    kernelFunc: cumsum\n};\n//# sourceMappingURL=Cumsum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl, bincountReduceImpl } from './Bincount_impl';\nexport function denseBincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size, binaryOutput } = attrs;\n    if (x.shape.length === 1) {\n        const xVals = backend.data.get(x.dataId).values;\n        const weightsVals = backend.data.get(weights.dataId).values;\n        const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n        return backend.makeTensorInfo([size], weights.dtype, outVals);\n    }\n    else if (x.shape.length === 2) {\n        const xBuf = backend.bufferSync(x);\n        const weightsBuf = backend.bufferSync(weights);\n        const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n    }\n    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +\n        `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n    kernelName: DenseBincount,\n    backendName: 'cpu',\n    kernelFunc: denseBincount\n};\n//# sourceMappingURL=DenseBincount.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthToSpaceProgram {\n    constructor(outputShape, blockSize, dataFormat) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.blockSize = blockSize;\n        this.dataFormat = dataFormat;\n        this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n    }\n    getHeightCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[1]`;\n        }\n        else {\n            return `coords[2]`;\n        }\n    }\n    getWidthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[2]`;\n        }\n        else {\n            return `coords[3]`;\n        }\n    }\n    getDepthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[3]`;\n        }\n        else {\n            return `coords[1]`;\n        }\n    }\n    getOutputDepthSize() {\n        if (this.dataFormat === 'NHWC') {\n            return this.outputShape[3];\n        }\n        else {\n            return this.outputShape[1];\n        }\n    }\n    getInputSamplingString() {\n        if (this.dataFormat === 'NHWC') {\n            return `getX(b, in_h, in_w, in_d)`;\n        }\n        else {\n            return `getX(b, in_d, in_h, in_w)`;\n        }\n    }\n}\n//# sourceMappingURL=depth_to_space_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n    util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const xValues = backend.data.get(x.dataId).values;\n    const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let h = 0; h < outputHeight; ++h) {\n            const inH = Math.floor(h / blockSize);\n            const offsetH = (h % blockSize);\n            for (let w = 0; w < outputWidth; ++w) {\n                const inW = Math.floor(w / blockSize);\n                const offsetW = (w % blockSize);\n                const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                for (let d = 0; d < outputDepth; ++d) {\n                    const inD = d + offsetD;\n                    const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                    result[outputIdx++] = xValues[inputIdx];\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'cpu',\n    kernelFunc: depthToSpace\n};\n//# sourceMappingURL=DepthToSpace.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_gpu_depthwise.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class DepthwiseConvPacked2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `int xR; int xC; int xCOffset;`;\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n            }\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        for (let r = 0; r < filterHeight; r++) {\n            for (let texelC = 0; texelC < texelsAcross; texelC++) {\n                const c = texelC * 2;\n                mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n                if (strideWidth === 1) {\n                    if (c < filterWidth) {\n                        // If padding is odd, the outer texels have to be composed.\n                        if (padLeft % 2 === 1) {\n                            // TODO: Ensure vec4 previous does not result in redundant sample,\n                            // and avoid setting xTexelRC's that exceed the boundary in the\n                            // first place rather than resetting them to vec4(0)).\n                            // To compute xCOffset:\n                            // - If padding is odd, we must add 1 to ensure we ask for an\n                            // even-numbered row.\n                            // - We subtract 2 to access the previous texel.\n                            mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n                        }\n                        else {\n                            // Padding is even, so xRC corresponds to a single texel.\n                            mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n                        }\n                        if (c + 1 < filterWidth) {\n                            // If dilation is even, the second entry should match the first\n                            // (either both are composed or both are single samples). But if\n                            // dilation is odd, then the second entry should be the opposite\n                            // of the first (if the first is composed, the second is a single\n                            // sample, and vice versa.)\n                            const nextTexelOffset = padLeft % 2 === 0 ?\n                                util.nearestLargerEven(dilationWidth) :\n                                dilationWidth;\n                            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n                                // If dilation > 1 then the xRC's will not be able to share any\n                                // values, so each xRC will require two unique calls to getX.\n                                if (dilationWidth > 1) {\n                                    mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                                }\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n                            }\n                            else {\n                                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n                            }\n                        }\n                    }\n                }\n                else { // stride > 1\n                    if (c < filterWidth) {\n                        mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n                        // Depending on whether padLeft is even or odd, we want either the\n                        // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n                        // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n                        // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n                        // need to come from the xy channels of a new texel, hence the `vec4\n                        // final` initialized below.\n                        if (padLeft % 2 === 1) {\n                            mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n                            }\n                        }\n                        else {\n                            mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n                            }\n                        }\n                        mainLoop += `}`;\n                    }\n                }\n                if (c < filterWidth) {\n                    mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n                    if (c + 1 < filterWidth) {\n                        mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n                    }\n                }\n            }\n        }\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n            }\n        }\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_packed_gpu_depthwise.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    assertNotComplex([x, filter], 'depthwiseConv2DNative');\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const { filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo } = convInfo;\n    const padLeft = padInfo.left;\n    const padTop = padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xStrides[0];\n        const yOffset1 = b * y.strides[0];\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset2 = yOffset1 + yR * y.strides[1];\n            const xRCorner = yR * convInfo.strideHeight - padLeft;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const xR = xRCorner + wR * dilationHeight;\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                    continue;\n                }\n                const wOffset1 = wR * filterStrides[0];\n                const xOffset2 = xOffset1 + xR * xStrides[1];\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const yOffset3 = yOffset2 + yC * y.strides[2];\n                    const xCCorner = yC * convInfo.strideWidth - padTop;\n                    for (let wC = 0; wC < filterWidth; ++wC) {\n                        const xC = xCCorner + wC * dilationWidth;\n                        if (xC < 0 || xC >= convInfo.inWidth) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wC * filterStrides[1];\n                        const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                        let yOffset4 = yOffset3;\n                        let wOffset3 = wOffset2;\n                        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                            const xVal = xVals[xOffset3 + d1];\n                            for (let q = 0; q < chMul; ++q) {\n                                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                            }\n                            yOffset4 += chMul;\n                            wOffset3 += chMul;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNative\n};\n//# sourceMappingURL=DepthwiseConv2dNative.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class DepthwiseConv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_backprop_gpu_depthwise.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;\n    assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n    const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const xVals = backend.data.get(x.dataId).values;\n    const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n    const dyVals = backend.data.get(dy.dataId).values;\n    const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n        for (let wC = 0; wC < filterWidth; ++wC) {\n            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                const d1 = Math.trunc(d2 / chMul);\n                const dm = d2 % chMul;\n                let dotProd = 0;\n                for (let b = 0; b < convInfo.batchSize; ++b) {\n                    for (let yR = yRMin; yR < yRMax; ++yR) {\n                        const xR = wR + yR * strideHeight - topPad;\n                        for (let yC = yCMin; yC < yCMax; ++yC) {\n                            const xC = wC + yC * strideWidth - leftPad;\n                            dotProd += xBuf.get(b, xR, xC, d1) *\n                                dyBuf.get(b, yR, yC, d2);\n                        }\n                    }\n                }\n                dW.set(dotProd, wR, wC, d1, dm);\n            }\n        }\n    }\n    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropFilter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;\n    assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let dm = 0; dm < chMul; ++dm) {\n                                const d2 = d1 * chMul + dm;\n                                const pixel = dyValues[dyOffset + d2];\n                                const weight = fltValues[fltOffset + dm];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropInput.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DiagProgram {\n    constructor(size) {\n        this.variableNames = ['X'];\n        this.outputShape = [size, size];\n        this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=diag_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Diag, util } from '@tensorflow/tfjs-core';\nexport function diag(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const xSize = util.sizeFromShape(x.shape);\n    const xVals = backend.data.get(x.dataId).values;\n    const outBuf = buffer([xSize, xSize], x.dtype);\n    const vals = outBuf.values;\n    for (let i = 0; i < xVals.length; i++) {\n        vals[i * xSize + i] = xVals[i];\n    }\n    const outShape = [...x.shape, ...x.shape];\n    return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\nexport const diagConfig = {\n    kernelName: Diag,\n    backendName: 'cpu',\n    kernelFunc: diag\n};\n//# sourceMappingURL=Diag.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Dilation2DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const { inHeight, inWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth } = convInfo;\n        const { top: padTop, left: padLeft } = padInfo;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=dilation_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2dConfig = {\n    kernelName: Dilation2D,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const xVals = cpuBackend.data.get(x.dataId).values;\n        const xRank = x.shape.length;\n        const filterVals = cpuBackend.data.get(filter.dataId).values;\n        const filterRank = filter.shape.length;\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        const outSize = util.sizeFromShape(outShape);\n        const outRank = outShape.length;\n        const outputVals = util.getArrayFromDType(x.dtype, outSize);\n        // Upsampling the input by fill in `dilation size - 1` values between each\n        // input value.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                                        const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                                        const val = xVals[xIndex] + filterVals[filterIndex];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n                        outputVals[outputIndex] = curVal;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n        return { dataId, shape: outShape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Elu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const elu = unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\nexport const eluConfig = {\n    kernelName: Elu,\n    backendName: 'cpu',\n    kernelFunc: elu,\n};\n//# sourceMappingURL=Elu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function eluGrad(args) {\n    const { inputs, backend } = args;\n    const { dy, y } = inputs;\n    assertNotComplex([dy, y], 'eluGrad');\n    const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n    const values = backend.data.get(y.dataId).values;\n    const dyValues = backend.data.get(dy.dataId).values;\n    for (let i = 0; i < values.length; ++i) {\n        const v = values[i];\n        if (v >= 1) {\n            resultValues[i] = dyValues[i];\n        }\n        else {\n            resultValues[i] = dyValues[i] * (v + 1);\n        }\n    }\n    return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\nexport const eluGradConfig = {\n    kernelName: EluGrad,\n    backendName: 'cpu',\n    kernelFunc: eluGrad\n};\n//# sourceMappingURL=EluGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'cpu',\n    kernelFunc: equal\n};\n//# sourceMappingURL=Equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Erf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\nexport const erf = unaryKernelFunc(Erf, (xi) => {\n    const sign = Math.sign(xi);\n    const v = Math.abs(xi);\n    const t = 1.0 / (1.0 + p * v);\n    return sign *\n        (1.0 -\n            (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n                Math.exp(-v * v));\n});\nexport const erfConfig = {\n    kernelName: Erf,\n    backendName: 'cpu',\n    kernelFunc: erf,\n};\n//# sourceMappingURL=Erf.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n    const { inputs, backend, attrs } = args;\n    const { input } = inputs;\n    const { dim } = attrs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nexport const expandDimsConfig = {\n    kernelName: ExpandDims,\n    backendName: 'cpu',\n    kernelFunc: expandDims\n};\n//# sourceMappingURL=ExpandDims.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FFTProgram {\n    constructor(component, inputShape, inverse) {\n        this.variableNames = ['real', 'imag'];\n        const innerDim = inputShape[1];\n        this.outputShape = inputShape;\n        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n        const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n        let opString;\n        if (component === 'real') {\n            opString = 'return real * expR - imag * expI;';\n        }\n        else if (component === 'imag') {\n            opString = 'return real * expI + imag * expR;';\n        }\n        else {\n            throw new Error(`FFT component must be either \"real\" or \"imag\", got ${component}.`);\n        }\n        this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=fft_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n    const xData = backend.texData.get(x.dataId);\n    const inputSize = util.sizeFromShape(x.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = x.shape[x.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({ inputs: { x }, backend, attrs: { shape: [batch, innerDimensionSize] } });\n    const xShape = input2D.shape;\n    const realProgram = new FFTProgram('real', xShape, inverse);\n    const imagProgram = new FFTProgram('imag', xShape, inverse);\n    const inputs = [\n        {\n            dataId: xData.complexTensorInfos.real.dataId,\n            dtype: xData.complexTensorInfos.real.dtype,\n            shape: xShape\n        },\n        {\n            dataId: xData.complexTensorInfos.imag.dataId,\n            dtype: xData.complexTensorInfos.imag.dtype,\n            shape: xShape\n        }\n    ];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    const complexOutputReshaped = reshape({ inputs: { x: complexOutput }, backend, attrs: { shape: x.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(complexOutput);\n    return complexOutputReshaped;\n}\n//# sourceMappingURL=FFT_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function fft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputSize = util.sizeFromShape(input.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({\n        inputs: { x: input },\n        backend,\n        attrs: { shape: [batch, innerDimensionSize] }\n    });\n    const result = fftBatch(input2D, false, backend);\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: input.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const fftConfig = {\n    kernelName: FFT,\n    backendName: 'cpu',\n    kernelFunc: fft\n};\n//# sourceMappingURL=FFT.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FillProgram {\n    constructor(shape, value) {\n        this.outputShape = [];\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n    }\n    getCustomSetupFunc(value) {\n        return (gpgpu, webGLProgram) => {\n            if (this.valueLoc == null) {\n                this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n            }\n            gpgpu.gl.uniform1f(this.valueLoc, value);\n        };\n    }\n}\n//# sourceMappingURL=fill_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Fill, util } from '@tensorflow/tfjs-core';\nexport function fill(args) {\n    const { backend, attrs } = args;\n    const { shape, value, dtype } = attrs;\n    const $dtype = dtype || util.inferDtype(value);\n    const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n    fillValues(values, value, $dtype);\n    return backend.makeTensorInfo(shape, $dtype, values);\n}\nexport const fillConfig = {\n    kernelName: Fill,\n    backendName: 'cpu',\n    kernelFunc: fill\n};\nfunction fillValues(values, value, dtype) {\n    if (dtype === 'string') {\n        values.fill(value);\n    }\n    else {\n        values.fill(value);\n    }\n}\n//# sourceMappingURL=Fill.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n    kernelName: FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' &&\n        pixels instanceof ImageBitmap;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo || isImageBitmap) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = env().getBool('WEBGL_PACK') ?\n        new FromPixelsPackedProgram(outShape) :\n        new FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n//# sourceMappingURL=FromPixels.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FlipLeftRightProgram {\n    constructor(imageShape) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n//# sourceMappingURL=flip_left_right_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight, util } from '@tensorflow/tfjs-core';\nexport const flipLeftRightConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const coordX = Math.round(imageWidth - x);\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        let outputValue = imageVals[outIdx];\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=FlipLeftRight.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const floorDivImpl = createSimpleBinaryKernelImpl((a, b) => Math.floor(a / b));\nexport const floorDiv = binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\nexport const floorDivConfig = {\n    kernelName: FloorDiv,\n    backendName: 'cpu',\n    kernelFunc: floorDiv\n};\n//# sourceMappingURL=FloorDiv.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=from_pixels_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=from_pixels_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { conv2D } from './Conv2D';\nexport function fusedConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    let result = conv2D({\n        inputs: { x, filter },\n        backend,\n        attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }\n    });\n    if (bias) {\n        const resultOld = result;\n        result = add({ inputs: { a: result, b: bias }, backend });\n        backend.disposeIntermediateTensorInfo(resultOld);\n    }\n    if (activation) {\n        const resultOld = result;\n        result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n        backend.disposeIntermediateTensorInfo(resultOld);\n    }\n    return result;\n}\nexport const fusedConv2DConfig = {\n    kernelName: FusedConv2D,\n    backendName: 'cpu',\n    kernelFunc: fusedConv2D\n};\n//# sourceMappingURL=FusedConv2D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    let result = depthwiseConv2dNative({\n        inputs: { x, filter },\n        backend,\n        attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }\n    });\n    if (bias) {\n        const oldResult = result;\n        result = add({ inputs: { a: result, b: bias }, backend });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    if (activation) {\n        const oldResult = result;\n        result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'cpu',\n    kernelFunc: fusedDepthwiseConv2D\n};\n//# sourceMappingURL=FusedDepthwiseConv2D.js.map","import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n    constructor(sliceDim, strides, shape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=gather_nd_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, GatherNd, util } from '@tensorflow/tfjs-core';\nexport function gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const paramsSize = util.sizeFromShape(params.shape);\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n    if (numSlices === 0) {\n        return backend.makeTensorInfo(resultShape, params.dtype, []);\n    }\n    const outBuf = buffer([numSlices, sliceSize], params.dtype);\n    const indicesData = backend.data.get(indices.dataId).values;\n    const paramsData = backend.data.get(params.dataId).values;\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${params.shape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsData[flattenIndex * sliceSize + k];\n        }\n    }\n    return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'cpu',\n    kernelFunc: gatherNd\n};\n//# sourceMappingURL=GatherNd.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n    constructor(aShape, outputShape) {\n        this.variableNames = ['A', 'indices'];\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape, 2);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape, axis) {\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        if (i === 2) {\n            sourceCoords.push('int(getIndices(resRC.x, resRC.z))');\n        }\n        else {\n            sourceCoords.push(`${currentCoords[i]}`);\n        }\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=gather_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { gatherV2Impl } from './GatherV2_impl';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    assertNotComplex([x, indices], 'gatherV2');\n    let $batchDims = batchDims;\n    if (batchDims == null) {\n        $batchDims = 0;\n    }\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);\n    const flattenX = reshape({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(flattenIndex);\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'cpu',\n    kernelFunc: gatherV2\n};\n//# sourceMappingURL=GatherV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'cpu',\n    kernelFunc: greaterEqual\n};\n//# sourceMappingURL=GreaterEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function ifft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputSize = util.sizeFromShape(input.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({\n        inputs: { x: input },\n        backend,\n        attrs: { shape: [batch, innerDimensionSize] }\n    });\n    const result = fftBatch(input2D, true, backend);\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: input.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const ifftConfig = {\n    kernelName: IFFT,\n    backendName: 'cpu',\n    kernelFunc: ifft\n};\n//# sourceMappingURL=IFFT.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsFinite } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const isFinite = unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\nexport const isFiniteConfig = {\n    kernelName: IsFinite,\n    backendName: 'cpu',\n    kernelFunc: isFinite,\n};\n//# sourceMappingURL=IsFinite.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsInf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const isInf = unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\nexport const isInfConfig = {\n    kernelName: IsInf,\n    backendName: 'cpu',\n    kernelFunc: isInf,\n};\n//# sourceMappingURL=IsInf.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsNan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const isNaN = unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\nexport const isNaNConfig = {\n    kernelName: IsNan,\n    backendName: 'cpu',\n    kernelFunc: isNaN,\n};\n//# sourceMappingURL=IsNaN.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'cpu',\n    kernelFunc: lessEqual\n};\n//# sourceMappingURL=LessEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LinSpace } from '@tensorflow/tfjs-core';\nimport { linSpaceImpl } from './LinSpace_impl';\nexport function linSpace(args) {\n    const { backend, attrs } = args;\n    const { start, stop, num } = attrs;\n    const outVals = linSpaceImpl(start, stop, num);\n    return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\nexport const linSpaceConfig = {\n    kernelName: LinSpace,\n    backendName: 'cpu',\n    kernelFunc: linSpace\n};\n//# sourceMappingURL=LinSpace.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log1p } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\nexport const log1pConfig = {\n    kernelName: Log1p,\n    backendName: 'cpu',\n    kernelFunc: log1p,\n};\n//# sourceMappingURL=Log1p.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalAnd } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const logicalAndImpl = createSimpleBinaryKernelImpl((a, b) => a && b);\nexport const logicalAnd = binaryKernelFunc(LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\nexport const logicalAndConfig = {\n    kernelName: LogicalAnd,\n    backendName: 'cpu',\n    kernelFunc: logicalAnd\n};\n//# sourceMappingURL=LogicalAnd.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalNot } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const logicalNot = unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\nexport const logicalNotConfig = {\n    kernelName: LogicalNot,\n    backendName: 'cpu',\n    kernelFunc: logicalNot,\n};\n//# sourceMappingURL=LogicalNot.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalOr } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const logicalOrImpl = createSimpleBinaryKernelImpl((a, b) => a || b);\nexport const logicalOr = binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\nexport const logicalOrConfig = {\n    kernelName: LogicalOr,\n    backendName: 'cpu',\n    kernelFunc: logicalOr\n};\n//# sourceMappingURL=LogicalOr.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNPackedProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    assertNotComplex(x, 'LRN');\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = backend.data.get(x.dataId).values;\n    const size = util.sizeFromShape(x.shape);\n    const result = new Float32Array(size);\n    function sumAcrossChannels(offset) {\n        const currentChannel = offset % channels;\n        let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n        const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n        let sum = 0.0;\n        for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n            const z = xValues[beginSumOffset];\n            sum += z * z;\n        }\n        return sum;\n    }\n    for (let offset = 0; offset < size; offset++) {\n        const sum = sumAcrossChannels(offset);\n        const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n        result[offset] = val;\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\nexport const lRNConfig = {\n    kernelName: LRN,\n    backendName: 'cpu',\n    kernelFunc: lRN\n};\n//# sourceMappingURL=LRN.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNGradProgram {\n    constructor(inputShape, depthRadius, bias, alpha, beta) {\n        this.variableNames = ['inputImage', 'outputImage', 'dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        this.depth = inputShape[3];\n        this.depthRadius = depthRadius;\n        this.bias = bias;\n        this.alpha = alpha;\n        this.beta = beta;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_grad_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRNGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, y, dy } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    assertNotComplex(dy, 'LRNGrad');\n    const dySize = util.sizeFromShape(dy.shape);\n    const channels = dy.shape[3];\n    const dyValues = backend.data.get(dy.dataId).values;\n    const xValues = backend.data.get(x.dataId).values;\n    const yValues = backend.data.get(y.dataId).values;\n    const result = new Float32Array(dySize);\n    const size = dySize;\n    for (let offset = 0; offset < size; offset++) {\n        const currentChannel = offset % channels;\n        const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n        const depthEnd = (offset - currentChannel) +\n            Math.min(channels, currentChannel + depthRadius + 1);\n        let norm = 0;\n        for (let k = depthBegin; k < depthEnd; k++) {\n            norm += Math.pow(xValues[k], 2);\n        }\n        norm = alpha * norm + bias;\n        for (let k = depthBegin; k < depthEnd; k++) {\n            let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n            if (offset === k) {\n                dyi += Math.pow(norm, -beta);\n            }\n            dyi *= dyValues[offset];\n            result[k] += dyi;\n        }\n    }\n    return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\nexport const lRNGradConfig = {\n    kernelName: LRNGrad,\n    backendName: 'cpu',\n    kernelFunc: lRNGrad\n};\n//# sourceMappingURL=LRNGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport function max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const cpuBackend = backend;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values;\n    if (permutedAxes != null) {\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = xShape[permutedAxes[i]];\n        }\n        xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        xShape = newShape;\n    }\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // reshape\n        const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n        outShape = newShape;\n    }\n    return { dataId, shape: outShape, dtype: x.dtype };\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'cpu',\n    kernelFunc: max\n};\n//# sourceMappingURL=Max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    let res;\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        res = identity({ inputs: { x }, backend });\n    }\n    else {\n        const xValues = backend.data.get(x.dataId).values;\n        const strides = util.computeStrides(x.shape);\n        const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n    }\n    return res;\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'cpu',\n    kernelFunc: maxPool\n};\n//# sourceMappingURL=MaxPool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function maxPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    assertNotComplex(x, 'maxPool3d');\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);\n    const xValues = backend.data.get(x.dataId).values;\n    const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n    return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const maxPool3DConfig = {\n    kernelName: MaxPool3D,\n    backendName: 'cpu',\n    kernelFunc: maxPool3D\n};\n//# sourceMappingURL=MaxPool3D.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MaxPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class MaxPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=max_pool_backprop_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    assertNotComplex([dy, input], 'maxPool3DGrad');\n    const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const inputBuf = backend.bufferSync(input);\n    const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(input.shape, 'float32');\n    const dyBuf = backend.bufferSync(dy);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                    for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                        // Shader code begins\n                        const dyDepthCorner = dxDepth - padFront;\n                        const dyRowCorner = dxRow - padTop;\n                        const dyColCorner = dxCol - padLeft;\n                        let dotProd = 0;\n                        for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                            const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                            if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                Math.floor(dyDepth) !== dyDepth) {\n                                continue;\n                            }\n                            for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                    Math.floor(dyRow) !== dyRow) {\n                                    continue;\n                                }\n                                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                        Math.floor(dyCol) !== dyCol) {\n                                        continue;\n                                    }\n                                    const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                                        effectiveFilterWidth -\n                                        1 -\n                                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                        wRow * effectiveFilterWidth + wCol;\n                                    const mask = maxPos === curPos ? 1 : 0;\n                                    if (mask === 0) {\n                                        continue;\n                                    }\n                                    const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    dotProd += pixel * mask;\n                                }\n                            }\n                        }\n                        dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPool3DGrad\n};\n//# sourceMappingURL=MaxPool3DGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    assertNotComplex([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const xValues = backend.data.get(x.dataId).values;\n    const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(x.shape, 'float32');\n    const dyData = backend.data.get(dy.dataId).values;\n    const dyBuf = buffer(dy.shape, 'float32', dyData);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                    // Shader code begins.\n                    const dyRCorner = dxR - padTop;\n                    const dyCCorner = dxC - padLeft;\n                    let dotProd = 0;\n                    for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                        const dyR = (dyRCorner + wR) / strideHeight;\n                        if (dyR < 0 || dyR >= convInfo.outHeight ||\n                            Math.floor(dyR) !== dyR) {\n                            continue;\n                        }\n                        for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                            const dyC = (dyCCorner + wC) / strideWidth;\n                            if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                Math.floor(dyC) !== dyC) {\n                                continue;\n                            }\n                            const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                                maxPosBuf.get(b, dyR, dyC, d);\n                            const curPos = wR * effectiveFilterWidth + wC;\n                            const mask = maxPos === curPos ? 1 : 0;\n                            if (mask === 0) {\n                                continue;\n                            }\n                            const pixel = dyBuf.get(b, dyR, dyC, d);\n                            dotProd += pixel * mask;\n                        }\n                    }\n                    dx.set(dotProd, b, dxR, dxC, d);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPoolGradConfig = {\n    kernelName: MaxPoolGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPoolGrad\n};\n//# sourceMappingURL=MaxPoolGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'MaxPoolWithArgmax');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n        const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n        const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n        const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n        return [\n            { dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype },\n            { dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32' }\n        ];\n    }\n};\n//# sourceMappingURL=MaxPoolWithArgmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { maxPoolPositions, pool } from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(xValues, xShape, dtype, includeBatchInIndex, convInfo) {\n    const strides = util.computeStrides(xShape);\n    const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n    const maxPositions = maxPoolPositions(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n    return [maxPools.values, maxPositions.values];\n}\n//# sourceMappingURL=MaxPoolWithArgmax_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const toDispose = [];\n    const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n    toDispose.push(reduceSizeScalar);\n    const $x = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n    toDispose.push($x);\n    const res = div({ inputs: { a: $x, b: reduceSizeScalar }, backend });\n    toDispose.push(res);\n    const result = sum({ inputs: { x: res }, backend, attrs: { axis, keepDims } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'cpu',\n    kernelFunc: mean\n};\n//# sourceMappingURL=Mean.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernels/Reshape';\nexport function meanImpl(x, reduceShape, outShape, backend) {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });\n    const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n    const reshapedOutput = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    return reshapedOutput;\n}\n//# sourceMappingURL=Mean_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function min(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'min');\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let min = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value < min) {\n                min = value;\n            }\n        }\n        vals[i] = min;\n    }\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo($x);\n    }\n    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n    if (keepDims) {\n        const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        const reshapedResult = reshape({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });\n        backend.disposeIntermediateTensorInfo(result);\n        return reshapedResult;\n    }\n    return result;\n}\nexport const minConfig = {\n    kernelName: Min,\n    backendName: 'cpu',\n    kernelFunc: min\n};\n//# sourceMappingURL=Min.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class MirrorPadProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        const offset = mode === 'reflect' ? 0 : 1;\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mirror_pad_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const offset = mode === 'reflect' ? 0 : 1;\n        let mainLoop = '';\n        if (rank === 1) {\n            const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        else {\n            const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n        }\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mirror_pad_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function mirrorPad(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, mode } = attrs;\n    assertNotComplex(x, 'mirrorPad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const end = paddings.map((p, i) => p[0] + x.shape[i]);\n    const offset = mode === 'reflect' ? 0 : 1;\n    const xVals = backend.data.get(x.dataId).values;\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    for (let i = 0; i < resultSize; i++) {\n        let coords = util.indexToLoc(i, resultRank, resultStrides);\n        for (let i = 0; i < resultRank; i++) {\n            if (coords[i] < start[i]) {\n                coords[i] = start[i] * 2 - coords[i] - offset;\n            }\n            else if (coords[i] >= end[i]) {\n                coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n            }\n        }\n        coords = coords.map((c, i) => c - start[i]);\n        const inIndex = util.locToIndex(coords, xRank, xStrides);\n        resVals[i] = xVals[inIndex];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const mirrorPadConfig = {\n    kernelName: MirrorPad,\n    backendName: 'cpu',\n    kernelFunc: mirrorPad\n};\n//# sourceMappingURL=MirrorPad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const modImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => {\n    const rem = aValue % bValue;\n    if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n    }\n    else {\n        return (rem + bValue) % bValue;\n    }\n}));\nexport const mod = binaryKernelFunc(Mod, modImpl);\nexport const modConfig = {\n    kernelName: Mod,\n    backendName: 'cpu',\n    kernelFunc: mod\n};\n//# sourceMappingURL=Mod.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MultinomialProgram {\n    constructor(batchSize, numOutcomes, numSamples) {\n        this.variableNames = ['probs'];\n        this.outputShape = [batchSize, numSamples];\n        this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n    }\n    getCustomSetupFunc(seed) {\n        return (gpgpu, webGLProgram) => {\n            if (this.seedLoc == null) {\n                this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n            }\n            gpgpu.gl.uniform1f(this.seedLoc, seed);\n        };\n    }\n}\n//# sourceMappingURL=multinomial_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const realDivImpl = createSimpleBinaryKernelImpl((a, b) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\nexport const realDivConfig = {\n    kernelName: RealDiv,\n    backendName: 'cpu',\n    kernelFunc: div\n};\n//# sourceMappingURL=RealDiv.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { div } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { dim } = attrs;\n    const logitsRank = logits.shape.length;\n    let $dim = dim;\n    if ($dim === -1) {\n        $dim = logitsRank - 1;\n    }\n    if ($dim !== logitsRank - 1) {\n        throw Error('Softmax along a non-last dimension is not yet supported. ' +\n            `Logits was rank ${logitsRank} and dim was ${$dim}`);\n    }\n    const axes = util.parseAxisParam([$dim], logits.shape);\n    const maxLogit = max({\n        inputs: { x: logits },\n        backend,\n        attrs: { reductionIndices: axes, keepDims: false }\n    });\n    const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const maxLogitReshaped = reshape({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });\n    const a = sub({ inputs: { a: logits, b: maxLogitReshaped }, backend });\n    const b = exp({ inputs: { x: a }, backend });\n    const sumExp = sum({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });\n    const sumReshaped = reshape({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });\n    const result = div({ inputs: { a: b, b: sumReshaped }, backend });\n    backend.disposeIntermediateTensorInfo(maxLogit);\n    backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n    backend.disposeIntermediateTensorInfo(a);\n    backend.disposeIntermediateTensorInfo(b);\n    backend.disposeIntermediateTensorInfo(sumExp);\n    backend.disposeIntermediateTensorInfo(sumReshaped);\n    return result;\n}\nexport const softmaxConfig = {\n    kernelName: Softmax,\n    backendName: 'cpu',\n    kernelFunc: softmax\n};\n//# sourceMappingURL=Softmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    assertNotComplex(logits, 'multinomial');\n    const probabilities = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: -1 } });\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const probVals = backend.data.get(probabilities.dataId).values;\n    const resShape = [batchSize, numSamples];\n    const resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n    for (let b = 0; b < batchSize; ++b) {\n        const offset = b * numEvents;\n        // The cdf won't include the last event. It will be implicit if no other\n        // event happened.\n        const cdf = new Float32Array(numEvents - 1);\n        cdf[0] = probVals[offset];\n        for (let event = 1; event < cdf.length; ++event) {\n            cdf[event] = cdf[event - 1] + probVals[offset + event];\n        }\n        const random = seedrandom.alea(seed.toString());\n        const outOffset = b * numSamples;\n        for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n            const r = random();\n            // Assume last event happened by default.\n            resVals[outOffset + sampleId] = cdf.length;\n            for (let event = 0; event < cdf.length; event++) {\n                if (r < cdf[event]) {\n                    resVals[outOffset + sampleId] = event;\n                    break;\n                }\n            }\n        }\n    }\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probabilities);\n    }\n    return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'cpu',\n    kernelFunc: multinomial\n};\n//# sourceMappingURL=Multinomial.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV3(args) {\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n    assertNotComplex(boxes, 'NonMaxSuppression');\n    const boxesVals = backend.data.get(boxes.dataId).values;\n    const scoresVals = backend.data.get(scores.dataId).values;\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nexport const nonMaxSuppressionV3Config = {\n    kernelName: NonMaxSuppressionV3,\n    backendName: 'cpu',\n    kernelFunc: nonMaxSuppressionV3\n};\n//# sourceMappingURL=NonMaxSuppressionV3.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV4(args) {\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n    assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n    const boxesVals = backend.data.get(boxes.dataId).values;\n    const scoresVals = backend.data.get(scores.dataId).values;\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n    ];\n}\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'cpu',\n    kernelFunc: nonMaxSuppressionV4\n};\n//# sourceMappingURL=NonMaxSuppressionV4.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV5(args) {\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n    assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n    const boxesVals = backend.data.get(boxes.dataId).values;\n    const scoresVals = backend.data.get(scores.dataId).values;\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))\n    ];\n}\nexport const nonMaxSuppressionV5Config = {\n    kernelName: NonMaxSuppressionV5,\n    backendName: 'cpu',\n    kernelFunc: nonMaxSuppressionV5\n};\n//# sourceMappingURL=NonMaxSuppressionV5.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class OneHotProgram {\n    constructor(numIndices, depth, onValue, offValue) {\n        this.variableNames = ['indices'];\n        this.outputShape = [numIndices, depth];\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=onehot_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function oneHot(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { depth, onValue, offValue } = attrs;\n    assertNotComplex(indices, 'oneHot');\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const res = new Float32Array(indicesSize * depth);\n    res.fill(offValue);\n    const indicesVal = backend.data.get(indices.dataId).values;\n    for (let event = 0; event < indicesSize; ++event) {\n        if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n            res[event * depth + indicesVal[event]] = onValue;\n        }\n    }\n    return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\nexport const oneHotConfig = {\n    kernelName: OneHot,\n    backendName: 'cpu',\n    kernelFunc: oneHot\n};\n//# sourceMappingURL=OneHot.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('zerosLike is not supported for string tensors');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = zerosLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({ backend, attrs: { shape: x.shape, value: 0, dtype: x.dtype } });\n    }\n}\nexport const zerosLikeConfig = {\n    kernelName: ZerosLike,\n    backendName: 'cpu',\n    kernelFunc: zerosLike\n};\n//# sourceMappingURL=ZerosLike.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported for string tensors');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = onesLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({ backend, attrs: { shape: x.shape, value: 1, dtype: x.dtype } });\n    }\n}\nexport const onesLikeConfig = {\n    kernelName: OnesLike,\n    backendName: 'cpu',\n    kernelFunc: onesLike\n};\n//# sourceMappingURL=OnesLike.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    if (inputs.length === 1) {\n        return expandDims({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });\n    }\n    const shape = inputs[0].shape;\n    const dtype = inputs[0].dtype;\n    inputs.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const intermediateTensorInfos = [];\n    const expandedTensors = inputs.map(t => {\n        const expandedT = expandDims({ inputs: { input: t }, backend, attrs: { dim: axis } });\n        intermediateTensorInfos.push(expandedT);\n        return expandedT;\n    });\n    const result = concat({ inputs: expandedTensors, backend, attrs: { axis } });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const packConfig = {\n    kernelName: Pack,\n    backendName: 'cpu',\n    kernelFunc: pack\n};\n//# sourceMappingURL=Pack.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadPackedProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const componentSetup = [\n            `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n            rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n            rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n        ];\n        const paddingArea = rank === 1 ?\n            'rc < start || rc >= end' :\n            'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n        let mainLoop = '';\n        for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n            mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        mainLoop += (rank === 1 ? `} ` : `}}`);\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    assertNotComplex(x, 'pad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xVals = backend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    if (constantValue !== 0) {\n        resVals.fill(constantValue);\n    }\n    for (let i = 0; i < xSize; i++) {\n        const coords = util.indexToLoc(i, xRank, xStrides);\n        const outCoords = coords.map((c, i) => c + start[i]);\n        const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n        resVals[outIndex] = xVals[i];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'cpu',\n    kernelFunc: padV2\n};\n//# sourceMappingURL=PadV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const powImpl = createSimpleBinaryKernelImpl((a, b) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\nexport const powConfig = {\n    kernelName: Pow,\n    backendName: 'cpu',\n    kernelFunc: pow\n};\n//# sourceMappingURL=Pow.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Range } from '@tensorflow/tfjs-core';\nimport { rangeImpl } from './Range_impl';\nexport function range(args) {\n    const { backend, attrs } = args;\n    const { start, stop, dtype, step } = attrs;\n    const values = rangeImpl(start, stop, step, dtype);\n    return backend.makeTensorInfo([values.length], dtype, values);\n}\nexport const rangeConfig = {\n    kernelName: Range,\n    backendName: 'cpu',\n    kernelFunc: range\n};\n//# sourceMappingURL=Range.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reciprocal } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\nexport const reciprocalConfig = {\n    kernelName: Reciprocal,\n    backendName: 'cpu',\n    kernelFunc: reciprocal,\n};\n//# sourceMappingURL=Reciprocal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\nexport const reluConfig = {\n    kernelName: Relu,\n    backendName: 'cpu',\n    kernelFunc: relu,\n};\n//# sourceMappingURL=Relu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu6 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const relu6 = unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\nexport const relu6Config = {\n    kernelName: Relu6,\n    backendName: 'cpu',\n    kernelFunc: relu6,\n};\n//# sourceMappingURL=Relu6.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    ` - vec2(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n                `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeBilinear(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    assertNotComplex(images, 'resizeBilinear');\n    const imagesStrides = util.computeStrides(images.shape);\n    const [newHeight, newWidth] = size;\n    const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n    const xValues = backend.data.get(images.dataId).values;\n    const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n    const effectiveInputSize = [\n        (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n        (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutputSize = [\n        (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n        (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n        for (let r = 0; r < newHeight; r++) {\n            let sourceFracRow;\n            if (halfPixelCenters) {\n                sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n            }\n            else {\n                sourceFracRow = effectiveRowSizeRatio * r;\n            }\n            const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n            const rowFrac = sourceFracRow - sourceRowFloor;\n            const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n            const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n            const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n            for (let c = 0; c < newWidth; c++) {\n                let sourceFracCol;\n                if (halfPixelCenters) {\n                    sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n                }\n                else {\n                    sourceFracCol = effectiveColSizeRatio * c;\n                }\n                const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n                const colFrac = sourceFracCol - sourceColFloor;\n                const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n                const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n                const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n                const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n                const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n                for (let d = 0; d < numChannels; d++) {\n                    // Begin shader.\n                    // Compute the fractional index of the source.\n                    const topLeft = xValues[topLeftOffest + d];\n                    const bottomLeft = xValues[botLeftOffset + d];\n                    const topRight = xValues[topRightOffset + d];\n                    const bottomRight = xValues[botRightOffest + d];\n                    const top = topLeft + (topRight - topLeft) * colFrac;\n                    const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n                    const newValue = top + (bottom - top) * rowFrac;\n                    result[outputIdx++] = newValue;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], 'float32', result);\n}\nexport const resizeBilinearConfig = {\n    kernelName: ResizeBilinear,\n    backendName: 'cpu',\n    kernelFunc: resizeBilinear\n};\n//# sourceMappingURL=ResizeBilinear.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_backprop_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinearGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeBilinearGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    assertNotComplex([dy, images], 'resizeBilinearGrad');\n    const imagesStrides = util.computeStrides(images.shape);\n    const [batch, xHeight, xWidth, depth] = images.shape;\n    const [, yHeight, yWidth] = dy.shape;\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n    const effectiveXSize = [\n        (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n        (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n    const effectiveYSize = [\n        (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n        (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n    const dyValues = backend.data.get(dy.dataId).values;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n        const bOffset = b * imagesStrides[0];\n        for (let r = 0; r < yHeight; r++) {\n            const dxR = r * heightScale;\n            const topDxRIndex = Math.floor(dxR);\n            const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n            const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n            const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n            const dxRLerp = dxR - topDxRIndex;\n            const inverseDxRLerp = 1.0 - dxRLerp;\n            for (let c = 0; c < yWidth; c++) {\n                const dxC = c * widthScale;\n                const leftDxCIndex = Math.floor(dxC);\n                const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n                const dxCLerp = dxC - leftDxCIndex;\n                const inverseDxCLerp = 1.0 - dxCLerp;\n                const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n                const topRightRCOffset = topDxROffset + rightDxCIndex * imagesStrides[2];\n                const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * imagesStrides[2];\n                const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * imagesStrides[2];\n                const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n                const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n                const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n                const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n                for (let d = 0; d < depth; d++) {\n                    const dyVal = dyValues[offset++];\n                    output[topLeftRCOffset + d] +=\n                        dyVal * inverseDxRLerpTimesInverseDxCLerp;\n                    output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n                    output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n                    output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batch, xWidth, xHeight, depth], 'float32', output);\n}\nexport const resizeBilinearGradConfig = {\n    kernelName: ResizeBilinearGrad,\n    backendName: 'cpu',\n    kernelFunc: resizeBilinearGrad\n};\n//# sourceMappingURL=ResizeBilinearGrad.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    `, vec2(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_nearest_neighbor_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighbor, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeNearestNeighbor(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    assertNotComplex(images, 'resizeNearestNeighbor');\n    const imagesStrides = util.computeStrides(images.shape);\n    const [newHeight, newWidth] = size;\n    const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n    const xValues = backend.data.get(images.dataId).values;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n    const effectiveInputSize = [\n        (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n        (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutputSize = [\n        (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n        (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n        const batchOffset = b * imagesStrides[0];\n        for (let r = 0; r < newHeight; r++) {\n            const sourceFracRow = halfPixelCenters ?\n                effectiveRowSizeRatio * (r + 0.5) :\n                effectiveRowSizeRatio * r;\n            let sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n            if (halfPixelCenters) {\n                sourceNearestRow = Math.max(0, sourceNearestRow);\n            }\n            const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n            for (let c = 0; c < newWidth; c++) {\n                const sourceFracCol = halfPixelCenters ?\n                    effectiveColSizeRatio * (c + 0.5) :\n                    effectiveColSizeRatio * c;\n                let sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                    Math.floor(sourceFracCol));\n                if (halfPixelCenters) {\n                    sourceNearestCol = Math.max(0, sourceNearestCol);\n                }\n                const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n                for (let d = 0; d < numChannels; d++) {\n                    // Begin shader.\n                    // Compute the fractional index of the source.\n                    const newVal = xValues[colOffset + d];\n                    output[outputOffset++] = newVal;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\nexport const resizeNearestNeighborConfig = {\n    kernelName: ResizeNearestNeighbor,\n    backendName: 'cpu',\n    kernelFunc: resizeNearestNeighbor\n};\n//# sourceMappingURL=ResizeNearestNeighbor.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeigborBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_nearest_neighbor_backprop_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeNearestNeighborGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n    const imagesStrides = util.computeStrides(images.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    const [batch, xHeight, xWidth, depth] = images.shape;\n    const [, yHeight, yWidth] = dy.shape;\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = backend.data.get(dy.dataId).values;\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n    const effectiveXSize = [\n        (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n        (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n    const effectiveYSize = [\n        (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n        (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n        const batchOffset = b * imagesStrides[0];\n        for (let r = 0; r < xHeight; r++) {\n            const rowOffset = batchOffset + r * imagesStrides[1];\n            // Compute bounds for where in dy we will look\n            const startRLerp = Math.floor(r * invHeightScale);\n            const startDyR = Math.floor(startRLerp - (winHeight / 2));\n            for (let c = 0; c < xWidth; c++) {\n                const colOffset = rowOffset + c * imagesStrides[2];\n                // Compute bounds for where in dy we will look\n                const startCLerp = Math.floor(c * invWidthScale);\n                const startDyC = Math.floor(startCLerp - (winWidth / 2));\n                for (let d = 0; d < depth; d++) {\n                    let accum = 0;\n                    // loop over dy\n                    for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n                        const dyR = dyRIndex + startDyR;\n                        // Guard against the window exceeding the bounds of dy\n                        if (dyR < 0 || dyR >= yHeight) {\n                            continue;\n                        }\n                        const dyROffset = batchOffset + dyR * dyStrides[1];\n                        const sourceFracRow = dyR * heightScale;\n                        const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                            Math.floor(sourceFracRow));\n                        if (r !== sourceNearestRow) {\n                            continue;\n                        }\n                        for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                            const dyC = dyCIndex + startDyC;\n                            // Guard against the window exceeding the bounds of dy\n                            if (dyC < 0 || dyC >= yWidth) {\n                                continue;\n                            }\n                            const dyCOffset = dyROffset + dyC * dyStrides[2];\n                            const sourceFracCol = dyC * widthScale;\n                            const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                                Math.floor(sourceFracCol));\n                            if (c === sourceNearestCol) {\n                                accum += dyValues[dyCOffset + d];\n                            }\n                        }\n                    }\n                    output[colOffset + d] = accum;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\nexport const resizeNearestNeighborGradConfig = {\n    kernelName: ResizeNearestNeighborGrad,\n    backendName: 'cpu',\n    kernelFunc: resizeNearestNeighborGrad\n};\n//# sourceMappingURL=ResizeNearestNeighborGrad.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReverseProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        if (rank === 1) {\n            this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n            return;\n        }\n        const getInCoord = (i) => {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - coords[${i}] - 1`;\n            }\n            return `coords[${i}]`;\n        };\n        const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n        const type = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reverse_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        const channels = getChannels('rc', rank);\n        const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n        const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n        const type = getCoordsDataType(rank);\n        if (rank === 1) {\n            this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n        }\n        else {\n            this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n        }\n        function getR(channels) {\n            return getChannel(channels);\n        }\n        function getG(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getB(channels) {\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getA(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getChannel(channels) {\n            const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n            const inCoords = inCoordsArray.join(',');\n            const innerDims = inCoordsArray.slice(-2).join(',');\n            return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n        }\n        function getInCoord(i, channels1) {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - ${channels1[i]} - 1`;\n            }\n            else {\n                return `${channels1[i]}`;\n            }\n        }\n    }\n}\n//# sourceMappingURL=reverse_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    assertNotComplex(x, 'reverse');\n    const xRank = x.shape.length;\n    const $dims = util.parseAxisParam(dims, x.shape);\n    if (xRank === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const outBuf = new TensorBuffer(x.shape, x.dtype);\n    const xBuf = backend.bufferSync(x);\n    for (let i = 0; i < outBuf.size; i++) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.slice();\n        $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n        outBuf.set(xBuf.get(...inLoc), ...outLoc);\n    }\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'cpu',\n    kernelFunc: reverse\n};\n//# sourceMappingURL=Reverse.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class RotateProgram {\n    constructor(imageShape, radians, fillValue, center) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageHeight = imageShape[1];\n        const imageWidth = imageShape[2];\n        const sinFactor = Math.sin(radians).toFixed(3);\n        const cosFactor = Math.cos(radians).toFixed(3);\n        this.outputShape = imageShape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const centerXString = centerX.toFixed(3);\n        const centerYString = centerY.toFixed(3);\n        let fillSnippet = '';\n        if (typeof fillValue === 'number') {\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n        }\n        else {\n            fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n        }\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n//# sourceMappingURL=rotate_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const fullOpacityValue = 255;\n        const sinFactor = Math.sin(radians);\n        const cosFactor = Math.cos(radians);\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const y = coords[1];\n                        // coordX/coordY are the result of rotating and translating x/y.\n                        let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n                        let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n                        coordX = Math.round(coordX + centerX);\n                        coordY = Math.round(coordY + centerY);\n                        let outputValue = fillValue;\n                        if (typeof fillValue !== 'number') {\n                            if (channel === 3) {\n                                outputValue = fullOpacityValue;\n                            }\n                            else {\n                                outputValue = fillValue[channel];\n                            }\n                        }\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                            coordY < imageHeight) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedRowOffset = coordY * (imageWidth * numChannels);\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=RotateWithOffset.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const round = unaryKernelFunc(Round, (xi) => {\n    // The algorithm is based on banker's rounding.\n    const base = Math.floor(xi);\n    if (xi - base < 0.5) {\n        return Math.floor(xi);\n    }\n    else if (xi - base > 0.5) {\n        return Math.ceil(xi);\n    }\n    else {\n        if (base % 2.0 === 0.0) {\n            return base;\n        }\n        else {\n            return base + 1.0;\n        }\n    }\n});\nexport const roundConfig = {\n    kernelName: Round,\n    backendName: 'cpu',\n    kernelFunc: round,\n};\n//# sourceMappingURL=Round.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        let indicesString = '';\n        if (indicesRank === 1) {\n            indicesString = 'i';\n        }\n        else if (indicesRank === 2) {\n            indicesString = 'i, j';\n        }\n        const indicesSnippet = `getIndices(${indicesString})`;\n        let updatesString = '';\n        if (updatesRank === 1) {\n            updatesString = 'i';\n        }\n        else if (updatesRank === 2) {\n            updatesString = 'i, coords[1]';\n        }\n        const updatesSnippet = `getUpdates(${updatesString})`;\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=scatter_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const sumDupeIndices = true;\n    const indicesBuf = backend.bufferSync(indices);\n    const updatesBuf = backend.bufferSync(updates);\n    const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n    return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'cpu',\n    kernelFunc: scatterNd\n};\n//# sourceMappingURL=ScatterNd.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n    constructor(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        let cCoords;\n        let abCoords;\n        if (rank > 4) {\n            throw Error(`Where for rank ${rank} is not yet supported`);\n        }\n        if (rank === 1) {\n            abCoords = `resRC`;\n            cCoords = `resRC`;\n        }\n        else {\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            const cCoordVars = [];\n            const abCoordVars = [];\n            for (let i = 0; i < shape.length; i++) {\n                abCoordVars.push(`${currentCoords[i]}`);\n                if (i < cRank) {\n                    cCoordVars.push(`${currentCoords[i]}`);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        const dtype = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=select_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n    const { inputs, backend } = args;\n    const { condition, t, e } = inputs;\n    assertNotComplex([condition, t, e], 'select');\n    const conditionRank = condition.shape.length;\n    const values = backend.data.get(condition.dataId).values;\n    const tValues = backend.data.get(t.dataId).values;\n    const eValues = backend.data.get(e.dataId).values;\n    const resultDtype = upcastType(t.dtype, e.dtype);\n    const newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n    let index = 0;\n    const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n        1 :\n        util.sizeFromShape(t.shape.slice(1));\n    for (let i = 0; i < values.length; i++) {\n        for (let j = 0; j < offset; j++) {\n            if (values[i] === 1) {\n                newValues[index++] = tValues[i];\n            }\n            else {\n                newValues[index++] = eValues[i];\n            }\n        }\n    }\n    return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport const selectConfig = {\n    kernelName: Select,\n    backendName: 'cpu',\n    kernelFunc: select\n};\n//# sourceMappingURL=Select.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Selu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n    if (xi >= 0) {\n        return scale * xi;\n    }\n    else {\n        return scaleAlpha * (Math.exp(xi) - 1);\n    }\n});\nexport const seluConfig = {\n    kernelName: Selu,\n    backendName: 'cpu',\n    kernelFunc: selu,\n};\n//# sourceMappingURL=Selu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sigmoid = unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoidConfig = {\n    kernelName: Sigmoid,\n    backendName: 'cpu',\n    kernelFunc: sigmoid,\n};\n//# sourceMappingURL=Sigmoid.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sign } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n    if (xi < 0) {\n        return -1;\n    }\n    else if (xi > 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n});\nexport const signConfig = {\n    kernelName: Sign,\n    backendName: 'cpu',\n    kernelFunc: sign,\n};\n//# sourceMappingURL=Sign.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\nexport const sinConfig = {\n    kernelName: Sin,\n    backendName: 'cpu',\n    kernelFunc: sin,\n};\n//# sourceMappingURL=Sin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\nexport const sinhConfig = {\n    kernelName: Sinh,\n    backendName: 'cpu',\n    kernelFunc: sinh,\n};\n//# sourceMappingURL=Sinh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n    // Value above which exp(x) may overflow, but softplus(x) == x\n    // is within machine epsilon.\n    const tooLarge = xi > -threshold;\n    // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n    // is within machine epsilon.\n    const tooSmall = xi < threshold;\n    const expX = Math.exp(xi);\n    let result;\n    if (tooSmall) {\n        result = expX;\n    }\n    else if (tooLarge) {\n        result = xi;\n    }\n    else {\n        result = Math.log(1.0 + expX);\n    }\n    return result;\n});\nexport const softplusConfig = {\n    kernelName: Softplus,\n    backendName: 'cpu',\n    kernelFunc: softplus,\n};\n//# sourceMappingURL=Softplus.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function spaceToBatchND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    assertNotComplex([x], 'spaceToBatchND');\n    const prod = util.sizeFromShape(blockShape);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const paddedX = padV2Config.kernelFunc({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapeInputs = { x: paddedX };\n    const reshapeAttrs = { shape: reshapedPaddedShape };\n    const paddedXReshaped = reshape({ inputs: reshapeInputs, backend, attrs: reshapeAttrs });\n    const transposeInputs = { x: paddedXReshaped };\n    const transposeAttrs = { perm: permutedReshapedPaddedPermutation };\n    const paddedXT = transpose({ inputs: transposeInputs, backend, attrs: transposeAttrs });\n    const resultReshapeInputs = { x: paddedXT };\n    const resultReshapeAttrs = { shape: flattenShape };\n    const result = reshape({ inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs });\n    backend.disposeIntermediateTensorInfo(paddedX);\n    backend.disposeIntermediateTensorInfo(paddedXReshaped);\n    backend.disposeIntermediateTensorInfo(paddedXT);\n    return result;\n}\nexport const spaceToBatchNDConfig = {\n    kernelName: SpaceToBatchND,\n    backendName: 'cpu',\n    kernelFunc: spaceToBatchND\n};\n//# sourceMappingURL=SpaceToBatchND.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n    const outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nexport const sparseToDenseConfig = {\n    kernelName: SparseToDense,\n    backendName: 'cpu',\n    kernelFunc: sparseToDense\n};\n//# sourceMappingURL=SparseToDense.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { numOrSizeSplits, axis } = attrs;\n    const $axis = util.parseAxisParam(axis, x.shape)[0];\n    const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    const begin = new Array(x.shape.length).fill(0);\n    const size = x.shape.slice();\n    return splitSizes.map(s => {\n        const sliceSize = [...size];\n        sliceSize[$axis] = s;\n        const sliceT = slice({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });\n        begin[$axis] += s;\n        return sliceT;\n    });\n}\nexport const splitVConfig = {\n    kernelName: SplitV,\n    backendName: 'cpu',\n    kernelFunc: splitV\n};\n//# sourceMappingURL=SplitV.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\nexport const sqrtConfig = {\n    kernelName: Sqrt,\n    backendName: 'cpu',\n    kernelFunc: sqrt,\n};\n//# sourceMappingURL=Sqrt.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport const squareConfig = {\n    kernelName: Square,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend }) => {\n        const { x } = inputs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'square');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = value * value;\n        }\n        const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n        return { dataId, shape: x.shape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Square.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n//# sourceMappingURL=SquaredDifference.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n    const stepAttrs = attrs;\n    if (isNaN(xi)) {\n        return NaN;\n    }\n    else {\n        return xi > 0 ? 1 : stepAttrs.alpha;\n    }\n});\nexport const stepConfig = {\n    kernelName: Step,\n    backendName: 'cpu',\n    kernelFunc: step,\n};\n//# sourceMappingURL=Step.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n    constructor(begin, strides, size) {\n        this.variableNames = ['x'];\n        this.outputShape = size;\n        const rank = size.length;\n        const inputDtype = getCoordsDataType(size.length);\n        const dtype = getCoordsDataType(size.length);\n        let newCoords = '';\n        if (rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            let outputAxis = 0;\n            newCoords =\n                size.map((_, i) => {\n                    outputAxis++;\n                    return size.length === 1 ?\n                        `coords * strides[${i}] + begin[${i}]` :\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n                })\n                    .join(',');\n        }\n        this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=strided_slice_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    assertNotComplex(x, 'stridedSlice');\n    const { nonStrided, $begin, $strides, size, newShape, outShape } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    const $x = reshape({ inputs: { x }, backend, attrs: { shape: newShape } });\n    let result;\n    if (nonStrided) {\n        const sliced = slice({ inputs: { x: $x }, backend, attrs: { begin: $begin, size } });\n        result = reshape({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else if (outShape.some(axis => axis === 0)) {\n        result = backend.makeTensorInfo(outShape, x.dtype, []);\n    }\n    else {\n        const xBuf = backend.bufferSync($x);\n        const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n        result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo($x);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'cpu',\n    kernelFunc: stridedSlice\n};\n//# sourceMappingURL=StridedSlice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\nexport const tanConfig = {\n    kernelName: Tan,\n    backendName: 'cpu',\n    kernelFunc: tan,\n};\n//# sourceMappingURL=Tan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\nexport const tanhConfig = {\n    kernelName: Tanh,\n    backendName: 'cpu',\n    kernelFunc: tanh,\n};\n//# sourceMappingURL=Tanh.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n    constructor(aShape, reps) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape) {\n    const rank = aShape.length;\n    if (rank > 5) {\n        throw Error(`Tile for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `imod(resRC, ${aShape[0]})`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=tile_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { tileImpl } from './Tile_impl';\nexport function tile(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reps } = attrs;\n    assertNotComplex(x, 'tile');\n    const outBuf = tileImpl(backend.bufferSync(x), reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const tileConfig = {\n    kernelName: Tile,\n    backendName: 'cpu',\n    kernelFunc: tile\n};\n//# sourceMappingURL=Tile.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { topKImpl } from './TopK_impl';\nexport function topK(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { k, sorted } = attrs;\n    assertNotComplex(x, 'topk');\n    const xVals = backend.data.get(x.dataId).values;\n    const [allTopKVals, allTopKIndices] = topKImpl(xVals, x.shape, x.dtype, k, sorted);\n    return [\n        backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n        backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n}\nexport const topKConfig = {\n    kernelName: TopK,\n    backendName: 'cpu',\n    kernelFunc: topK\n};\n//# sourceMappingURL=TopK.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { uniqueImpl } from './Unique_impl';\nexport function unique(args) {\n    const { inputs, attrs, backend } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    assertNotComplex(x, 'unique');\n    const values = backend.data.get(x.dataId).values;\n    const { outputValues, outputShape, indices } = uniqueImpl(values, axis, x.shape, x.dtype);\n    return [\n        backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n        backend.makeTensorInfo([indices.length], 'int32', indices),\n    ];\n}\nexport const uniqueConfig = {\n    kernelName: Unique,\n    backendName: 'cpu',\n    kernelFunc: unique,\n};\n//# sourceMappingURL=Unique.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n    const { inputs, backend, attrs } = args;\n    const { value } = inputs;\n    let { axis } = attrs;\n    if (axis < 0) {\n        axis += value.shape.length;\n    }\n    const valueRank = value.shape.length;\n    const num = value.shape[axis];\n    const outShape = new Array(valueRank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < valueRank; i++) {\n        if (i !== axis) {\n            outShape[outIndex++] = value.shape[i];\n        }\n    }\n    const begin = new Array(valueRank).fill(0);\n    const size = value.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n        begin[axis] = i;\n        const tempRes = slice({ inputs: { x: value }, backend, attrs: { begin, size } });\n        res[i] = reshape({ inputs: { x: tempRes }, backend, attrs: { shape: outShape } });\n        backend.disposeIntermediateTensorInfo(tempRes);\n    }\n    return res;\n}\nexport const unpackConfig = {\n    kernelName: Unpack,\n    backendName: 'cpu',\n    kernelFunc: unpack\n};\n//# sourceMappingURL=Unpack.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class SegmentOpProgram {\n    constructor(segOpInfo, segOpType) {\n        this.variableNames = ['x', 'segmentIds'];\n        const windowSize = segOpInfo.windowSize;\n        const batchSize = segOpInfo.batchSize;\n        const inSize = segOpInfo.inSize;\n        const numSegments = segOpInfo.numSegments;\n        const outSize = numSegments * Math.ceil(inSize / windowSize);\n        this.outputShape = [batchSize, outSize];\n        const initializationValue = '0.0';\n        const returnValue = `sumValue`;\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n        let checkValueOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        let checkSegmentIdOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n//# sourceMappingURL=segment_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { _fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { acosConfig } from './kernels/Acos';\nimport { acoshConfig } from './kernels/Acosh';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { allConfig } from './kernels/All';\nimport { anyConfig } from './kernels/Any';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { argMinConfig } from './kernels/ArgMin';\nimport { asinConfig } from './kernels/Asin';\nimport { asinhConfig } from './kernels/Asinh';\nimport { atanConfig } from './kernels/Atan';\nimport { atan2Config } from './kernels/Atan2';\nimport { atanhConfig } from './kernels/Atanh';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { avgPool3DConfig } from './kernels/AvgPool3D';\nimport { avgPool3DGradConfig } from './kernels/AvgPool3DGrad';\nimport { avgPoolGradConfig } from './kernels/AvgPoolGrad';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { batchNormConfig } from './kernels/BatchNorm';\nimport { batchToSpaceNDConfig } from './kernels/BatchToSpaceND';\nimport { bincountConfig } from './kernels/Bincount';\nimport { castConfig } from './kernels/Cast';\nimport { ceilConfig } from './kernels/Ceil';\nimport { clipConfig } from './kernels/Clip';\nimport { complexConfig } from './kernels/Complex';\nimport { complexAbsConfig } from './kernels/ComplexAbs';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropFilterConfig } from './kernels/Conv2DBackpropFilter';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { conv3DConfig } from './kernels/Conv3D';\nimport { conv3DBackpropFilterV2Config } from './kernels/Conv3DBackpropFilterV2';\nimport { conv3DBackpropInputV2Config } from './kernels/Conv3DBackpropInputV2';\nimport { cosConfig } from './kernels/Cos';\nimport { coshConfig } from './kernels/Cosh';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { denseBincountConfig } from './kernels/DenseBincount';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { depthwiseConv2dNativeBackpropFilterConfig } from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport { depthwiseConv2dNativeBackpropInputConfig } from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport { diagConfig } from './kernels/Diag';\nimport { dilation2dConfig } from './kernels/Dilation2D';\nimport { dilation2dBackpropFilterConfig } from './kernels/Dilation2DBackpropFilter';\nimport { dilation2dBackpropInputConfig } from './kernels/Dilation2DBackpropInput';\nimport { eluConfig } from './kernels/Elu';\nimport { eluGradConfig } from './kernels/EluGrad';\nimport { equalConfig } from './kernels/Equal';\nimport { erfConfig } from './kernels/Erf';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { expm1Config } from './kernels/Expm1';\nimport { fftConfig } from './kernels/FFT';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { ifftConfig } from './kernels/IFFT';\nimport { imagConfig } from './kernels/Imag';\nimport { isFiniteConfig } from './kernels/IsFinite';\nimport { isInfConfig } from './kernels/IsInf';\nimport { isNaNConfig } from './kernels/IsNaN';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { linSpaceConfig } from './kernels/LinSpace';\nimport { logConfig } from './kernels/Log';\nimport { log1pConfig } from './kernels/Log1p';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { logicalNotConfig } from './kernels/LogicalNot';\nimport { logicalOrConfig } from './kernels/LogicalOr';\nimport { lRNConfig } from './kernels/LRN';\nimport { lRNGradConfig } from './kernels/LRNGrad';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { maxPool3DConfig } from './kernels/MaxPool3D';\nimport { maxPool3DGradConfig } from './kernels/MaxPool3DGrad';\nimport { maxPoolGradConfig } from './kernels/MaxPoolGrad';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { mirrorPadConfig } from './kernels/MirrorPad';\nimport { modConfig } from './kernels/Mod';\nimport { multinomialConfig } from './kernels/Multinomial';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { rangeConfig } from './kernels/Range';\nimport { realConfig } from './kernels/Real';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reciprocalConfig } from './kernels/Reciprocal';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { resizeBilinearGradConfig } from './kernels/ResizeBilinearGrad';\nimport { resizeNearestNeighborConfig } from './kernels/ResizeNearestNeighbor';\nimport { resizeNearestNeighborGradConfig } from './kernels/ResizeNearestNeighborGrad';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { selectConfig } from './kernels/Select';\nimport { seluConfig } from './kernels/Selu';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { signConfig } from './kernels/Sign';\nimport { sinConfig } from './kernels/Sin';\nimport { sinhConfig } from './kernels/Sinh';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { softplusConfig } from './kernels/Softplus';\nimport { spaceToBatchNDConfig } from './kernels/SpaceToBatchND';\nimport { sparseToDenseConfig } from './kernels/SparseToDense';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanConfig } from './kernels/Tan';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transposeConfig } from './kernels/Transpose';\nimport { uniqueConfig } from './kernels/Unique';\nimport { unpackConfig } from './kernels/Unpack';\nimport { unsortedSegmentSumConfig } from './kernels/UnsortedSegmentSum';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [\n    _fusedMatMulConfig,\n    absConfig,\n    acosConfig,\n    acoshConfig,\n    addConfig,\n    addNConfig,\n    allConfig,\n    anyConfig,\n    argMaxConfig,\n    argMinConfig,\n    asinConfig,\n    asinhConfig,\n    atanConfig,\n    atan2Config,\n    atanhConfig,\n    avgPoolConfig,\n    avgPool3DConfig,\n    avgPool3DGradConfig,\n    avgPoolGradConfig,\n    batchMatMulConfig,\n    batchNormConfig,\n    batchToSpaceNDConfig,\n    bincountConfig,\n    castConfig,\n    ceilConfig,\n    clipConfig,\n    complexConfig,\n    complexAbsConfig,\n    concatConfig,\n    conv2DBackpropFilterConfig,\n    conv2DBackpropInputConfig,\n    conv2DConfig,\n    conv3DBackpropFilterV2Config,\n    conv3DBackpropInputV2Config,\n    conv3DConfig,\n    cosConfig,\n    coshConfig,\n    cropAndResizeConfig,\n    cumsumConfig,\n    denseBincountConfig,\n    depthToSpaceConfig,\n    depthwiseConv2dNativeConfig,\n    depthwiseConv2dNativeBackpropFilterConfig,\n    depthwiseConv2dNativeBackpropInputConfig,\n    diagConfig,\n    dilation2dConfig,\n    dilation2dBackpropInputConfig,\n    dilation2dBackpropFilterConfig,\n    realDivConfig,\n    eluConfig,\n    eluGradConfig,\n    equalConfig,\n    erfConfig,\n    expConfig,\n    expandDimsConfig,\n    expm1Config,\n    fftConfig,\n    fillConfig,\n    flipLeftRightConfig,\n    floorConfig,\n    floorDivConfig,\n    fusedConv2DConfig,\n    fusedDepthwiseConv2DConfig,\n    gatherNdConfig,\n    gatherV2Config,\n    greaterConfig,\n    greaterEqualConfig,\n    identityConfig,\n    ifftConfig,\n    imagConfig,\n    isFiniteConfig,\n    isInfConfig,\n    isNaNConfig,\n    leakyReluConfig,\n    lessConfig,\n    lessEqualConfig,\n    linSpaceConfig,\n    logConfig,\n    log1pConfig,\n    logicalAndConfig,\n    logicalNotConfig,\n    logicalOrConfig,\n    lRNConfig,\n    lRNGradConfig,\n    maximumConfig,\n    maxPoolConfig,\n    maxPool3DConfig,\n    maxPool3DGradConfig,\n    maxPoolGradConfig,\n    maxPoolWithArgmaxConfig,\n    maxConfig,\n    meanConfig,\n    minConfig,\n    minimumConfig,\n    mirrorPadConfig,\n    modConfig,\n    multinomialConfig,\n    multiplyConfig,\n    negConfig,\n    nonMaxSuppressionV3Config,\n    nonMaxSuppressionV4Config,\n    nonMaxSuppressionV5Config,\n    notEqualConfig,\n    oneHotConfig,\n    onesLikeConfig,\n    packConfig,\n    padV2Config,\n    powConfig,\n    preluConfig,\n    prodConfig,\n    rangeConfig,\n    realConfig,\n    reciprocalConfig,\n    reluConfig,\n    relu6Config,\n    reshapeConfig,\n    resizeBilinearConfig,\n    resizeBilinearGradConfig,\n    resizeNearestNeighborConfig,\n    resizeNearestNeighborGradConfig,\n    reverseConfig,\n    rotateWithOffsetConfig,\n    roundConfig,\n    rsqrtConfig,\n    scatterNdConfig,\n    selectConfig,\n    seluConfig,\n    sigmoidConfig,\n    signConfig,\n    sinConfig,\n    sinhConfig,\n    sliceConfig,\n    softmaxConfig,\n    softplusConfig,\n    spaceToBatchNDConfig,\n    sparseToDenseConfig,\n    splitVConfig,\n    sqrtConfig,\n    squareConfig,\n    squaredDifferenceConfig,\n    stepConfig,\n    stridedSliceConfig,\n    subConfig,\n    sumConfig,\n    tanConfig,\n    tanhConfig,\n    tileConfig,\n    topKConfig,\n    transposeConfig,\n    uniqueConfig,\n    unpackConfig,\n    unsortedSegmentSumConfig,\n    zerosLikeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    registerKernel(kernelConfig);\n}\n//# sourceMappingURL=register_all_kernels.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from './Cast';\nimport { equal } from './Equal';\nimport { expandDims } from './ExpandDims';\nimport { multiply } from './Multiply';\nimport { pack } from './Pack';\nimport { sum } from './Sum';\nexport function unsortedSegmentSum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, segmentIds } = inputs;\n    const { numSegments } = attrs;\n    assertNotComplex(x, 'unsortedSegmentSum');\n    const xRank = x.shape.length;\n    const segmentIdsRank = segmentIds.shape.length;\n    const res = [];\n    const intermediates = [];\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = xRank - segmentIdsRank;\n    let $segmentIds = segmentIds;\n    for (let i = 0; i < numIters; ++i) {\n        const expanded = expandDims({ inputs: { input: $segmentIds }, backend, attrs: { dim: i + 1 } });\n        $segmentIds = expanded;\n        intermediates.push(expanded);\n    }\n    for (let i = 0; i < numSegments; ++i) {\n        const scalarValue = util.createScalarValue(i, 'int32');\n        const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n        const mask = equal({ inputs: { a: segmentId, b: $segmentIds }, backend });\n        const maskCasted = cast({ inputs: { x: mask }, backend, attrs: { dtype: 'float32' } });\n        const mul = multiply({ inputs: { a: maskCasted, b: x }, backend });\n        const sumTensorInfo = sum({ inputs: { x: mul }, backend, attrs: { axis: 0, keepDims: false } });\n        res.push(sumTensorInfo);\n        intermediates.push(segmentId);\n        intermediates.push(mask);\n        intermediates.push(maskCasted);\n        intermediates.push(mul);\n        intermediates.push(sumTensorInfo);\n    }\n    const result = pack({ inputs: res, backend, attrs: { axis: 0 } });\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const unsortedSegmentSumConfig = {\n    kernelName: UnsortedSegmentSum,\n    backendName: 'cpu',\n    kernelFunc: unsortedSegmentSum\n};\n//# sourceMappingURL=UnsortedSegmentSum.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, util } from '@tensorflow/tfjs-core';\nconst whereImpl = kernel_impls.whereImpl;\nimport { assertNotComplex } from './cpu_util';\nexport class MathBackendCPU extends KernelBackend {\n    constructor() {\n        super();\n        this.blockSize = 48;\n        this.firstUse = true;\n        this.data = new DataStorage(this, engine());\n    }\n    write(values, shape, dtype) {\n        if (this.firstUse) {\n            this.firstUse = false;\n            if (env().get('IS_NODE')) {\n                backend_util.warn('\\n============================\\n' +\n                    'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n                    'Node.js. To speed things up dramatically, install our node ' +\n                    'backend, which binds to TensorFlow C++, by running ' +\n                    'npm i @tensorflow/tfjs-node, ' +\n                    'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n                    'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n                    'suffix for CUDA) at the start of your program. ' +\n                    'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n                    '\\n============================');\n            }\n        }\n        const dataId = {};\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n        return dataId;\n    }\n    /**\n     * Create a data bucket in cpu backend.\n     * @param shape Shape of the `TensorInfo`.\n     * @param dtype DType of the `TensorInfo`.\n     * @param values The value of the `TensorInfo` stored as a flattened array.\n     */\n    makeTensorInfo(shape, dtype, values) {\n        let outId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            outId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            outId = this.write(values, shape, dtype);\n        }\n        return { dataId: outId, shape, dtype };\n    }\n    /** Increase refCount of a `TensorData`. */\n    incRef(dataId) {\n        const tensorData = this.data.get(dataId);\n        tensorData.refCount++;\n    }\n    /** Decrease refCount of a `TensorData`. */\n    decRef(dataId) {\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype) {\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n    }\n    numDataIds() {\n        return this.data.numDataIds();\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { dtype, complexTensorInfos } = this.data.get(dataId);\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        return this.data.get(dataId).values;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    makeOutput(values, shape, dtype) {\n        const dataId = this.write(values, shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    disposeData(dataId) {\n        if (this.data.has(dataId)) {\n            const { complexTensorInfos } = this.data.get(dataId);\n            if (complexTensorInfos != null) {\n                this.disposeData(complexTensorInfos.real.dataId);\n                this.disposeData(complexTensorInfos.imag.dataId);\n            }\n            this.data.delete(dataId);\n        }\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        const dataId = tensorInfo.dataId;\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n            if (tensorData.refCount < 1) {\n                this.disposeData(dataId);\n            }\n        }\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    memory() {\n        return {\n            // Unreliable due to automatic gc. The numbers above are cumulative.\n            unreliable: true,\n            reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +\n                    'collection, the true allocated memory may be less.']\n        };\n    }\n    where(condition) {\n        assertNotComplex([condition], 'where');\n        const condVals = this.readSync(condition.dataId);\n        return whereImpl(condition.shape, condVals);\n    }\n    dispose() { }\n    floatPrecision() {\n        return 32;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return super.epsilon();\n    }\n}\n//# sourceMappingURL=backend_cpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { elu } from '../kernels/Elu';\nimport { identity } from '../kernels/Identity';\nimport { leakyRelu } from '../kernels/LeakyRelu';\nimport { prelu } from '../kernels/Prelu';\nimport { relu } from '../kernels/Relu';\nimport { relu6 } from '../kernels/Relu6';\nexport function applyActivation(backend, x, activation, preluActivationWeights, leakyreluAlpha) {\n    if (activation === 'linear') {\n        return identity({ inputs: { x }, backend });\n    }\n    else if (activation === 'relu') {\n        return relu({ inputs: { x }, backend });\n    }\n    else if (activation === 'elu') {\n        return elu({ inputs: { x }, backend });\n    }\n    else if (activation === 'relu6') {\n        return relu6({ inputs: { x }, backend });\n    }\n    else if (activation === 'prelu') {\n        return prelu({ inputs: { x, alpha: preluActivationWeights }, backend });\n    }\n    else if (activation === 'leakyrelu') {\n        return leakyRelu({ inputs: { x }, backend, attrs: { alpha: leakyreluAlpha } });\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);\n}\n//# sourceMappingURL=fused_utils.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function pool(xValues, xShape, dtype, strides, convInfo, poolType) {\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n        Number.POSITIVE_INFINITY);\n    const output = buffer(convInfo.outShape, dtype);\n    const outputVals = output.values;\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n    const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n    const outputColStrides = convInfo.outShape[3];\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const outputBatchOffset = b * outputBatchStrides;\n        const inputBatchOffset = b * strides[0];\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const xRCorner = yR * strideHeight - padTop;\n                const xRMin = Math.max(0, xRCorner);\n                const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n                const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const xCCorner = yC * strideWidth - padLeft;\n                    const xCMin = Math.max(0, xCCorner);\n                    const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n                    let minMaxValue = initialValue;\n                    let avgValue = 0;\n                    let count = 0;\n                    for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n                        const xROffset = inputBatchOffset + xR * strides[1];\n                        for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                            const xCOffset = xROffset + xC * strides[2];\n                            const pixel = xValues[xCOffset + d];\n                            if ((poolType === 'max' && pixel > minMaxValue)) {\n                                minMaxValue = pixel;\n                            }\n                            else if (poolType === 'avg') {\n                                avgValue += pixel;\n                                count++;\n                            }\n                        }\n                        if (isNaN(minMaxValue)) {\n                            break;\n                        }\n                    }\n                    const outputOffset = outputRowOffset + yC * outputColStrides + d;\n                    outputVals[outputOffset] =\n                        poolType === 'avg' ? avgValue / count : minMaxValue;\n                }\n            }\n        }\n    }\n    return output;\n}\nexport function maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {\n    const maxPositions = buffer(convInfo.outShape, 'int32');\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const xBuf = buffer(xShape, dtype, xValues);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const xRCorner = yR * strideHeight - padTop;\n                let xRMin = xRCorner;\n                while (xRMin < 0) {\n                    xRMin += dilationHeight;\n                }\n                // const xRMin = Math.max(0, xRCorner);\n                const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const xCCorner = yC * strideWidth - padLeft;\n                    let xCMin = xCCorner;\n                    while (xCMin < 0) {\n                        xCMin += dilationWidth;\n                    }\n                    const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n                    let maxValue = Number.NEGATIVE_INFINITY;\n                    let maxPosition = -1;\n                    for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n                        const wR = xR - xRCorner;\n                        for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                            const wC = xC - xCCorner;\n                            const pixel = xBuf.get(b, xR, xC, d);\n                            if (pixel > maxValue) {\n                                maxValue = pixel;\n                                if (flattenPositions) {\n                                    maxPosition = includeBatchInIndex ?\n                                        ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                                            convInfo.inChannels +\n                                            d :\n                                        (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                                }\n                                else {\n                                    maxPosition = wR * effectiveFilterWidth + wC;\n                                }\n                            }\n                        }\n                    }\n                    maxPositions.set(maxPosition, b, yR, yC, d);\n                }\n            }\n        }\n    }\n    return maxPositions;\n}\nexport function pool3d(xValues, xShape, dtype, strides, convInfo, poolType) {\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n        Number.POSITIVE_INFINITY);\n    const output = buffer(convInfo.outShape, dtype);\n    const outputVals = output.values;\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        const outputBatchOffset = batch * outputBatchStrides;\n        const inputBatchOffset = batch * strides[0];\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                const xDepthCorner = yDepth * strideDepth - padFront;\n                let xDepthMin = xDepthCorner;\n                while (xDepthMin < 0) {\n                    xDepthMin += dilationDepth;\n                }\n                const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n                for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                    const xRowCorner = yRow * strideHeight - padTop;\n                    let xRowMin = xRowCorner;\n                    while (xRowMin < 0) {\n                        xRowMin += dilationHeight;\n                    }\n                    const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                    const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n                    for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                        const xColCorner = yCol * strideWidth - padLeft;\n                        let xColMin = xColCorner;\n                        while (xColMin < 0) {\n                            xColMin += dilationWidth;\n                        }\n                        const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                        // Shader code begins\n                        const outputColOffset = outputRowOffset + yCol * outputColStrides;\n                        let minMaxValue = initialValue;\n                        let avgValue = 0;\n                        let count = 0;\n                        for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                            const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n                            for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                const xRowOffset = xDepthOffset + xRow * strides[2];\n                                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                    const xColOffset = xRowOffset + xCol * strides[3];\n                                    const pixel = xValues[xColOffset + channel];\n                                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                                        minMaxValue = pixel;\n                                    }\n                                    else if (poolType === 'avg') {\n                                        avgValue += pixel;\n                                        count++;\n                                    }\n                                    if (isNaN(minMaxValue)) {\n                                        break;\n                                    }\n                                }\n                                if (isNaN(minMaxValue)) {\n                                    break;\n                                }\n                            }\n                            if (isNaN(minMaxValue)) {\n                                break;\n                            }\n                        }\n                        const outputOffset = outputColOffset + channel;\n                        outputVals[outputOffset] =\n                            poolType === 'avg' ? avgValue / count : minMaxValue;\n                    }\n                }\n            }\n        }\n    }\n    return output;\n}\nexport function maxPool3dPositions(xBuf, convInfo) {\n    const maxPositions = buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                const xDepthCorner = yDepth * strideDepth - padFront;\n                let xDepthMin = xDepthCorner;\n                while (xDepthMin < 0) {\n                    xDepthMin += dilationDepth;\n                }\n                const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                    const xRowCorner = yRow * strideHeight - padTop;\n                    let xRowMin = xRowCorner;\n                    while (xRowMin < 0) {\n                        xRowMin += dilationHeight;\n                    }\n                    const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                    for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                        const xColCorner = yCol * strideWidth - padLeft;\n                        let xColMin = xColCorner;\n                        while (xColMin < 0) {\n                            xColMin += dilationWidth;\n                        }\n                        const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                        // Shader code begins\n                        let maxValue = Number.NEGATIVE_INFINITY;\n                        let maxPosition = -1;\n                        for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                            const wDepth = xDepth - xDepthCorner;\n                            for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                const wRow = xRow - xRowCorner;\n                                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                    const wCol = xCol - xColCorner;\n                                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                                    if (pixel >= maxValue) {\n                                        maxValue = pixel;\n                                        maxPosition =\n                                            wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                                wRow * effectiveFilterHeight + wCol;\n                                    }\n                                }\n                            }\n                        }\n                        maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return maxPositions;\n}\n//# sourceMappingURL=pool_utils.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n    const clipAttrs = attrs;\n    if (xi > clipAttrs.clipValueMax) {\n        return clipAttrs.clipValueMax;\n    }\n    return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\nexport const clipConfig = {\n    kernelName: ClipByValue,\n    backendName: 'cpu',\n    kernelFunc: clip,\n};\n//# sourceMappingURL=Clip.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropFilter, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropFilterConfig = {\n    kernelName: Dilation2DBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter, dy } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n        const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n        const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n        // The computed filter gradients has the same dimensions as the filter:\n        // [filterHeight, filterWidth, depth]\n        const gradients = util.makeZerosNestedTypedArray(filter.shape, filter.dtype);\n        // In the case of multiple argmax branches, we only back-propagate along the\n        // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n        // similarly to the max-pooling backward routines.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        let hMax = 0;\n                        let wMax = 0;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                            hMax = h;\n                                            wMax = w;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n        return { dataId, shape: filter.shape, dtype: filter.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2DBackpropFilter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropInput, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropInputConfig = {\n    kernelName: Dilation2DBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter, dy } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n        const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n        const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n        // The computed gradients has the same dimensions as the input:\n        // [batch, inputHeight, inputCols, inChannel]\n        const gradients = util.makeZerosNestedTypedArray(x.shape, x.dtype);\n        // In the case of multiple argmax branches, we only back-propagate along the\n        // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n        // similarly to the max-pooling backward routines.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        let hInMax = (hBeg < 0) ? 0 : hBeg;\n                        let wInMax = (wBeg < 0) ? 0 : wBeg;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                            hInMax = hIn;\n                                            wInMax = wIn;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n        return { dataId, shape: x.shape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2DBackpropInput.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { add } from '../kernels/Add';\nimport { complex } from '../kernels/Complex';\nimport { concat } from '../kernels/Concat';\nimport { identity } from '../kernels/Identity';\nimport { imag } from '../kernels/Imag';\nimport { multiply } from '../kernels/Multiply';\nimport { real } from '../kernels/Real';\nimport { realDivConfig } from '../kernels/RealDiv';\nimport { slice } from '../kernels/Slice';\nimport { sub } from '../kernels/Sub';\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(input, inverse, cpuBackend) {\n    const inputShape = input.shape;\n    const batch = inputShape[0];\n    const innerDim = inputShape[1];\n    const inputVals = cpuBackend.data.get(input.dataId);\n    const real2D = inputVals.complexTensorInfos.real;\n    const imag2D = inputVals.complexTensorInfos.imag;\n    // Collects real and imaginary values separately.\n    const resultShape = [batch, innerDim];\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n    for (let b = 0; b < batch; b++) {\n        // TODO: Support slice ops for complex type.\n        const r = slice({\n            inputs: { x: real2D },\n            backend: cpuBackend,\n            attrs: { begin: [b, 0], size: [1, innerDim] }\n        });\n        const i = slice({\n            inputs: { x: imag2D },\n            backend: cpuBackend,\n            attrs: { begin: [b, 0], size: [1, innerDim] }\n        });\n        const input = complex({ inputs: { real: r, imag: i }, backend: cpuBackend });\n        // Run FFT by batch element.\n        const { real, imag } = fftImpl(input, inverse, cpuBackend);\n        const res = backend_util.mergeRealAndImagArrays(real, imag);\n        for (let d = 0; d < innerDim; d++) {\n            const c = backend_util.getComplexWithIndex(res, d);\n            resultReal[b * innerDim + d] = c.real;\n            resultImag[b * innerDim + d] = c.imag;\n        }\n        cpuBackend.disposeIntermediateTensorInfo(r);\n        cpuBackend.disposeIntermediateTensorInfo(i);\n        cpuBackend.disposeIntermediateTensorInfo(input);\n    }\n    const $realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n    const $imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n    const result = complex({ inputs: { real: $realInfo, imag: $imagInfo }, backend: cpuBackend });\n    cpuBackend.disposeIntermediateTensorInfo($realInfo);\n    cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n    return result;\n}\nexport function fftImpl(input, inverse, cpuBackend) {\n    const inputSize = util.sizeFromShape(input.shape);\n    const inputVals = cpuBackend.data.get(input.dataId);\n    const realVals = cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values;\n    const imagVals = cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values;\n    if (isExponentOf2(inputSize)) {\n        const result = fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n        const resultShape = [input.shape[0], input.shape[1]];\n        if (inverse) {\n            const realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n            const imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n            const sizeInfo = cpuBackend.makeTensorInfo([], 'float32', util.createScalarValue(inputSize, 'float32'));\n            const sizeInfoCopy = identity({ inputs: { x: sizeInfo }, backend: cpuBackend });\n            const divRealInfo = realDivConfig.kernelFunc({ inputs: { a: realInfo, b: sizeInfo }, backend: cpuBackend });\n            const divImagInfo = realDivConfig.kernelFunc({ inputs: { a: imagInfo, b: sizeInfoCopy }, backend: cpuBackend });\n            const divRealVals = cpuBackend.data.get(divRealInfo.dataId).values;\n            const divImagVals = cpuBackend.data.get(divImagInfo.dataId).values;\n            cpuBackend.disposeIntermediateTensorInfo(realInfo);\n            cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n            cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n            cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n            cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n            cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n            return { real: divRealVals, imag: divImagVals };\n        }\n        return result;\n    }\n    else {\n        const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n        const rawOutput = fourierTransformByMatmul(data, inputSize, inverse);\n        return backend_util.splitRealAndImagArrays(rawOutput);\n    }\n}\nfunction isExponentOf2(size) {\n    return (size & size - 1) === 0;\n}\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(realVals, imagVals, size, inverse, cpuBackend) {\n    if (size === 1) {\n        return { real: realVals, imag: imagVals };\n    }\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n    const half = size / 2;\n    const evenComplex = backend_util.complexWithEvenIndex(data);\n    const evenRealVals = evenComplex.real;\n    const evenImagVals = evenComplex.imag;\n    const evenShape = [evenRealVals.length];\n    const evenRealInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n    const evenImagInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n    const evenTensorInfo = complex({ inputs: { real: evenRealInfo, imag: evenImagInfo }, backend: cpuBackend });\n    const oddComplex = backend_util.complexWithOddIndex(data);\n    const oddRealVals = oddComplex.real;\n    const oddImagVals = oddComplex.imag;\n    const oddShape = [oddRealVals.length];\n    const oddRealInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n    const oddImagInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n    const oddTensorInfo = complex({ inputs: { real: oddRealInfo, imag: oddImagInfo }, backend: cpuBackend });\n    // Recursive call for half part of original input.\n    const $evenComplex = fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n    const $evenRealVals = $evenComplex.real;\n    const $evenImagVals = $evenComplex.imag;\n    const $evenShape = [$evenRealVals.length];\n    const $evenRealInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n    const $evenImagInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n    const $evenTensorInfo = complex({\n        inputs: { real: $evenRealInfo, imag: $evenImagInfo },\n        backend: cpuBackend\n    });\n    const $oddComplex = fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n    const $oddRealVals = $oddComplex.real;\n    const $oddImagVals = $oddComplex.imag;\n    const $oddShape = [$oddRealVals.length];\n    const $oddRealInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n    const $oddImagInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n    const $oddTensorInfo = complex({ inputs: { real: $oddRealInfo, imag: $oddImagInfo }, backend: cpuBackend });\n    const e = backend_util.exponents(size, inverse);\n    const eShape = [e.real.length];\n    const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n    const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n    const complexInfo = complex({ inputs: { real: eRealInfo, imag: eImagInfo }, backend: cpuBackend });\n    const exponentInfo = multiply({ inputs: { a: complexInfo, b: $oddTensorInfo }, backend: cpuBackend });\n    const addPart = add({\n        inputs: { a: $evenTensorInfo, b: exponentInfo },\n        backend: cpuBackend\n    });\n    const subPart = sub({\n        inputs: { a: $evenTensorInfo, b: exponentInfo },\n        backend: cpuBackend\n    });\n    const addPartReal = real({ inputs: { input: addPart }, backend: cpuBackend });\n    const subPartReal = real({ inputs: { input: subPart }, backend: cpuBackend });\n    const addPartImag = imag({ inputs: { input: addPart }, backend: cpuBackend });\n    const subPartImag = imag({ inputs: { input: subPart }, backend: cpuBackend });\n    const $real = concat({\n        inputs: [addPartReal, subPartReal],\n        backend: cpuBackend,\n        attrs: { axis: 0 }\n    });\n    const $imag = concat({\n        inputs: [addPartImag, subPartImag],\n        backend: cpuBackend,\n        attrs: { axis: 0 }\n    });\n    const $realVals = cpuBackend.data.get($real.dataId).values;\n    const $imagVals = cpuBackend.data.get($imag.dataId).values;\n    cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n    cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n    cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n    cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n    cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n    cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n    cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n    cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n    cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n    cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n    cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n    cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n    cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n    cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n    cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n    cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n    cpuBackend.disposeIntermediateTensorInfo(addPart);\n    cpuBackend.disposeIntermediateTensorInfo(subPart);\n    cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n    cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n    cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n    cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n    cpuBackend.disposeIntermediateTensorInfo($real);\n    cpuBackend.disposeIntermediateTensorInfo($imag);\n    return { real: $realVals, imag: $imagVals };\n}\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(data, size, inverse) {\n    const ret = new Float32Array(size * 2);\n    // TODO: Use matmul instead once it supports complex64 type.\n    for (let r = 0; r < size; r++) {\n        let real = 0.0;\n        let imag = 0.0;\n        for (let c = 0; c < size; c++) {\n            const e = backend_util.exponent(r * c, size, inverse);\n            const term = backend_util.getComplexWithIndex(data, c);\n            real += term.real * e.real - term.imag * e.imag;\n            imag += term.real * e.imag + term.imag * e.real;\n        }\n        if (inverse) {\n            real /= size;\n            imag /= size;\n        }\n        backend_util.assignToTypedArray(ret, real, imag, r);\n    }\n    return ret;\n}\n//# sourceMappingURL=fft_utils.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const indicesData = indices.values;\n    const updatesData = updates.values;\n    if (outputSize === 0) {\n        return buffer(shape, updates.dtype);\n    }\n    const outBuf = buffer(flattenShape, updates.dtype);\n    outBuf.values.fill(defaultValue);\n    for (let i = 0; i < numUpdates; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            index.push(dim);\n            flattenIndex += dim * strides[j];\n        }\n        if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            if (sumDupeIndices) {\n                outBuf.values[flattenIndex * sliceSize + k] +=\n                    updatesData[i * sliceSize + k];\n            }\n            else {\n                outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                    updatesData[0] :\n                    updatesData[i * sliceSize + k];\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Scatter_impl.js.map"],"sourceRoot":""}