{"version":3,"sources":["pages/Classifier.js"],"names":["Classifier","useState","locData","setLocData","selectedFile","setSelectedFile","model","setModel","classificationText","setClassificationText","classificationProbabilityText","setClassificationProbabilityText","isClassificationOccuring","setIsClassificationOccuring","selectedImageRef","React","useRef","machineLearningService","MachineLearningService","localizationService","LocalizationService","modelUrl","modelUrlToLoad","a","tf","fromTFHub","console","log","useEffect","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","then","loadModel","handleClassifyImage","performImageClassification","getTensorFromRawImage","rawImage","normalized","fromPixels","toFloat","mul","add","resizeBilinear","reshape","classify","tensor","returnAmount","classes","values","slice","softmax","dataSync","valuesWithIndices","forEach","val","i","push","value","index","sort","b","filter","_","map","className","probability","current","predict","result","imageNetClasses","getImageNetClasses","prediction","dispose","ClassificationResult","length","DownloadButton","text","filePath","display","color","variant","target","style","visibility","onClick","window","location","href","origin","downloadFile","container","spacing","item","xs","classifier","classifierinstructions","rel","md","lg","xl","accept","multiple","id","type","onChange","e","file","files","reader","FileReader","onload","src","readAsDataURL","title","htmlFor","aria-label","component","fontSize","name","size","ref","width","alt"],"mappings":"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","file":"static/js/6.8e4c6ef4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PublishSharpIcon from '@material-ui/icons/PublishSharp';\n// Components\nimport LoadingIndicator from 'components/Shared/LoadingIndicator';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\nexport default function Classifier() {\n\tconst [locData, setLocData] = useState({});\n\tconst [selectedFile, setSelectedFile] = useState(null);\n\tconst [model, setModel] = useState();\n\tconst [classificationText, setClassificationText] = useState('');\n\tconst [classificationProbabilityText, setClassificationProbabilityText] = useState('');\n\tconst [isClassificationOccuring, setIsClassificationOccuring] = useState(false);\n\n\tconst selectedImageRef = React.useRef(null);\n\n\tconst machineLearningService = MachineLearningService();\n\tconst localizationService = LocalizationService();\n\n\tconst modelUrl = 'https://tfhub.dev/google/tfjs-model/imagenet/mobilenet_v2_140_224/classification/3/default/1';\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t['classifier', 'classifierdescription', 'classifierinstructions', 'moreinfo'],\n\t\t\t\tlocCode\n\t\t\t);\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\tuseEffect(() => {\n\t\ttf.ready().then(() => {\n\t\t\tloadModel(modelUrl);\n\t\t});\n\t}, [modelUrl]);\n\n\tasync function loadModel(modelUrlToLoad) {\n\t\ttry {\n\t\t\tconst model = await tf.loadGraphModel(modelUrlToLoad, { fromTFHub: true });\n\t\t\tsetModel(model);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tconst handleSelectImage = (e) => {\n\t\tconst [file] = e.target.files;\n\t\tif (file) {\n\t\t\tconst reader = new FileReader();\n\t\t\tconst { current } = selectedImageRef;\n\t\t\tcurrent.file = file;\n\t\t\treader.onload = (e) => {\n\t\t\t\tcurrent.src = e.target.result;\n\t\t\t};\n\t\t\treader.readAsDataURL(file);\n\t\t\tsetSelectedFile(file);\n\t\t}\n\t};\n\n\tconst handleClassifyImage = async () => {\n\t\tsetIsClassificationOccuring(true);\n\t\tawait performImageClassification();\n\t};\n\n\tconst getTensorFromRawImage = (rawImage) => {\n\t\tconst image = tf.browser.fromPixels(rawImage);\n\t\tconst normalized = image\n\t\t\t.toFloat()\n\t\t\t.mul(2 / 255)\n\t\t\t.add(-1);\n\t\tlet resized = tf.image.resizeBilinear(normalized, [224, 224], true);\n\t\treturn resized.reshape([-1, 224, 224, 3]);\n\t};\n\n\tconst classify = (tensor, returnAmount, classes) => {\n\t\tconst values = tf.tidy(() => {\n\t\t\tconst softmax = tensor.slice([0, 1], [-1, 1000]).softmax();\n\t\t\treturn softmax.dataSync();\n\t\t});\n\n\t\tconst valuesWithIndices = [];\n\t\tvalues.forEach((val, i) => {\n\t\t\tvaluesWithIndices.push({ value: val, index: i });\n\t\t});\n\n\t\treturn valuesWithIndices\n\t\t\t.sort((a, b) => b.value - a.value)\n\t\t\t.filter((_, i) => i < returnAmount)\n\t\t\t.map(({ value, index }) => ({\n\t\t\t\tclassName: classes[index],\n\t\t\t\tprobability: value,\n\t\t\t}));\n\t};\n\n\tconst performImageClassification = async () => {\n\t\tconst tensor = getTensorFromRawImage(selectedImageRef.current);\n\t\tconst result = await model.predict(tensor);\n\t\tconst imageNetClasses = machineLearningService.getImageNetClasses();\n\t\tconst prediction = classify(result, 1, imageNetClasses);\n\n\t\ttensor.dispose();\n\t\tresult.dispose();\n\n\t\tsetClassificationText(prediction[0].className);\n\t\tsetClassificationProbabilityText(prediction[0].probability);\n\t\tsetIsClassificationOccuring(false);\n\t};\n\n\tconst ClassificationResult = () => {\n\t\tif (!isClassificationOccuring && classificationText.length > 0) {\n\t\t\treturn (\n\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<span className=\"text-bold\">Classification:</span> {classificationText}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<span className=\"text-bold\">Probability:</span> {classificationProbabilityText}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <></>;\n\t\t}\n\t};\n\n\tconst downloadFile = (filePath) => {\n\t\twindow.location.href = window.location.origin + '/' + filePath;\n\t};\n\n\tconst DownloadButton = ({ text, filePath, display }) => {\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tclassName=\"ml-2\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tvariant=\"outlined\"\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\tstyle={{\n\t\t\t\t\tvisibility: display ? 'visible' : 'hidden',\n\t\t\t\t}}\n\t\t\t\tonClick={() => downloadFile(filePath)}\n\t\t\t>\n\t\t\t\t{text}\n\t\t\t</Button>\n\t\t);\n\t};\n\n\treturn (\n\t\t<Grid container spacing={0}>\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\n\t\t\t\t<h3>{locData.classifier}</h3>\n\t\t\t\t<p>\n\t\t\t\t\t{locData.classifierinstructions}{' '}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\thref={modelUrl}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tView Model\n\t\t\t\t\t</Button>\n\t\t\t\t</p>\n\t\t\t\t<Grid container spacing={0}>\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\t\t\t\taccept=\"image/jpeg\"\n\t\t\t\t\t\t\t\t\tmultiple={false}\n\t\t\t\t\t\t\t\t\tid=\"faceImage\"\n\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\tonChange={handleSelectImage}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Tooltip title=\"Select Image\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"faceImage\">\n\t\t\t\t\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"upload image\" component=\"span\">\n\t\t\t\t\t\t\t\t\t\t\t<PublishSharpIcon fontSize=\"large\" />\n\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t<label>{selectedFile ? selectedFile.name : 'Select Image'}</label>. . .\n\t\t\t\t\t\t\t\t<DownloadButton display={false} text=\"Bee\" filePath=\"images/bee.jpg\" />\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t{selectedFile ? (\n\t\t\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => handleClassifyImage()}>\n\t\t\t\t\t\t\t\t\t\tPerform Classification\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<LoadingIndicator display={isClassificationOccuring} size={40} />\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<ClassificationResult />\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"mt-2\"\n\t\t\t\t\t\t\tref={selectedImageRef}\n\t\t\t\t\t\t\tsrc={selectedFile}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\t\tvisibility: selectedFile != null ? 'visible' : 'hidden',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\talt=\"Selected file to analyze\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n"],"sourceRoot":""}