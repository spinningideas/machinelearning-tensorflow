{"version":3,"sources":["pages/ObjectDetectionCamera.js"],"names":["withWidth","props","useState","locData","setLocData","messages","setMessages","model","setModel","modelLoaded","setModelLoaded","cameraReady","setCameraReady","objectDetectionOccuring","setObjectDetectionOccuring","objectDetectionEnvironment","setObjectDetectionEnvironment","videoRef","useRef","canvasRef","localizationService","LocalizationService","useEffect","a","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","tf","then","loadModel","initWebCam","detectFromVideoFrame","current","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","video","facingMode","audio","stream","window","srcObject","Promise","resolve","onloadedmetadata","error","console","cocoSsd","log","enableDetection","detect","predictions","showDetections","requestAnimationFrame","ctx","getContext","clearRect","canvas","width","height","font","outlineColor","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","score","toFixed","performImageObjectDetection","toggleWebCamStream","activate","getTracks","track","start","stop","CameraActionButton","color","onClick","CameraEnvironmentButton","calcVideoWidth","isWidthUp","innerWidth","calcVideoHeight","h","Math","ceil","container","spacing","item","xs","sm","md","lg","xl","className","objectdetectioncamera","objectdetectioninstructionscamera","ref","style","position","top","left","zIndex","autoPlay","muted","playsInline"],"mappings":"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","file":"static/js/3.5a903524.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\nimport '@tensorflow/tfjs-backend-cpu';\nimport '@tensorflow/tfjs-backend-webgl';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\n// material-ui\nimport Alert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n// Services\nimport LocalizationService from 'services/LocalizationService';\n\nfunction ObjectDetectionCamera(props) {\n  const [locData, setLocData] = useState({});\n  const [messages, setMessages] = useState('');\n  const [model, setModel] = useState();\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [cameraReady, setCameraReady] = useState(false);\n  const [objectDetectionOccuring, setObjectDetectionOccuring] = useState(false);\n  const [objectDetectionEnvironment, setObjectDetectionEnvironment] = useState('environment');\n\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const localizationService = LocalizationService();\n\n  const aspectRatioFactor = 0.75; // 0.75 = 4by3 and 0.5625 = 16by9\n\n  let videoTop = 280;\n  let videoLeft = 10;\n\n  // localization\n  useEffect(() => {\n    async function loadLocalization() {\n      const locCode = localizationService.getUserLocale();\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\n        ['objectdetectioncamera', 'objectdetectiondescriptioncamera', 'objectdetectioninstructionscamera', 'moreinfo'],\n        locCode\n      );\n      setLocData(locDataLoaded);\n    }\n    loadLocalization();\n  }, []);\n\n  // model then camera initialization\n  useEffect(() => {\n    tf.ready().then(() => {\n      setMessages('Model loading...');\n      loadModel().then(() => {\n        setMessages('Model loaded...');\n        initWebCam();\n      });\n    });\n  }, []);\n\n  // camera object detection toggle\n  useEffect(() => {\n    detectFromVideoFrame(model, videoRef.current, objectDetectionOccuring);\n  }, [objectDetectionOccuring]);\n\n  const initWebCam = () => {\n    if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\n      // define a Promise that'll be used to load the webcam and read its frames\n      setMessages('Initializing web cam...');\n      const webcamPromise = navigator.mediaDevices\n        .getUserMedia({\n          video: { facingMode: objectDetectionEnvironment },\n          audio: false,\n        })\n        .then(\n          (stream) => {\n            // pass the current frame to the window.stream\n            window.stream = stream;\n            // pass the stream to the videoRef\n            videoRef.current.srcObject = stream;\n            return new Promise((resolve) => {\n              videoRef.current.onloadedmetadata = () => {\n                setMessages('Camera ready...click \"Perform Object Detection\" to continue');\n                setCameraReady(true);\n                resolve();\n              };\n            });\n          },\n          (error) => {\n            setMessages('Couldn\\t start the webcam');\n            console.error(error);\n          }\n        );\n      return webcamPromise;\n    }\n  };\n\n  const loadModel = async () => {\n    try {\n      const model = await cocoSsd.load();\n      setModel(model);\n      setModelLoaded(true);\n    } catch (err) {\n      setMessages('Couldn\\t load the model');\n      setModelLoaded(false);\n      console.log(err);\n    }\n  };\n\n  const detectFromVideoFrame = (model, video, enableDetection) => {\n    if (enableDetection) {\n      model.detect(video).then(\n        (predictions) => {\n          showDetections(predictions, enableDetection);\n          requestAnimationFrame(() => {\n            detectFromVideoFrame(model, video, enableDetection);\n          });\n        },\n        (error) => {\n          setMessages('Couldn\\t start the webcam');\n          setCameraReady(false);\n          console.error(error);\n        }\n      );\n    } else {\n      showDetections([], enableDetection);\n    }\n  };\n\n  const showDetections = (predictions, enableDetection) => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    if (enableDetection) {\n      const font = '20px monospace';\n      const outlineColor = '#00e5ff';\n      ctx.font = font;\n      ctx.textBaseline = 'top';\n\n      predictions.forEach((prediction) => {\n        const x = prediction.bbox[0];\n        const y = prediction.bbox[1];\n        const width = prediction.bbox[2];\n        const height = prediction.bbox[3];\n        // Draw the bounding box.\n        ctx.strokeStyle = outlineColor;\n        ctx.lineWidth = 1;\n        ctx.strokeRect(x, y, width, height);\n        // Draw the label background.\n        ctx.fillStyle = outlineColor;\n        const textWidth = ctx.measureText(prediction.class).width;\n        const textHeight = parseInt(font, 10);\n        // draw top left rectangle\n        ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\n        // draw bottom left rectangle\n        ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = '#000000';\n        ctx.fillText(prediction.class, x, y);\n        ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n      });\n    }\n  };\n\n  const handleImageObjectDetection = () => {\n    performImageObjectDetection();\n  };\n\n  const performImageObjectDetection = () => {\n    setObjectDetectionOccuring(true);\n    setMessages('Detecting objects in the webcam...');\n  };\n\n  const stopImageObjectDetection = () => {\n    setObjectDetectionOccuring(false);\n    toggleWebCamStream(false);\n    setMessages('Stopped detecting objects in the webcam...');\n  };\n\n  const toggleWebCamStream = (activate) => {\n    return navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: false,\n      })\n      .then((stream) => {\n        stream.getTracks().forEach((track) => {\n          if (activate) {\n            track.start();\n          } else {\n            track.stop();\n          }\n        });\n      });\n  };\n\n  const toggleWebCamEnvironment = () => {\n    if (objectDetectionEnvironment === 'environment') {\n      setObjectDetectionEnvironment('user');\n    } else {\n      setObjectDetectionEnvironment('environment');\n    }\n  };\n\n  const CameraActionButton = () => {\n    if (modelLoaded && cameraReady && !objectDetectionOccuring) {\n      return (\n        <Button color=\"primary\" onClick={() => handleImageObjectDetection()}>\n          Perform Object Detection\n        </Button>\n      );\n    }\n    if (modelLoaded && cameraReady && objectDetectionOccuring) {\n      return (\n        <Button color=\"primary\" onClick={() => stopImageObjectDetection()}>\n          Stop Object Detection\n        </Button>\n      );\n    }\n    return <></>;\n  };\n\n  const CameraEnvironmentButton = () => {\n    if (modelLoaded && cameraReady && objectDetectionOccuring) {\n      return (\n        <Button color=\"primary\" onClick={() => toggleWebCamEnvironment()}>\n          Change Camera\n        </Button>\n      );\n    }\n    return <></>;\n  };\n\n  const calcVideoWidth = () => {\n    if (isWidthUp('md', props.width)) {\n      return 720;\n    } else {\n      return window.innerWidth - 20;\n    }\n  };\n\n  const calcVideoHeight = () => {\n    let h = calcVideoWidth();\n    return Math.ceil(h * aspectRatioFactor); // 16by9 aspect ratio\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12} sm={12} md={6} lg={4} xl={4}>\n        <Card className=\"card white-bg-color bl-1 bb-1\">\n          <CardContent className=\"p-2\">\n            <h2>{locData.objectdetectioncamera}</h2>\n            {!modelLoaded && !cameraReady ? <p>{locData.objectdetectioninstructionscamera}</p> : <></>}\n            <Alert>{messages}</Alert>\n          </CardContent>\n          <CardActions className=\"p-2\">\n            <CameraActionButton />\n            <CameraEnvironmentButton />\n          </CardActions>\n        </Card>\n      </Grid>\n      <Grid item xs={12} sm={12} md={6} lg={8} xl={8}>\n        <video\n          ref={videoRef}\n          style={{\n            position: 'fixed',\n            top: videoTop,\n            left: videoLeft,\n            zIndex: 9000,\n          }}\n          width={calcVideoWidth()}\n          height={calcVideoHeight()}\n          autoPlay\n          muted\n          playsInline\n        />\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: 'fixed',\n            top: videoTop,\n            left: videoLeft,\n            zIndex: 10001,\n          }}\n          width={calcVideoWidth()}\n          height={calcVideoHeight()}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default withWidth()(ObjectDetectionCamera);\n"],"sourceRoot":""}