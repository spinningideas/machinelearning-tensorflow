{"version":3,"sources":["components/Shared/BoundingBox.js","pages/ObjectDetection.js","components/Shared/DownloadFileButton.js"],"names":["BoundingBox","box","label","probability","parentImgRef","color","left","top","width","height","parentImgTop","current","offsetTop","parentImgLeft","offsetLeft","lableValue","probabilityValue","Math","round","classes","makeStyles","boundingBoxContainer","position","border","margin","padding","labelContainer","display","bottom","background","fontSize","fontFamily","probabilityContainer","right","borderRadius","useStyles","className","style","ObjectDetection","useState","locData","setLocData","selectedFile","setSelectedFile","model","setModel","detectedObjects","setDetectedObjects","objectDetectionIsOccuring","setObjectDetectionIsOccuring","selectedImageRef","useRef","localizationService","LocalizationService","machineLearningService","MachineLearningService","modelUrl","useEffect","a","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","tf","then","loadModel","modelUrlToLoad","fromTFHub","zeroTensor","executeAsync","result","Promise","all","map","t","data","dispose","console","log","handleImageObjectDetection","performImageObjectDetection","getTensorFromRawImage","img","fromPixels","expandDims","cast","tensorData","getCocoSSDClasses","detectObjects","Grid","container","spacing","item","xs","objectdetection","objectdetectioninstructions","Button","href","variant","target","rel","md","lg","xl","Card","CardContent","accept","multiple","id","type","onChange","e","file","files","reader","FileReader","onload","src","readAsDataURL","Tooltip","title","htmlFor","IconButton","aria-label","component","name","DownloadFileButton","text","filePath","CardActions","onClick","LoadingIndicator","size","Box","justifyContent","ref","visibility","alt","object","boundingBox","class","theme","avatar","download"],"mappings":"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","file":"static/js/6.11b42e55.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst BoundingBox = ({ box, label, probability, parentImgRef }) => {\r\n  const color = '#00e5ff';\r\n  let [left, top, width, height] = box;\r\n  let parentImgTop = parentImgRef.current.offsetTop;\r\n  let parentImgLeft = parentImgRef.current.offsetLeft;\r\n  const lableValue = label ? label : 'no class provided';\r\n  const probabilityValue = probability ? Math.round(probability * 100) + '%' : 0;\r\n\r\n  top = Math.round(top + parentImgTop);\r\n  left = Math.round(left + parentImgLeft);\r\n  width = Math.round(width);\r\n  height = Math.round(height);\r\n\r\n  const useStyles = makeStyles(() => ({\r\n    boundingBoxContainer: {\r\n      position: 'absolute',\r\n      border: '0.2rem solid ' + color,\r\n      top: top,\r\n      margin: 0,\r\n      padding: 0,\r\n    },\r\n    labelContainer: {\r\n      display: 'block',\r\n      position: 'absolute',\r\n      bottom: 0,\r\n      color: '#212121',\r\n      background: color,\r\n      padding: '0.3rem 0.6rem',\r\n      margin: 0,\r\n      fontSize: '1.2rem',\r\n      fontFamily: 'monospace',\r\n      left: -1,\r\n    },\r\n    probabilityContainer: {\r\n      display: 'block',\r\n      position: 'absolute',\r\n      bottom: 0,\r\n      color: '#212121',\r\n      background: color,\r\n      padding: '0.3rem 0.6rem',\r\n      margin: 0,\r\n      fontSize: '1.2rem',\r\n      fontFamily: 'monospace',\r\n      right: 0,\r\n      borderRadius: '0',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={classes.boundingBoxContainer}\r\n      style={{ width, top, height, left }}\r\n      label={label}\r\n      probability={probability}\r\n    >\r\n      <div className={classes.labelContainer}>{lableValue}</div>\r\n      <div className={classes.probabilityContainer}>{probabilityValue}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoundingBox;\r\n","import React, { useEffect, useState, useRef } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n// material-ui\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PublishSharpIcon from '@material-ui/icons/PublishSharp';\n// Components\nimport LoadingIndicator from 'components/Shared/LoadingIndicator';\nimport DownloadFileButton from 'components/Shared/DownloadFileButton';\nimport BoundingBox from 'components/Shared/BoundingBox';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\nexport default function ObjectDetection() {\n  const [locData, setLocData] = useState({});\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [model, setModel] = useState();\n  const [detectedObjects, setDetectedObjects] = useState(null);\n  const [objectDetectionIsOccuring, setObjectDetectionIsOccuring] = useState(false);\n\n  const selectedImageRef = useRef(null);\n\n  const localizationService = LocalizationService();\n  const machineLearningService = MachineLearningService();\n\n  const modelUrl = 'https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1';\n\n  useEffect(() => {\n    async function loadLocalization() {\n      const locCode = localizationService.getUserLocale();\n\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\n        ['objectdetection', 'objectdetectiondescription', 'objectdetectioninstructions', 'moreinfo'],\n        locCode\n      );\n      setLocData(locDataLoaded);\n    }\n    loadLocalization();\n  }, []);\n\n  useEffect(() => {\n    tf.ready().then(() => {\n      loadModel(modelUrl);\n    });\n  }, [modelUrl]);\n\n  const loadModel = async (modelUrlToLoad) => {\n    try {\n      const model = await tf.loadGraphModel(modelUrlToLoad, { fromTFHub: true });\n      // warm up model with empty image\n      const zeroTensor = tf.zeros([1, 300, 300, 3], 'int32');\n      const result = await model.executeAsync(zeroTensor);\n      await Promise.all(result.map((t) => t.data()));\n      result.map((t) => t.dispose());\n      zeroTensor.dispose();\n\n      setModel(model);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleSelectImage = (e) => {\n    const [file] = e.target.files;\n    if (file) {\n      const reader = new FileReader();\n      const { current } = selectedImageRef;\n      current.file = file;\n      reader.onload = (e) => {\n        current.src = e.target.result;\n      };\n      reader.readAsDataURL(file);\n      setSelectedFile(file);\n    }\n  };\n\n  const handleImageObjectDetection = async () => {\n    setObjectDetectionIsOccuring(true);\n    await performImageObjectDetection();\n  };\n\n  const getTensorFromRawImage = (img) => {\n    const tensor = tf.tidy(() => {\n      const tens = tf.browser.fromPixels(img);\n      return tens.expandDims(0).cast('int32');\n    });\n    return tensor;\n  };\n\n  const performImageObjectDetection = async () => {\n    const tensorData = getTensorFromRawImage(selectedImageRef.current);\n    const width = selectedImageRef.current?.width ?? 0;\n    const height = selectedImageRef.current?.height ?? 0;\n    const classes = machineLearningService.getCocoSSDClasses();\n    const returns = 5;\n    const minConfidence = 0;\n\n    const detectedObjects = await machineLearningService.detectObjects(\n      model,\n      tensorData,\n      width,\n      height,\n      classes,\n      returns,\n      minConfidence\n    );\n\n    setDetectedObjects(detectedObjects);\n\n    setObjectDetectionIsOccuring(false);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12} className=\"contentpanel-site\">\n        <h3>{locData.objectdetection}</h3>\n        <p>\n          {locData.objectdetectioninstructions}{' '}\n          <Button\n            className=\"ml-2\"\n            href={modelUrl}\n            color=\"primary\"\n            variant=\"outlined\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n\t\t\t\t\t\tView Model\n          </Button>\n        </p>\n        <Grid container spacing={0}>\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            <Card className=\"card white-bg-color bl-1 bb-1\">\n              <CardContent>\n                <input\n                  style={{ display: 'none' }}\n                  accept=\"image/jpeg\"\n                  multiple={false}\n                  id=\"faceImage\"\n                  type=\"file\"\n                  onChange={handleSelectImage}\n                />\n                <Tooltip title=\"Select Image\">\n                  <label htmlFor=\"faceImage\">\n                    <IconButton color=\"primary\" aria-label=\"upload image\" component=\"span\">\n                      <PublishSharpIcon fontSize=\"large\" />\n                    </IconButton>\n                  </label>\n                </Tooltip>\n                <label>{selectedFile ? selectedFile.name : 'Select Image'}</label>. . .\n                <DownloadFileButton\n                  display={true}\n                  text=\"Download Apple/Carrot Image\"\n                  filePath=\"images/apple-carrot.jpg\"\n                />\n                <DownloadFileButton\n                  display={true}\n                  text=\"Download Hot Dog Image\"\n                  filePath=\"images/hotdog.jpg\"\n                />\n                <DownloadFileButton\n                  display={true}\n                  text=\"Download strawberry Image\"\n                  filePath=\"images/strawberry.jpg\"\n                />\n              </CardContent>\n              <CardActions>\n                {selectedFile ? (\n                  <Button color=\"primary\" onClick={() => handleImageObjectDetection()}>\n\t\t\t\t\t\t\t\t\t\tPerform Object Detection\n                  </Button>\n                ) : (\n                  <></>\n                )}\n                <LoadingIndicator display={objectDetectionIsOccuring} size={40} />\n              </CardActions>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            <Box display=\"flex\" justifyContent=\"center\">\n              <img\n                id=\"img-selectedfile\"\n                className=\"mt-2\"\n                ref={selectedImageRef}\n                src={selectedFile}\n                style={{\n                  width: '50%',\n                  visibility: selectedFile != null ? 'visible' : 'hidden',\n                }}\n                alt=\"Selected file to analyze\"\n              />\n              {detectedObjects\n                ? detectedObjects.map((object) => (\n                  <BoundingBox\n                    key={object.class + object.probability}\n                    parentImgRef={selectedImageRef}\n                    box={object.boundingBox}\n                    label={object.class}\n                    probability={object.probability}\n                  />\n                ))\n                : null}\n            </Box>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  avatar: {\r\n    margin: theme.spacing(0),\r\n  },\r\n}));\r\n\r\nfunction DownloadFileButton({ text, filePath, display }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <IconButton\r\n      className=\"ml-2\"\r\n      color=\"primary\"\r\n      target=\"_blank\"\r\n      style={{\r\n        visibility: display ? 'visible' : 'hidden',\r\n      }}\r\n      title={text}\r\n      href={filePath}\r\n      download\r\n    >\r\n      <Avatar className={classes.avatar} alt={text} src={filePath} />\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nexport default DownloadFileButton;\r\n"],"sourceRoot":""}