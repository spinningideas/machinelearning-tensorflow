{"version":3,"sources":["pages/ObjectDetection.js","components/Shared/DownloadFileButton.js"],"names":["ObjectDetection","useState","locData","setLocData","selectedFile","setSelectedFile","model","setModel","detectedObjects","setDetectedObjects","objectDetectionIsOccuring","setObjectDetectionIsOccuring","selectedImageRef","useRef","requestFramRef","localizationService","LocalizationService","machineLearningService","MachineLearningService","modelUrl","useEffect","a","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","tf","then","loadModel","modelUrlToLoad","fromTFHub","zeroTensor","executeAsync","result","Promise","all","map","t","data","dispose","console","log","handleImageObjectDetection","performImageObjectDetection","getTensorFromRawImage","img","fromPixels","expandDims","cast","tensorData","current","width","height","classes","getCocoSSDClasses","detectObjects","ObjectDetectionResult","length","className","object","class","probability","container","spacing","item","xs","objectdetection","objectdetectioninstructions","href","color","variant","target","rel","md","lg","xl","style","display","accept","multiple","id","type","onChange","e","file","files","reader","FileReader","onload","src","readAsDataURL","title","htmlFor","aria-label","component","fontSize","name","text","filePath","onClick","size","justifyContent","ref","visibility","alt","useStyles","makeStyles","theme","avatar","margin","DownloadFileButton","download"],"mappings":"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","file":"static/js/6.b2c88c43.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n// material-ui\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PublishSharpIcon from '@material-ui/icons/PublishSharp';\n// Components\nimport LoadingIndicator from 'components/Shared/LoadingIndicator';\nimport DownloadFileButton from 'components/Shared/DownloadFileButton';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\nexport default function ObjectDetection() {\n\tconst [locData, setLocData] = useState({});\n\tconst [selectedFile, setSelectedFile] = useState(null);\n\tconst [model, setModel] = useState();\n\tconst [detectedObjects, setDetectedObjects] = useState(null);\n\tconst [objectDetectionIsOccuring, setObjectDetectionIsOccuring] = useState(false);\n\n\tconst selectedImageRef = useRef(null);\n\tconst requestFramRef = useRef(0);\n\n\tconst localizationService = LocalizationService();\n\tconst machineLearningService = MachineLearningService();\n\n\tconst modelUrl = 'https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1';\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t['objectdetection', 'objectdetectiondescription', 'objectdetectioninstructions', 'moreinfo'],\n\t\t\t\tlocCode\n\t\t\t);\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\tuseEffect(() => {\n\t\ttf.ready().then(() => {\n\t\t\tloadModel(modelUrl);\n\t\t});\n\t}, [modelUrl]);\n\n\tconst loadModel = async (modelUrlToLoad) => {\n\t\ttry {\n\t\t\tconst model = await tf.loadGraphModel(modelUrlToLoad, { fromTFHub: true });\n\t\t\t// warm up model with empty image\n\t\t\tconst zeroTensor = tf.zeros([1, 300, 300, 3], 'int32');\n\t\t\tconst result = await model.executeAsync(zeroTensor);\n\t\t\tawait Promise.all(result.map((t) => t.data()));\n\t\t\tresult.map((t) => t.dispose());\n\t\t\tzeroTensor.dispose();\n\n\t\t\tsetModel(model);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tconst handleSelectImage = (e) => {\n\t\tconst [file] = e.target.files;\n\t\tif (file) {\n\t\t\tconst reader = new FileReader();\n\t\t\tconst { current } = selectedImageRef;\n\t\t\tcurrent.file = file;\n\t\t\treader.onload = (e) => {\n\t\t\t\tcurrent.src = e.target.result;\n\t\t\t};\n\t\t\treader.readAsDataURL(file);\n\t\t\tsetSelectedFile(file);\n\t\t}\n\t};\n\n\tconst handleImageObjectDetection = async () => {\n\t\tsetObjectDetectionIsOccuring(true);\n\t\tawait performImageObjectDetection();\n\t};\n\n\tconst getTensorFromRawImage = (img) => {\n\t\tconst tensor = tf.tidy(() => {\n\t\t\tconst tens = tf.browser.fromPixels(img);\n\t\t\treturn tens.expandDims(0).cast('int32');\n\t\t});\n\t\treturn tensor;\n\t};\n\n\tconst performImageObjectDetection = async () => {\n\t\tconst tensorData = getTensorFromRawImage(selectedImageRef.current);\n\t\tconst width = selectedImageRef.current?.width ?? 0;\n\t\tconst height = selectedImageRef.current?.height ?? 0;\n\t\tconst classes = machineLearningService.getCocoSSDClasses();\n\t\tconst returns = 5;\n\t\tconst minConfidence = 0;\n\n\t\tconst detectedObjects = await machineLearningService.detectObjects(\n\t\t\tmodel,\n\t\t\ttensorData,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tclasses,\n\t\t\trequestFramRef,\n\t\t\treturns,\n\t\t\tminConfidence\n\t\t);\n\n\t\tsetDetectedObjects(detectedObjects);\n\n\t\tsetObjectDetectionIsOccuring(false);\n\t};\n\n\tconst ObjectDetectionResult = () => {\n\t\tif (!objectDetectionIsOccuring && detectedObjects && detectedObjects.length > 0) {\n\t\t\treturn (\n\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t{detectedObjects.map((object) => (\n\t\t\t\t\t\t\t<div key={object.class}>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<span className=\"text-bold\">Classification:</span> {object.class}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<span className=\"text-bold\">Probability:</span> {object.probability}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <></>;\n\t\t}\n\t};\n\n\treturn (\n\t\t<Grid container spacing={0}>\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\n\t\t\t\t<h3>{locData.objectdetection}</h3>\n\t\t\t\t<p>\n\t\t\t\t\t{locData.objectdetectioninstructions}{' '}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\thref={modelUrl}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tView Model\n\t\t\t\t\t</Button>\n\t\t\t\t</p>\n\t\t\t\t<Grid container spacing={0}>\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\t\t\t\taccept=\"image/jpeg\"\n\t\t\t\t\t\t\t\t\tmultiple={false}\n\t\t\t\t\t\t\t\t\tid=\"faceImage\"\n\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\tonChange={handleSelectImage}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Tooltip title=\"Select Image\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"faceImage\">\n\t\t\t\t\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"upload image\" component=\"span\">\n\t\t\t\t\t\t\t\t\t\t\t<PublishSharpIcon fontSize=\"large\" />\n\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t<label>{selectedFile ? selectedFile.name : 'Select Image'}</label>. . .\n\t\t\t\t\t\t\t\t<DownloadFileButton\n\t\t\t\t\t\t\t\t\tdisplay={true}\n\t\t\t\t\t\t\t\t\ttext=\"Download Bee Image\"\n\t\t\t\t\t\t\t\t\tfilePath=\"images/bee.jpg\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<DownloadFileButton\n\t\t\t\t\t\t\t\t\tdisplay={true}\n\t\t\t\t\t\t\t\t\ttext=\"Download Hot Dog Image\"\n\t\t\t\t\t\t\t\t\tfilePath=\"images/hotdog.jpg\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<DownloadFileButton\n\t\t\t\t\t\t\t\t\tdisplay={true}\n\t\t\t\t\t\t\t\t\ttext=\"Download strawberry Image\"\n\t\t\t\t\t\t\t\t\tfilePath=\"images/strawberry.jpg\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t{selectedFile ? (\n\t\t\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => handleImageObjectDetection()}>\n\t\t\t\t\t\t\t\t\t\tPerform Object Detection\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<LoadingIndicator display={objectDetectionIsOccuring} size={40} />\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t<ObjectDetectionResult />\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName=\"mt-2\"\n\t\t\t\t\t\t\t\tref={selectedImageRef}\n\t\t\t\t\t\t\t\tsrc={selectedFile}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\t\t\tvisibility: selectedFile != null ? 'visible' : 'hidden',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\talt=\"Selected file to analyze\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tavatar: {\r\n\t\tmargin: theme.spacing(1),\r\n\t},\r\n}));\r\n\r\nfunction DownloadFileButton({ text, filePath, display }) {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<IconButton\r\n\t\t\tclassName=\"ml-2\"\r\n\t\t\tcolor=\"primary\"\r\n\t\t\ttarget=\"_blank\"\r\n\t\t\tstyle={{\r\n\t\t\t\tvisibility: display ? 'visible' : 'hidden',\r\n\t\t\t}}\r\n\t\t\ttitle={text}\r\n\t\t\thref={filePath}\r\n\t\t\tdownload\r\n\t\t>\r\n\t\t\t<Avatar className={classes.avatar} alt={text} src={filePath} />\r\n\t\t</IconButton>\r\n\t);\r\n}\r\n\r\nexport default DownloadFileButton;\r\n"],"sourceRoot":""}