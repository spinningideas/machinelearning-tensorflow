{"version":3,"sources":["pages/ObjectDetectionCamera.js"],"names":["withWidth","props","useState","locData","setLocData","messages","setMessages","model","setModel","modelLoaded","setModelLoaded","cameraReady","setCameraReady","videoWidth","setVideoWidth","videoHeight","setVideoHeight","videoRef","useRef","canvasRef","styles","position","top","left","localizationService","LocalizationService","useEffect","a","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","tf","then","loadModel","initWebCam","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","video","audio","stream","window","current","srcObject","Promise","resolve","onloadedmetadata","calcCanvasSize","error","console","cocoSsd","log","detectFromVideoFrame","detect","predictions","showDetections","requestAnimationFrame","calculatedVideoWidth","calculatedVideoHeight","isWidthUp","width","innerWidth","ctx","getContext","clearRect","canvas","height","font","outlineColor","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","score","toFixed","handleImageObjectDetection","performImageObjectDetection","container","spacing","item","xs","className","objectdetectioncamera","objectdetectioninstructionscamera","color","onClick","style","autoPlay","muted","playsInline","ref"],"mappings":"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","file":"static/js/3.1e3786fa.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\nimport '@tensorflow/tfjs-backend-cpu';\nimport '@tensorflow/tfjs-backend-webgl';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\n// Services\nimport LocalizationService from 'services/LocalizationService';\n\nfunction ObjectDetectionCamera(props) {\n  const [locData, setLocData] = useState({});\n  const [messages, setMessages] = useState('');\n  const [model, setModel] = useState();\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [cameraReady, setCameraReady] = useState(false);\n  const [videoWidth, setVideoWidth] = useState(700);\n  const [videoHeight, setVideoHeight] = useState(600);\n  \n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  let videoTop = 250;\n  let videoLeft = 20;\n  \n  let styles = {\n    position: 'fixed',\n    top: videoTop,\n    left: videoLeft\n  };\n\n  const localizationService = LocalizationService();\n\n  // localization\n  useEffect(() => {\n    async function loadLocalization() {\n      const locCode = localizationService.getUserLocale();\n\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\n        ['objectdetectioncamera', 'objectdetectiondescriptioncamera', 'objectdetectioninstructionscamera', 'moreinfo'],\n        locCode\n      );\n      setLocData(locDataLoaded);\n    }\n    loadLocalization();\n  }, []);\n\n  // model\n  useEffect(() => {\n    tf.ready().then(() => {\n      setMessages('Model loading...');\n      loadModel().then(() => {\n        setModelLoaded(true);\n        setMessages('Model loaded...');\n        initWebCam();\n      });\n    });\n  }, []);\n\n  const initWebCam = () => {\n    if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\n      // define a Promise that'll be used to load the webcam and read its frames\n      setMessages('Initializing web cam...');\n      const webcamPromise = navigator.mediaDevices\n        .getUserMedia({\n          video: true,\n          audio: false,\n        })\n        .then(\n          (stream) => {\n            // pass the current frame to the window.stream\n            window.stream = stream;\n            // pass the stream to the videoRef\n            videoRef.current.srcObject = stream;\n\n            return new Promise((resolve) => {\n              videoRef.current.onloadedmetadata = () => {\n                setMessages('Camera ready...click \"Perform Object Detection\" to continue');\n                setCameraReady(true);\n                calcCanvasSize();\n                resolve();\n              };\n            });\n          },\n          (error) => {\n            setMessages('Couldn\\t start the webcam');\n            console.error(error);\n          }\n        );\n      return webcamPromise;\n    }\n  };\n\n  const loadModel = async () => {\n    try {\n      const model = await cocoSsd.load();\n      setModel(model);\n    } catch (err) {\n      setMessages('Couldn\\t load the model');\n      setModelLoaded(false);\n      console.log(err);\n    }\n  };\n\n  const detectFromVideoFrame = (model, video) => {\n    model.detect(video).then(\n      (predictions) => {\n        showDetections(predictions);\n        requestAnimationFrame(() => {\n          detectFromVideoFrame(model, video);\n        });\n      },\n      (error) => {\n        setMessages('Couldn\\t start the webcam');\n        setCameraReady(false);\n        console.error(error);\n      }\n    );\n  };\n\n  const calcCanvasSize = () => {\n    let calculatedVideoWidth = 720;\n    let calculatedVideoHeight = 600;\n    if (isWidthUp('sm', props.width)) {      \n      calculatedVideoWidth = videoRef.current ? videoRef.current.width : 700;\n    } else {\n      calculatedVideoWidth = window.innerWidth - 40;\n      calculatedVideoHeight = calculatedVideoWidth;    \n    }    \n    setVideoWidth(calculatedVideoWidth);\n    setVideoHeight(calculatedVideoHeight);\n  };\n\n  const showDetections = (predictions) => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const font = '20px monospace';\n    const outlineColor = '#00e5ff';\n    ctx.font = font;\n    ctx.textBaseline = 'top';\n\n    predictions.forEach((prediction) => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = outlineColor;\n      ctx.lineWidth = 1;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = outlineColor;\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10);\n      // draw top left rectangle\n      ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\n      // draw bottom left rectangle\n      ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = '#000000';\n      ctx.fillText(prediction.class, x, y);\n      ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n    });\n  };\n\n  const handleImageObjectDetection = async () => {\n    await performImageObjectDetection();\n  };\n\n  const performImageObjectDetection = async () => {\n    calcCanvasSize();\n    detectFromVideoFrame(model, videoRef.current);\n    setMessages('Detecting objects in the webcam...');\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12} className=\"contentpanel-site mb-3\">\n        <h3>{locData.objectdetectioncamera}</h3>\n\n        <Card className=\"card white-bg-color bl-1 bb-1\">\n          <CardContent className=\"p-2\">\n            {!modelLoaded && !cameraReady ? <p>{locData.objectdetectioninstructionscamera}</p> : <></>}\n            <p>{messages}</p>\n          </CardContent>\n          <CardActions className=\"p-2\">\n            {modelLoaded && cameraReady ? (\n              <Button color=\"primary\" onClick={() => handleImageObjectDetection()}>\n                Perform Object Detection\n              </Button>\n            ) : (\n              <></>\n            )}\n          </CardActions>\n        </Card>\n\n        <video style={styles} width={videoWidth} height={videoHeight} autoPlay muted playsInline ref={videoRef} />\n        <canvas style={styles} ref={canvasRef} width={videoWidth} height={videoHeight + 50} />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default withWidth()(ObjectDetectionCamera);\n"],"sourceRoot":""}