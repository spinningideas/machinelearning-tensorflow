{"version":3,"sources":["components/Shared/DownloadFileButton.js","pages/Classifier.js"],"names":["useStyles","makeStyles","theme","avatar","margin","spacing","DownloadFileButton","text","filePath","display","classes","className","color","target","style","visibility","title","href","download","alt","src","Classifier","useState","locData","setLocData","selectedFile","setSelectedFile","model","setModel","classificationText","setClassificationText","classificationProbabilityText","setClassificationProbabilityText","isClassificationOccuring","setIsClassificationOccuring","selectedImageRef","React","useRef","machineLearningService","MachineLearningService","localizationService","LocalizationService","modelUrl","modelUrlToLoad","a","tf","fromTFHub","console","log","useEffect","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","then","loadModel","handleClassifyImage","performImageClassification","getTensorFromRawImage","rawImage","normalized","fromPixels","toFloat","mul","add","resizeBilinear","reshape","classify","tensor","returnAmount","values","slice","softmax","dataSync","valuesWithIndices","forEach","val","i","push","value","index","sort","b","filter","_","map","probability","current","predict","result","imageNetClasses","getImageNetClasses","prediction","dispose","ClassificationResult","length","container","item","xs","classifier","classifierinstructions","variant","rel","md","lg","xl","accept","multiple","id","type","onChange","e","file","files","reader","FileReader","onload","readAsDataURL","htmlFor","aria-label","component","fontSize","name","onClick","size","justifyContent","ref","width"],"mappings":"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","file":"static/js/5.e53474f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  avatar: {\r\n    margin: theme.spacing(0),\r\n  },\r\n}));\r\n\r\nfunction DownloadFileButton({ text, filePath, display }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <IconButton\r\n      className=\"ml-2\"\r\n      color=\"primary\"\r\n      target=\"_blank\"\r\n      style={{\r\n        visibility: display ? 'visible' : 'hidden',\r\n      }}\r\n      title={text}\r\n      href={filePath}\r\n      download\r\n    >\r\n      <Avatar className={classes.avatar} alt={text} src={filePath} />\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nexport default DownloadFileButton;\r\n","import React, { useEffect, useState } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n// material-ui\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PublishSharpIcon from '@material-ui/icons/PublishSharp';\n// Components\nimport LoadingIndicator from 'components/Shared/LoadingIndicator';\nimport DownloadFileButton from 'components/Shared/DownloadFileButton';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\nexport default function Classifier() {\n  const [locData, setLocData] = useState({});\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [model, setModel] = useState();\n  const [classificationText, setClassificationText] = useState('');\n  const [classificationProbabilityText, setClassificationProbabilityText] = useState('');\n  const [isClassificationOccuring, setIsClassificationOccuring] = useState(false);\n\n  const selectedImageRef = React.useRef(null);\n\n  const machineLearningService = MachineLearningService();\n  const localizationService = LocalizationService();\n\n  const modelUrl = 'https://tfhub.dev/google/tfjs-model/imagenet/mobilenet_v2_140_224/classification/3/default/1';\n\n  useEffect(() => {\n    async function loadLocalization() {\n      const locCode = localizationService.getUserLocale();\n\n      const locDataLoaded = await localizationService.getLocalizedTextSet(\n        ['classifier', 'classifierdescription', 'classifierinstructions', 'moreinfo'],\n        locCode\n      );\n      setLocData(locDataLoaded);\n    }\n    loadLocalization();\n  }, []);\n\n  useEffect(() => {\n    tf.ready().then(() => {\n      loadModel(modelUrl);\n    });\n  }, [modelUrl]);\n\n  async function loadModel(modelUrlToLoad) {\n    try {\n      const model = await tf.loadGraphModel(modelUrlToLoad, { fromTFHub: true });\n      setModel(model);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const handleSelectImage = (e) => {\n    const [file] = e.target.files;\n    if (file) {\n      const reader = new FileReader();\n      const { current } = selectedImageRef;\n      current.file = file;\n      reader.onload = (e) => {\n        current.src = e.target.result;\n      };\n      reader.readAsDataURL(file);\n      setSelectedFile(file);\n    }\n  };\n\n  const handleClassifyImage = async () => {\n    setIsClassificationOccuring(true);\n    await performImageClassification();\n  };\n\n  const getTensorFromRawImage = (rawImage) => {\n    const image = tf.browser.fromPixels(rawImage);\n    const normalized = image\n      .toFloat()\n      .mul(2 / 255)\n      .add(-1);\n    let resized = tf.image.resizeBilinear(normalized, [224, 224], true);\n    return resized.reshape([-1, 224, 224, 3]);\n  };\n\n  const classify = (tensor, returnAmount, classes) => {\n    const values = tf.tidy(() => {\n      const softmax = tensor.slice([0, 1], [-1, 1000]).softmax();\n      return softmax.dataSync();\n    });\n\n    const valuesWithIndices = [];\n    values.forEach((val, i) => {\n      valuesWithIndices.push({ value: val, index: i });\n    });\n\n    return valuesWithIndices\n      .sort((a, b) => b.value - a.value)\n      .filter((_, i) => i < returnAmount)\n      .map(({ value, index }) => ({\n        className: classes[index],\n        probability: value,\n      }));\n  };\n\n  const performImageClassification = async () => {\n    const tensor = getTensorFromRawImage(selectedImageRef.current);\n    const result = await model.predict(tensor);\n    const imageNetClasses = machineLearningService.getImageNetClasses();\n    const prediction = classify(result, 1, imageNetClasses);\n\n    tensor.dispose();\n    result.dispose();\n\n    setClassificationText(prediction[0].className);\n    setClassificationProbabilityText(prediction[0].probability);\n    setIsClassificationOccuring(false);\n  };\n\n  const ClassificationResult = () => {\n    if (!isClassificationOccuring && classificationText.length > 0) {\n      return (\n        <Card className=\"card white-bg-color bl-1 bb-1\">\n          <CardContent>\n            <p>\n              <span className=\"text-bold\">Classification:</span> {classificationText}\n            </p>\n            <p>\n              <span className=\"text-bold\">Probability:</span> {classificationProbabilityText}\n            </p>\n          </CardContent>\n        </Card>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12} className=\"contentpanel-site\">\n        <h3>{locData.classifier}</h3>\n        <p>\n          {locData.classifierinstructions}{' '}\n          <Button\n            className=\"ml-2\"\n            href={modelUrl}\n            color=\"primary\"\n            variant=\"outlined\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n\t\t\t\t\t\tView Model\n          </Button>\n        </p>\n        <Grid container spacing={0}>\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            <Card className=\"card white-bg-color bl-1 bb-1\">\n              <CardContent>\n                <input\n                  style={{ display: 'none' }}\n                  accept=\"image/jpeg\"\n                  multiple={false}\n                  id=\"faceImage\"\n                  type=\"file\"\n                  onChange={handleSelectImage}\n                />\n                <Tooltip title=\"Select Image\">\n                  <label htmlFor=\"faceImage\">\n                    <IconButton color=\"primary\" aria-label=\"upload image\" component=\"span\">\n                      <PublishSharpIcon fontSize=\"large\" />\n                    </IconButton>\n                  </label>\n                </Tooltip>\n                <label>{selectedFile ? selectedFile.name : 'Select Image'}</label>. . .\n                <DownloadFileButton\n                  display={true}\n                  text=\"Download Bee Image\"\n                  filePath=\"images/bee.jpg\"\n                />\n                <DownloadFileButton\n                  display={true}\n                  text=\"Download Hot Dog Image\"\n                  filePath=\"images/hotdog.jpg\"\n                />\n                <DownloadFileButton\n                  display={true}\n                  text=\"Download strawberry Image\"\n                  filePath=\"images/strawberry.jpg\"\n                />\n              </CardContent>\n              <CardActions>\n                {selectedFile ? (\n                  <Button color=\"primary\" onClick={() => handleClassifyImage()}>\n\t\t\t\t\t\t\t\t\t\tPerform Classification\n                  </Button>\n                ) : (\n                  <></>\n                )}\n                <LoadingIndicator display={isClassificationOccuring} size={40} />\n              </CardActions>\n            </Card>\n            <ClassificationResult />\n          </Grid>\n          <Grid item xs={12} md={6} lg={6} xl={6}>\n            <Box display=\"flex\" justifyContent=\"center\">\n              <img\n                className=\"mt-2\"\n                ref={selectedImageRef}\n                src={selectedFile}\n                style={{\n                  width: '50%',\n                  visibility: selectedFile != null ? 'visible' : 'hidden',\n                }}\n                alt=\"Selected file to analyze\"\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}