{"version":3,"sources":["pages/Sentiment.js"],"names":["Sentiment","useState","locData","setLocData","metadata","setMetadata","model","setModel","sentimentInputText","setSentimentInputText","setSentimentParsedText","sentimentScore","setSentimentScore","setSequenceText","setPaddedSequenceText","machineLearningService","MachineLearningService","localizationService","LocalizationService","url","a","tf","console","log","fetch","metadataJson","json","useEffect","locCode","getUserLocale","getLocalizedTextSet","locDataLoaded","loadLocalization","then","loadModel","loadMetadata","container","spacing","item","xs","className","sentiment","sentimentinstructions","href","color","variant","target","rel","md","lg","xl","label","onChange","e","value","multiline","rows","style","width","onClick","text","sequence","trim","toLowerCase","replace","split","map","word","wordIndex","word_index","index_from","vocabulary_size","paddedSequence","padSequences","max_len","tensor2DMatrix","predictionOutput","predict","score","dataSync","dispose","toString","getSentimentScore","fontSize"],"mappings":"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","file":"static/js/8.d02bc00d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport MoodIcon from '@material-ui/icons/Mood';\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\nimport { padSequences } from 'utils';\n\nexport default function Sentiment() {\n\tconst [locData, setLocData] = useState({});\n\tconst [metadata, setMetadata] = useState();\n\tconst [model, setModel] = useState();\n\tconst [sentimentInputText, setSentimentInputText] = useState('');\n\tconst [sentimentParsedText, setSentimentParsedText] = useState('');\n\tconst [sentimentScore, setSentimentScore] = useState('');\n\tconst [sequenceText, setSequenceText] = useState('');\n\tconst [paddedSequenceText, setPaddedSequenceText] = useState('');\n\n\tconst machineLearningService = MachineLearningService();\n\tconst localizationService = LocalizationService();\n\n\tconst OOV_INDEX = 2;\n\tconst url = {\n\t\tmodel: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\n\t\tmetadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json',\n\t};\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t['sentiment', 'sentimentdescription', 'sentimentinstructions', 'moreinfo'],\n\t\t\t\tlocCode\n\t\t\t);\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\tuseEffect(() => {\n\t\ttf.ready().then(() => {\n\t\t\tloadModel(url);\n\t\t\tloadMetadata(url);\n\t\t});\n\t}, []);\n\n\tasync function loadModel(url) {\n\t\ttry {\n\t\t\tconst model = await tf.loadLayersModel(url.model);\n\t\t\tsetModel(model);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tasync function loadMetadata(url) {\n\t\ttry {\n\t\t\tconst metadataJson = await fetch(url.metadata);\n\t\t\tconst metadata = await metadataJson.json();\n\t\t\tsetMetadata(metadata);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tconst getSentimentScore = (text) => {\n\t\tconst sentimentParsedText = text\n\t\t\t.trim()\n\t\t\t.toLowerCase()\n\t\t\t.replace(/(\\.|\\,|\\!)/g, '')\n\t\t\t.split(' ');\n\t\tconst sequence = sentimentParsedText.map((word) => {\n\t\t\tlet wordIndex = metadata.word_index[word] + metadata.index_from;\n\t\t\tif (wordIndex > metadata.vocabulary_size) {\n\t\t\t\twordIndex = OOV_INDEX;\n\t\t\t}\n\t\t\treturn wordIndex;\n\t\t});\n\n\t\tconst paddedSequence = machineLearningService.padSequences([sequence], metadata.max_len);\n\t\tconst tensor2DMatrix = tf.tensor2d(paddedSequence, [1, metadata.max_len]);\n\t\tconst predictionOutput = model.predict(tensor2DMatrix);\n\t\tconst score = predictionOutput.dataSync()[0];\n\n\t\tpredictionOutput.dispose();\n\n\t\tsetSequenceText(sequence);\n\t\tsetPaddedSequenceText(paddedSequence);\n\t\tsetSentimentParsedText(tensor2DMatrix.toString());\n\t\tsetSentimentScore(score);\n\n\t\treturn score;\n\t};\n\n\treturn (\n\t\t<Grid container spacing={0}>\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\n\t\t\t\t<h3>{locData.sentiment}</h3>\n\t\t\t\t<p>{locData.sentimentinstructions}</p>\n\t\t\t\t<p>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\thref={url.model}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tModel Link\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\thref={url.metadata}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tModel Metadata\n\t\t\t\t\t</Button>\n\t\t\t\t</p>\n\t\t\t\t<Grid container spacing={0}>\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tlabel=\"Type your text here\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => setSentimentInputText(e.target.value)}\n\t\t\t\t\t\t\t\t\tvalue={sentimentInputText}\n\t\t\t\t\t\t\t\t\tmultiline\n\t\t\t\t\t\t\t\t\trows={3}\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t{sentimentInputText !== '' ? (\n\t\t\t\t\t\t\t\t\t<Button color=\"secondary\" onClick={() => getSentimentScore(sentimentInputText)}>\n\t\t\t\t\t\t\t\t\t\tView Sentiment\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t{sentimentScore !== '' ? (\n\t\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-bold\">Score</span> (1 = Positive, 0 = Negative)\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>{sentimentScore}</p>\n\t\t\t\t\t\t\t\t\t{sentimentScore > 0.6 ? (\n\t\t\t\t\t\t\t\t\t\t<MoodIcon className=\"success-color\" style={{ fontSize: 40 }} />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<MoodBadIcon className=\"fail-color\" style={{ fontSize: 40 }} />\n\t\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t\t{1 == 1 ? (\n\t\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-bold\">Padded Sequence Text: </p>\n\t\t\t\t\t\t\t\t\t\t\t<p>{sequenceText}</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-bold\">Sequence Text:</p>\n\t\t\t\t\t\t\t\t\t\t\t<p>{paddedSequenceText}</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-bold\">Tensflow Input:</p>\n\t\t\t\t\t\t\t\t\t\t\t<p>{sentimentParsedText}</p>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n"],"sourceRoot":""}