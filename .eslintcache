[{"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\theming.js":"1","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\Application.js":"2","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\utils.js":"3","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\ErrorHandler.js":"4","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\routes.js":"5","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Application\\Navigation.js":"6","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\About.js":"7","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\Home.js":"8","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Shared\\LoadingIndicator.js":"9","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Application\\AppTitle.js":"10","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Application\\LanguageSelection.js":"11","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\services\\LocalizationService.js":"12","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Shared\\Notifications.js":"13","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Home\\GetStartedMessage.js":"14","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\index.js":"15","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\Sentiment.js":"16","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\Classifier.js":"17","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\ObjectDetection.js":"18","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\services\\MachineLearningService.js":"19"},{"size":2696,"mtime":1611097785327,"results":"20","hashOfConfig":"21"},{"size":836,"mtime":1611097748800,"results":"22","hashOfConfig":"21"},{"size":782,"mtime":1611097777121,"results":"23","hashOfConfig":"21"},{"size":535,"mtime":1590521953940,"results":"24","hashOfConfig":"21"},{"size":934,"mtime":1611098172252,"results":"25","hashOfConfig":"21"},{"size":4741,"mtime":1611164036504,"results":"26","hashOfConfig":"21"},{"size":3070,"mtime":1611097727567,"results":"27","hashOfConfig":"21"},{"size":3256,"mtime":1611098287458,"results":"28","hashOfConfig":"21"},{"size":609,"mtime":1591236971747,"results":"29","hashOfConfig":"21"},{"size":684,"mtime":1611163732146,"results":"30","hashOfConfig":"21"},{"size":1421,"mtime":1594505555681,"results":"31","hashOfConfig":"21"},{"size":2218,"mtime":1611087263732,"results":"32","hashOfConfig":"21"},{"size":2970,"mtime":1590945184743,"results":"33","hashOfConfig":"21"},{"size":398,"mtime":1590521949194,"results":"34","hashOfConfig":"21"},{"size":668,"mtime":1611097751055,"results":"35","hashOfConfig":"21"},{"size":5516,"mtime":1611097736573,"results":"36","hashOfConfig":"21"},{"size":6630,"mtime":1611163281170,"results":"37","hashOfConfig":"21"},{"size":6397,"mtime":1611184546143,"results":"38","hashOfConfig":"21"},{"size":39121,"mtime":1611184568643,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1t0yhme",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"87"},"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\theming.js",[],["88","89"],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\Application.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\utils.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\ErrorHandler.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\routes.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Application\\Navigation.js",["90"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n// material-ui utils\nimport { makeStyles } from '@material-ui/core/styles';\nimport withWidth from '@material-ui/core/withWidth';\n// material-ui Components\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n// material-ui Icons\nimport Home from '@material-ui/icons/Home';\nimport Info from '@material-ui/icons/Info';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MoodIcon from '@material-ui/icons/Mood';\nimport ArtTrackIcon from '@material-ui/icons/ArtTrack';\nimport ImageSearchIcon from '@material-ui/icons/ImageSearch';\n// Services\nimport LocalizationService from 'services/LocalizationService';\n// Components\nimport AppTitle from 'components/Application/AppTitle';\nimport LanguageSelection from 'components/Application/LanguageSelection';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t},\n\tappBar: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t},\n\tappTitle: {\n\t\tflexGrow: 1,\n\t},\n\tsideMenuDrawer: {\n\t\ttop: '65px',\n\t\twidth: drawerWidth,\n\t\theight: '100%',\n\t\tflexShrink: 0,\n\t},\n\tsideMenuDrawerPaper: {\n\t\twidth: drawerWidth,\n\t},\n\tsideMenuList: {\n\t\tpadding: 10,\n\t\twidth: drawerWidth + 'px',\n\t},\n\tsideMenuListItem: {\n\t\tpaddingLeft: 10,\n\t},\n}));\n\nfunction Navigation(props) {\n\tconst [locData, setLocData] = useState({});\n\tconst [openNavigation, setOpenNavigation] = useState(false);\n\n\tconst classes = useStyles();\n\n\tconst localizationService = LocalizationService();\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t['apptitle', 'sentiment', 'classifier', 'objectdetection', 'home', 'contact', 'about', 'cancel'],\n\t\t\t\tlocCode\n\t\t\t);\n\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\tconst toggleDrawerOpen = () => {\n\t\tsetOpenNavigation(!openNavigation);\n\t};\n\n\tconst closeDrawer = () => {\n\t\tsetOpenNavigation(false);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<AppBar position=\"static\" className={classes.appBar}>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tonClick={() => toggleDrawerOpen()}\n\t\t\t\t\t\tclassName={classes.menuButton}\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"menu\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<AppTitle locData={locData} />\n\t\t\t\t\t<LanguageSelection localizationService={localizationService} />\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<Drawer\n\t\t\t\tanchor=\"left\"\n\t\t\t\tvariant=\"persistent\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\topen={openNavigation}\n\t\t\t\tclassName={classes.sideMenuDrawer}\n\t\t\t\tclasses={{ paper: classes.sideMenuDrawerPaper }}\n\t\t\t>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\tonClick={closeDrawer}\n\t\t\t\t\t\tclassName={classes.menuButton}\n\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\taria-label=\"menu\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Toolbar>\n\t\t\t\t<List className={classes.sideMenuList}>\n\t\t\t\t\t<ListItem button className={classes.sideMenuListItem} onClick={closeDrawer} component={Link} to=\"/\">\n\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t<ListItemText primary={locData.home} />\n\t\t\t\t\t</ListItem>\n\t\t\t\t\t<ListItem\n\t\t\t\t\t\tbutton\n\t\t\t\t\t\tclassName={classes.sideMenuListItem}\n\t\t\t\t\t\tonClick={closeDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto=\"/sentiment\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t<MoodIcon />\n\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t<ListItemText primary={locData.sentiment} />\n\t\t\t\t\t</ListItem>\n\t\t\t\t\t<ListItem\n\t\t\t\t\t\tbutton\n\t\t\t\t\t\tclassName={classes.sideMenuListItem}\n\t\t\t\t\t\tonClick={closeDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto=\"/classifier\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t<ArtTrackIcon />\n\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t<ListItemText primary={locData.classifier} />\n\t\t\t\t\t</ListItem>\n\t\t\t\t\t<ListItem\n\t\t\t\t\t\tbutton\n\t\t\t\t\t\tclassName={classes.sideMenuListItem}\n\t\t\t\t\t\tonClick={closeDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto=\"/objectdetection\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t<ImageSearchIcon />\n\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t<ListItemText primary={locData.objectdetection} />\n\t\t\t\t\t</ListItem>\n\t\t\t\t\t<ListItem\n\t\t\t\t\t\tbutton\n\t\t\t\t\t\tclassName={classes.sideMenuListItem}\n\t\t\t\t\t\tonClick={closeDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto=\"/about\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t<Info />\n\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t<ListItemText primary={locData.about} />\n\t\t\t\t\t</ListItem>\n\t\t\t\t</List>\n\t\t\t</Drawer>\n\t\t</div>\n\t);\n}\n\nexport default withWidth()(Navigation);\n","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\About.js",["91"],"import React, { useEffect, useState } from 'react';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\n// Services\nimport LocalizationService from 'services/LocalizationService';\n\nexport default function About() {\n\tconst [locData, setLocData] = useState({});\n\n\tconst localizationService = LocalizationService();\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t[\n\t\t\t\t\t'about',\n\t\t\t\t\t'aboutdescription',\n\t\t\t\t\t'technology',\n\t\t\t\t\t'technologydescription',\n\t\t\t\t\t'reactjs',\n\t\t\t\t\t'reactjsdescription',\n\t\t\t\t\t'materialui',\n\t\t\t\t\t'materialuidescription',\n\t\t\t\t\t'tensorflow',\n\t\t\t\t\t'tensorflowdescription',\n\t\t\t\t\t'moreinfo',\n\t\t\t\t],\n\t\t\t\tlocCode\n\t\t\t);\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\treturn (\n\t\t<Grid container spacing={0}>\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\n\t\t\t\t<h3>{locData.about}</h3>\n\n\t\t\t\t<p>{locData.aboutdescription}</p>\n\n\t\t\t\t<h4>{locData.technology}</h4>\n\n\t\t\t\t<p>{locData.technologydescription}</p>\n\n\t\t\t\t<Grid container spacing={0}>\n\t\t\t\t\t<Grid item xs={12} md={3} lg={3} xl={3}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<h4 className=\"card-title\">{locData.reactjs}</h4>\n\t\t\t\t\t\t\t\t<p className=\"card-text\">{locData.reactjsdescription}</p>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\thref=\"https://facebook.github.io/react/index.html\"\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{locData.moreinfo}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={3} lg={3} xl={3}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<h4 className=\"card-title\">{locData.materialui}</h4>\n\t\t\t\t\t\t\t\t<p className=\"card-text\">{locData.materialuidescription}</p>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\thref=\"https://material-ui.com/\"\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{locData.moreinfo}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={3} lg={3} xl={3}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<h4 className=\"card-title\">{locData.tensorflow}</h4>\n\t\t\t\t\t\t\t\t<p className=\"card-text\">{locData.tensorflowdescription}</p>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\thref=\"https://www.tensorflow.org/overview\"\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{locData.moreinfo}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\Home.js",["92"],"import React, { useEffect, useState } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\n// material-ui\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\n// services\r\nimport LocalizationService from 'services/LocalizationService';\r\n// components\r\nimport GetStartedMessage from 'components/Home/GetStartedMessage';\r\n\r\nfunction Home() {\r\n\tconst [locData, setLocData] = useState({});\r\n\r\n\tconst localizationService = LocalizationService();\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function loadLocalization() {\r\n\t\t\tconst locCode = localizationService.getUserLocale();\r\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\r\n\t\t\t\t[\r\n\t\t\t\t\t'welcome',\r\n\t\t\t\t\t'homepagewelcome',\r\n\t\t\t\t\t'getstartedmessage',\r\n\t\t\t\t\t'sentiment',\r\n\t\t\t\t\t'sentimentdescription',\r\n\t\t\t\t\t'seeexample',\r\n\t\t\t\t\t'classifier',\r\n\t\t\t\t\t'classifierdescription',\r\n\t\t\t\t\t'objectdetection',\r\n\t\t\t\t\t'objectdetectiondescription',\r\n\t\t\t\t],\r\n\t\t\t\tlocCode\r\n\t\t\t);\r\n\t\t\tsetLocData(locDataLoaded);\r\n\t\t}\r\n\t\tloadLocalization();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Grid container spacing={0}>\r\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\r\n\t\t\t\t<h2>{locData.homepagewelcome}</h2>\r\n\r\n\t\t\t\t<Grid container spacing={0}>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<GetStartedMessage locData={locData} displayGetStarted={true} />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} className=\"pt-1\">\r\n\t\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t\t<Grid item xs={12} className=\"pt-1 pb-1\">\r\n\t\t\t\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t\t\t\t\t<h4 className=\"card-title\">{locData.sentiment}</h4>\r\n\t\t\t\t\t\t\t\t\t\t<p>{locData.sentimentdescription}</p>\r\n\t\t\t\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t\t\t\t\t<CardActions>\r\n\t\t\t\t\t\t\t\t\t\t<Button className=\"mt-3\" color=\"secondary\" component={Link} to=\"/sentiment\">\r\n\t\t\t\t\t\t\t\t\t\t\t{locData.seeexample}\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</CardActions>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t\t<Grid item xs={12} className=\"pt-1\">\r\n\t\t\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\r\n\t\t\t\t\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t\t\t\t\t<h4 className=\"card-title\">{locData.classifier}</h4>\r\n\t\t\t\t\t\t\t\t\t\t<p>{locData.classifierdescription}</p>\r\n\t\t\t\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t\t\t\t\t<CardActions>\r\n\t\t\t\t\t\t\t\t\t\t<Button className=\"mt-3\" color=\"secondary\" component={Link} to=\"/classifier\">\r\n\t\t\t\t\t\t\t\t\t\t\t{locData.seeexample}\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</CardActions>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t\t<Grid item xs={12} className=\"pt-1\">\r\n\t\t\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\r\n\t\t\t\t\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t\t\t\t\t<h4 className=\"card-title\">{locData.objectdetection}</h4>\r\n\t\t\t\t\t\t\t\t\t\t<p>{locData.objectdetectiondescription}</p>\r\n\t\t\t\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t\t\t\t\t<CardActions>\r\n\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-3\"\r\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\t\t\t\t\t\tcomponent={Link}\r\n\t\t\t\t\t\t\t\t\t\t\tto=\"/objectdetection\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{locData.seeexample}\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</CardActions>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n}\r\n\r\nexport default withRouter(Home);\r\n","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Shared\\LoadingIndicator.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Application\\AppTitle.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Application\\LanguageSelection.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\services\\LocalizationService.js",["93"],"﻿const supportedLanguageMap = {\r\n\tenUS: 'English',\r\n\tzhCN: 'Chinese',\r\n\tesES: 'Spanish',\r\n};\r\n\r\nconst LocalizationService = () => {\r\n\tconst defaultLocale = 'enUS';\r\n\r\n\tconst getLocales = () => {\r\n\t\treturn supportedLanguageMap;\r\n\t};\r\n\r\n\tconst getUserLocale = () => {\r\n\t\tlet locale = window.localStorage.getItem('locale');\r\n\t\tif (locale) {\r\n\t\t\treturn locale;\r\n\t\t}\r\n\t\treturn defaultLocale;\r\n\t};\r\n\r\n\tconst setUserLocale = (loc) => {\r\n\t\twindow.localStorage.setItem('locale', loc);\r\n\t};\r\n\r\n\tconst getCurrentLocale = () => {\r\n\t\t// OPTIONAL ADDITION: lookup current user local via browser and populate found and return this\r\n\t\t// https://github.com/i18next/i18next-browser-languageDetector/blob/master/src/browserLookups/navigator.js\r\n\t\t// see also: https://github.com/i18next/i18next-browser-languageDetector/blob/master/src/browserLookups/querystring.js\r\n\t\t// or https://github.com/i18next/i18next-browser-languageDetector/blob/master/src/browserLookups/path.js\r\n\t\tlet found = [];\r\n\t\tif (found.length === 0) {\r\n\t\t\treturn getUserLocale();\r\n\t\t}\r\n\t\treturn found[0];\r\n\t};\r\n\r\n\tconst getLocalizedTextSet = async (keys, locale) => {\r\n\t\t// async import the locale file for given locale\r\n\t\t// and extract the set of localized text values for given keys\r\n\t\tlet textSet = {};\r\n\t\tconst localizedData = await getLocalizedData(locale);\r\n\t\tif (localizedData) {\r\n\t\t\tlet localizedTextSet = localizedData;\r\n\t\t\tconst keysLocalizedTextSet = Object.keys(localizedTextSet);\r\n\t\t\tfor (const desiredKey of keys) {\r\n\t\t\t\tfor (const key of keysLocalizedTextSet) {\r\n\t\t\t\t\tif (desiredKey === key) {\r\n\t\t\t\t\t\ttextSet[key] = localizedTextSet[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn textSet;\r\n\t};\r\n\r\n\tconst getLocalizedData = async (localeCode) => {\r\n\t\t// get data from folder in public by locale using fetch\r\n\t\tconst localizedDataFilePath = process.env.PUBLIC_URL + `/i18n/${localeCode}.json`;\r\n\t\treturn fetch(localizedDataFilePath)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tlet msg = 'Error Reading data ' + err;\r\n\t\t\t\tconsole.log(msg);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn {\r\n\t\tsetUserLocale,\r\n\t\tgetUserLocale,\r\n\t\tgetLocales,\r\n\t\tgetCurrentLocale,\r\n\t\tgetLocalizedTextSet,\r\n\t};\r\n};\r\n\r\nexport default LocalizationService;\r\n","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Shared\\Notifications.js",[],["94","95"],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\components\\Home\\GetStartedMessage.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\index.js",[],"E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\Sentiment.js",["96","97","98","99","100","101"],"import React, { useEffect, useState } from 'react';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport MoodIcon from '@material-ui/icons/Mood';\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\nimport { padSequences } from 'utils';\n\nexport default function Sentiment() {\n\tconst [locData, setLocData] = useState({});\n\tconst [metadata, setMetadata] = useState();\n\tconst [model, setModel] = useState();\n\tconst [sentimentInputText, setSentimentInputText] = useState('');\n\tconst [sentimentParsedText, setSentimentParsedText] = useState('');\n\tconst [sentimentScore, setSentimentScore] = useState('');\n\tconst [sequenceText, setSequenceText] = useState('');\n\tconst [paddedSequenceText, setPaddedSequenceText] = useState('');\n\n\tconst machineLearningService = MachineLearningService();\n\tconst localizationService = LocalizationService();\n\n\tconst OOV_INDEX = 2;\n\tconst url = {\n\t\tmodel: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\n\t\tmetadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json',\n\t};\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t['sentiment', 'sentimentdescription', 'sentimentinstructions', 'moreinfo'],\n\t\t\t\tlocCode\n\t\t\t);\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\tuseEffect(() => {\n\t\ttf.ready().then(() => {\n\t\t\tloadModel(url);\n\t\t\tloadMetadata(url);\n\t\t});\n\t}, []);\n\n\tasync function loadModel(url) {\n\t\ttry {\n\t\t\tconst model = await tf.loadLayersModel(url.model);\n\t\t\tsetModel(model);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tasync function loadMetadata(url) {\n\t\ttry {\n\t\t\tconst metadataJson = await fetch(url.metadata);\n\t\t\tconst metadata = await metadataJson.json();\n\t\t\tsetMetadata(metadata);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tconst getSentimentScore = (text) => {\n\t\tconst sentimentParsedText = text\n\t\t\t.trim()\n\t\t\t.toLowerCase()\n\t\t\t.replace(/(\\.|\\,|\\!)/g, '')\n\t\t\t.split(' ');\n\t\tconst sequence = sentimentParsedText.map((word) => {\n\t\t\tlet wordIndex = metadata.word_index[word] + metadata.index_from;\n\t\t\tif (wordIndex > metadata.vocabulary_size) {\n\t\t\t\twordIndex = OOV_INDEX;\n\t\t\t}\n\t\t\treturn wordIndex;\n\t\t});\n\n\t\tconst paddedSequence = machineLearningService.padSequences([sequence], metadata.max_len);\n\t\tconst tensor2DMatrix = tf.tensor2d(paddedSequence, [1, metadata.max_len]);\n\t\tconst predictionOutput = model.predict(tensor2DMatrix);\n\t\tconst score = predictionOutput.dataSync()[0];\n\n\t\tpredictionOutput.dispose();\n\n\t\tsetSequenceText(sequence);\n\t\tsetPaddedSequenceText(paddedSequence);\n\t\tsetSentimentParsedText(tensor2DMatrix.toString());\n\t\tsetSentimentScore(score);\n\n\t\treturn score;\n\t};\n\n\treturn (\n\t\t<Grid container spacing={0}>\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\n\t\t\t\t<h3>{locData.sentiment}</h3>\n\t\t\t\t<p>{locData.sentimentinstructions}</p>\n\t\t\t\t<p>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\thref={url.model}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tModel Link\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\thref={url.metadata}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tModel Metadata\n\t\t\t\t\t</Button>\n\t\t\t\t</p>\n\t\t\t\t<Grid container spacing={0}>\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tlabel=\"Type your text here\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => setSentimentInputText(e.target.value)}\n\t\t\t\t\t\t\t\t\tvalue={sentimentInputText}\n\t\t\t\t\t\t\t\t\tmultiline\n\t\t\t\t\t\t\t\t\trows={4}\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t{sentimentInputText !== '' ? (\n\t\t\t\t\t\t\t\t\t<Button color=\"secondary\" onClick={() => getSentimentScore(sentimentInputText)}>\n\t\t\t\t\t\t\t\t\t\tView Sentiment\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t{sentimentScore !== '' ? (\n\t\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<p className=\"text-bold\">Score</p>\n\t\t\t\t\t\t\t\t\t<p>{sentimentScore}</p>\n\t\t\t\t\t\t\t\t\t{sentimentScore > 0.6 ? (\n\t\t\t\t\t\t\t\t\t\t<MoodIcon className=\"success-color\" style={{ fontSize: 40 }} />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<MoodBadIcon className=\"fail-color\" style={{ fontSize: 40 }} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<p>1 = Positive, 0 = Negative</p>\n\t\t\t\t\t\t\t\t\t{1 == 1 ? (\n\t\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-bold\">Padded Sequence Text: </p>\n\t\t\t\t\t\t\t\t\t\t\t<p>{sequenceText}</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-bold\">Sequence Text:</p>\n\t\t\t\t\t\t\t\t\t\t\t<p>{paddedSequenceText}</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-bold\">Tensflow Input:</p>\n\t\t\t\t\t\t\t\t\t\t\t<p>{sentimentParsedText}</p>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\Classifier.js",["102"],"import React, { useEffect, useState } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PublishSharpIcon from '@material-ui/icons/PublishSharp';\n// Components\nimport LoadingIndicator from 'components/Shared/LoadingIndicator';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\nexport default function Classifier() {\n\tconst [locData, setLocData] = useState({});\n\tconst [selectedFile, setSelectedFile] = useState(null);\n\tconst [model, setModel] = useState();\n\tconst [classificationText, setClassificationText] = useState('');\n\tconst [classificationProbabilityText, setClassificationProbabilityText] = useState('');\n\tconst [isClassificationOccuring, setIsClassificationOccuring] = useState(false);\n\n\tconst selectedImageRef = React.useRef(null);\n\n\tconst machineLearningService = MachineLearningService();\n\tconst localizationService = LocalizationService();\n\n\tconst modelUrl = 'https://tfhub.dev/google/tfjs-model/imagenet/mobilenet_v2_140_224/classification/3/default/1';\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t['classifier', 'classifierdescription', 'classifierinstructions', 'moreinfo'],\n\t\t\t\tlocCode\n\t\t\t);\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\tuseEffect(() => {\n\t\ttf.ready().then(() => {\n\t\t\tloadModel(modelUrl);\n\t\t});\n\t}, [modelUrl]);\n\n\tasync function loadModel(modelUrlToLoad) {\n\t\ttry {\n\t\t\tconst model = await tf.loadGraphModel(modelUrlToLoad, { fromTFHub: true });\n\t\t\tsetModel(model);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tconst handleSelectImage = (e) => {\n\t\tconst [file] = e.target.files;\n\t\tif (file) {\n\t\t\tconst reader = new FileReader();\n\t\t\tconst { current } = selectedImageRef;\n\t\t\tcurrent.file = file;\n\t\t\treader.onload = (e) => {\n\t\t\t\tcurrent.src = e.target.result;\n\t\t\t};\n\t\t\treader.readAsDataURL(file);\n\t\t\tsetSelectedFile(file);\n\t\t}\n\t};\n\n\tconst handleClassifyImage = async () => {\n\t\tsetIsClassificationOccuring(true);\n\t\tawait performImageClassification();\n\t};\n\n\tconst getTensorFromRawImage = (rawImage) => {\n\t\tconst image = tf.browser.fromPixels(rawImage);\n\t\tconst normalized = image\n\t\t\t.toFloat()\n\t\t\t.mul(2 / 255)\n\t\t\t.add(-1);\n\t\tlet resized = tf.image.resizeBilinear(normalized, [224, 224], true);\n\t\treturn resized.reshape([-1, 224, 224, 3]);\n\t};\n\n\tconst classify = (tensor, returnAmount, classes) => {\n\t\tconst values = tf.tidy(() => {\n\t\t\tconst softmax = tensor.slice([0, 1], [-1, 1000]).softmax();\n\t\t\treturn softmax.dataSync();\n\t\t});\n\n\t\tconst valuesWithIndices = [];\n\t\tvalues.forEach((val, i) => {\n\t\t\tvaluesWithIndices.push({ value: val, index: i });\n\t\t});\n\n\t\treturn valuesWithIndices\n\t\t\t.sort((a, b) => b.value - a.value)\n\t\t\t.filter((_, i) => i < returnAmount)\n\t\t\t.map(({ value, index }) => ({\n\t\t\t\tclassName: classes[index],\n\t\t\t\tprobability: value,\n\t\t\t}));\n\t};\n\n\tconst performImageClassification = async () => {\n\t\tconst tensor = getTensorFromRawImage(selectedImageRef.current);\n\t\tconst result = await model.predict(tensor);\n\t\tconst imageNetClasses = machineLearningService.getImageNetClasses();\n\t\tconst prediction = classify(result, 1, imageNetClasses);\n\n\t\ttensor.dispose();\n\t\tresult.dispose();\n\n\t\tsetClassificationText(prediction[0].className);\n\t\tsetClassificationProbabilityText(prediction[0].probability);\n\t\tsetIsClassificationOccuring(false);\n\t};\n\n\tconst ClassificationResult = () => {\n\t\tif (!isClassificationOccuring && classificationText.length > 0) {\n\t\t\treturn (\n\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<span className=\"text-bold\">Classification:</span> {classificationText}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<span className=\"text-bold\">Probability:</span> {classificationProbabilityText}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <></>;\n\t\t}\n\t};\n\n\tconst downloadFile = (filePath) => {\n\t\twindow.location.href = window.location.origin + '/' + filePath;\n\t};\n\n\tconst DownloadButton = ({ text, filePath, display }) => {\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tclassName=\"ml-2\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tvariant=\"outlined\"\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\tstyle={{\n\t\t\t\t\tvisibility: display ? 'visible' : 'hidden',\n\t\t\t\t}}\n\t\t\t\tonClick={() => downloadFile(filePath)}\n\t\t\t>\n\t\t\t\t{text}\n\t\t\t</Button>\n\t\t);\n\t};\n\n\treturn (\n\t\t<Grid container spacing={0}>\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\n\t\t\t\t<h3>{locData.classifier}</h3>\n\t\t\t\t<p>\n\t\t\t\t\t{locData.classifierinstructions}{' '}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\thref={modelUrl}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tView Model\n\t\t\t\t\t</Button>\n\t\t\t\t</p>\n\t\t\t\t<Grid container spacing={0}>\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\t\t\t\taccept=\"image/jpeg\"\n\t\t\t\t\t\t\t\t\tmultiple={false}\n\t\t\t\t\t\t\t\t\tid=\"faceImage\"\n\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\tonChange={handleSelectImage}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Tooltip title=\"Select Image\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"faceImage\">\n\t\t\t\t\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"upload image\" component=\"span\">\n\t\t\t\t\t\t\t\t\t\t\t<PublishSharpIcon fontSize=\"large\" />\n\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t<label>{selectedFile ? selectedFile.name : 'Select Image'}</label>. . .\n\t\t\t\t\t\t\t\t<DownloadButton display={false} text=\"Bee\" filePath=\"images/bee.jpg\" />\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t{selectedFile ? (\n\t\t\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => handleClassifyImage()}>\n\t\t\t\t\t\t\t\t\t\tPerform Classification\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<LoadingIndicator display={isClassificationOccuring} size={40} />\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<ClassificationResult />\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"mt-2\"\n\t\t\t\t\t\t\tref={selectedImageRef}\n\t\t\t\t\t\t\tsrc={selectedFile}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\t\tvisibility: selectedFile != null ? 'visible' : 'hidden',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\talt=\"Selected file to analyze\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\pages\\ObjectDetection.js",["103","104","105"],"import React, { useEffect, useState, useRef } from 'react';\n// Tensorflow\nimport * as tf from '@tensorflow/tfjs';\n// material-ui\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PublishSharpIcon from '@material-ui/icons/PublishSharp';\n// Components\nimport LoadingIndicator from 'components/Shared/LoadingIndicator';\n// Services\nimport LocalizationService from 'services/LocalizationService';\nimport MachineLearningService from 'services/MachineLearningService';\n\nexport default function ObjectDetection() {\n\tconst [locData, setLocData] = useState({});\n\tconst [selectedFile, setSelectedFile] = useState(null);\n\tconst [model, setModel] = useState();\n\tconst [detectedObjects, setDetectedObjects] = useState(null);\n\tconst [objectDetectionIsOccuring, setObjectDetectionIsOccuring] = useState(false);\n\n\tconst selectedImageRef = useRef(null);\n\tconst requestFramRef = useRef(0);\n\n\tconst localizationService = LocalizationService();\n\tconst machineLearningService = MachineLearningService();\n\n\t// Example: https://react-tensorflow-example.vercel.app/objects\n\t// and page: https://github.com/joshuaellis/react-tensorflow/blob/master/example/src/containers/PageObjects/index.tsx\n\t// https://github.com/joshuaellis/react-tensorflow/blob/master/src/hooks/useObjectDetect.ts\n\tconst modelUrl = 'https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1';\n\t//const model_net = await tf.loadGraphModel(\"https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1\", { fromTFHub: true })\n\n\tuseEffect(() => {\n\t\tasync function loadLocalization() {\n\t\t\tconst locCode = localizationService.getUserLocale();\n\n\t\t\tconst locDataLoaded = await localizationService.getLocalizedTextSet(\n\t\t\t\t['objectdetection', 'objectdetectiondescription', 'objectdetectioninstructions', 'moreinfo'],\n\t\t\t\tlocCode\n\t\t\t);\n\t\t\tsetLocData(locDataLoaded);\n\t\t}\n\t\tloadLocalization();\n\t}, []);\n\n\tuseEffect(() => {\n\t\ttf.ready().then(() => {\n\t\t\tloadModel(modelUrl);\n\t\t});\n\t}, [modelUrl]);\n\n\tconst loadModel = async (modelUrlToLoad) => {\n\t\ttry {\n\t\t\tconst model = await tf.loadGraphModel(modelUrlToLoad, { fromTFHub: true });\n\t\t\t// warm up model with empty image\n\t\t\tconst zeroTensor = tf.zeros([1, 300, 300, 3], 'int32');\n\t\t\tconst result = await model.executeAsync(zeroTensor);\n\t\t\tawait Promise.all(result.map((t) => t.data()));\n\t\t\tresult.map((t) => t.dispose());\n\t\t\tzeroTensor.dispose();\n\n\t\t\tsetModel(model);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tconst handleSelectImage = (e) => {\n\t\tconst [file] = e.target.files;\n\t\tif (file) {\n\t\t\tconst reader = new FileReader();\n\t\t\tconst { current } = selectedImageRef;\n\t\t\tcurrent.file = file;\n\t\t\treader.onload = (e) => {\n\t\t\t\tcurrent.src = e.target.result;\n\t\t\t};\n\t\t\treader.readAsDataURL(file);\n\t\t\tsetSelectedFile(file);\n\t\t}\n\t};\n\n\tconst handleImageObjectDetection = async () => {\n\t\tsetObjectDetectionIsOccuring(true);\n\t\tawait performImageObjectDetection();\n\t};\n\n\tconst getTensorFromRawImage = (img) => {\n\t\tconst tensor = tf.tidy(() => {\n\t\t\tconst tens = tf.browser.fromPixels(img);\n\t\t\treturn tens.expandDims(0).cast('int32');\n\t\t});\n\t\treturn tensor;\n\t};\n\n\tconst performImageObjectDetection = async () => {\n\t\tconst tensorData = getTensorFromRawImage(selectedImageRef.current);\n\t\tconst width = selectedImageRef.current?.width ?? 0;\n\t\tconst height = selectedImageRef.current?.height ?? 0;\n\t\tconst classes = machineLearningService.getCocoSSDClasses();\n\t\tconst returns = 5;\n\t\tconst\tminConfidence = 0;\n\n\t\tconst detectedObjects = await machineLearningService.detectObjects(\n\t\t\tmodel,\n\t\t\ttensorData,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tclasses,\n\t\t\trequestFramRef,\n\t\t\treturns,\n\t\t\t\n\t\t);\n\t\tsetDetectedObjects(detectedObjects);\n\t\tsetObjectDetectionIsOccuring(false);\n\t};\n\n\tconst ObjectDetectionResult = () => {\n\t\tif (!objectDetectionIsOccuring && detectedObjects && detectedObjects.length > 0) {\n\t\t\treturn (\n\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t{detectedObjects.map((object) => (\n\t\t\t\t\t\t\t<div key={object.class}>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<span className=\"text-bold\">Classification:</span> {object.class}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<span className=\"text-bold\">Probability:</span> {object.probability}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <></>;\n\t\t}\n\t};\n\n\treturn (\n\t\t<Grid container spacing={0}>\n\t\t\t<Grid item xs={12} className=\"contentpanel-site\">\n\t\t\t\t<h3>{locData.objectdetection}</h3>\n\t\t\t\t<p>\n\t\t\t\t\t{locData.objectdetectioninstructions}{' '}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName=\"ml-2\"\n\t\t\t\t\t\thref={modelUrl}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener\"\n\t\t\t\t\t>\n\t\t\t\t\t\tView Model\n\t\t\t\t\t</Button>\n\t\t\t\t</p>\n\t\t\t\t<Grid container spacing={0}>\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<Card className=\"card white-bg-color bl-1 bb-1\">\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\t\t\t\taccept=\"image/jpeg\"\n\t\t\t\t\t\t\t\t\tmultiple={false}\n\t\t\t\t\t\t\t\t\tid=\"faceImage\"\n\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\tonChange={handleSelectImage}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Tooltip title=\"Select Image\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"faceImage\">\n\t\t\t\t\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"upload image\" component=\"span\">\n\t\t\t\t\t\t\t\t\t\t\t<PublishSharpIcon fontSize=\"large\" />\n\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t<label>{selectedFile ? selectedFile.name : 'Select Image'}</label>. . .\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t{selectedFile ? (\n\t\t\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => handleImageObjectDetection()}>\n\t\t\t\t\t\t\t\t\t\tPerform Object Detection\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<LoadingIndicator display={objectDetectionIsOccuring} size={40} />\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={6} lg={6} xl={6}>\n\t\t\t\t\t\t<ObjectDetectionResult />\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"mt-2\"\n\t\t\t\t\t\t\tref={selectedImageRef}\n\t\t\t\t\t\t\tsrc={selectedFile}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\twidth: '50%',\n\t\t\t\t\t\t\t\tvisibility: selectedFile != null ? 'visible' : 'hidden',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\talt=\"Selected file to analyze\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}\n","E:\\Data\\WorkArea\\Projects\\GitRepos\\SpinningIdeas\\machinelearning-tensorflow\\src\\services\\MachineLearningService.js",["106","107","108","109","110","111"],"﻿import * as tf from '@tensorflow/tfjs';\r\n\r\nconst PAD_INDEX = 0;\r\n\r\nconst MachineLearningService = () => {\r\n\t// Object Detection\r\n\r\n\tconst setBackend = (desired) => {\r\n\t\tconst currBackend = tf.getBackend();\r\n\t\tconst resetBackend = () => {\r\n\t\t\tvoid tf.setBackend(currBackend);\r\n\t\t};\r\n\t\ttf.setBackend(desired);\r\n\t\treturn resetBackend;\r\n\t};\r\n\r\n\tconst buildObjects = (indexes, scores, { width, height, boxes }, { classIndexes, classes }) => {\r\n\t\tconst objects = [];\r\n\t\tindexes.forEach((index, i) => {\r\n\t\t\tconst bbox = [];\r\n\t\t\tif (width && height) {\r\n\t\t\t\tfor (let j = 0; j < 4; j++) {\r\n\t\t\t\t\tbbox[j] = boxes[indexes[i] * 4 + j];\r\n\t\t\t\t}\r\n\t\t\t\tconst minY = bbox[0] * height;\r\n\t\t\t\tconst minX = bbox[1] * width;\r\n\t\t\t\tconst maxY = bbox[2] * height;\r\n\t\t\t\tconst maxX = bbox[3] * width;\r\n\t\t\t\tbbox[0] = minX;\r\n\t\t\t\tbbox[1] = minY;\r\n\t\t\t\tbbox[2] = maxX - minX;\r\n\t\t\t\tbbox[3] = maxY - minY;\r\n\t\t\t}\r\n\r\n\t\t\tconst classInd = classIndexes[index] + 1;\r\n\r\n\t\t\tif (classes) {\r\n\t\t\t\tobjects.push({\r\n\t\t\t\t\tclass: classes[classInd],\r\n\t\t\t\t\tprobability: scores[index],\r\n\t\t\t\t\tboundingBox: bbox,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tobjects.push({\r\n\t\t\t\t\tclass: classInd,\r\n\t\t\t\t\tprobability: scores[index],\r\n\t\t\t\t\tboundingBox: bbox,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn objects;\r\n\t};\r\n\r\n\tconst calcMaxScores = (scores, numBoxes, numClasses) => {\r\n\t\tconst maxes = [];\r\n\t\tconst classes = [];\r\n\t\tfor (let i = 0; i < numBoxes; i++) {\r\n\t\t\tlet max = Number.MIN_VALUE;\r\n\t\t\tlet index = -1;\r\n\t\t\tfor (let j = 0; j < numClasses; j++) {\r\n\t\t\t\tif (scores[i * numClasses + j] > max) {\r\n\t\t\t\t\tmax = scores[i * numClasses + j];\r\n\t\t\t\t\tindex = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmaxes[i] = max;\r\n\t\t\tclasses[i] = index;\r\n\t\t}\r\n\t\treturn [maxes, classes];\r\n\t};\r\n\r\n\tconst getPrediction = async (model, data, outputName) => {\r\n\t\tif (model instanceof tf.GraphModel && model?.executeAsync) {\r\n\t\t\treturn await model.executeAsync(data);\r\n\t\t} else {\r\n\t\t\tthrow new Error('model is not a graph model or does not have executeAsync function');\r\n\t\t}\r\n\t};\r\n\r\n\tconst createObjectPredictions = (width, height, classes, returns, minConfidence, res) => {\r\n\t\tlet resetBackend = null;\r\n\t\tconst [scores, boxes] = res.map((data) => {\r\n\t\t\tconst datum = data.dataSync();\r\n\t\t\tdata.dispose();\r\n\t\t\treturn datum;\r\n\t\t});\r\n\r\n\t\tconst [maxScores, classIndexes] = calcMaxScores(scores, res[0].shape[1], res[0].shape[2]);\r\n\r\n\t\tif (tf.getBackend() === 'webgl') {\r\n\t\t\tresetBackend = setBackend('cpu');\r\n\t\t}\r\n\r\n\t\tconst indexTensor = tf.tidy(() => {\r\n\t\t\tconst boxes2 = tf.tensor2d(boxes, [res[1].shape[1], res[1].shape[3]]);\r\n\t\t\treturn tf.image.nonMaxSuppression(boxes2, maxScores, returns, minConfidence, minConfidence);\r\n\t\t});\r\n\r\n\t\tconst indexes = indexTensor.dataSync();\r\n\t\tindexTensor.dispose();\r\n\r\n\t\tif (resetBackend) {\r\n\t\t\tresetBackend();\r\n\t\t}\r\n\r\n\t\treturn buildObjects(indexes, maxScores, { width, height, boxes }, { classIndexes, classes });\r\n\t};\r\n\r\n\tconst createPrediction = async (model, data, requestFramRef) => {\r\n\t\tconst predictFunc = await getPrediction(model, data);\r\n\t\treturn predictFunc;\r\n\t\t/*\r\n\t\tWhat is this doing?\r\n\t\treturn Promise.resolve(predictFunc)\r\n\t\t\t.then((prediction) => {\r\n\t\t\t\trequestFramRef.current = requestAnimationFrame(() => {\r\n\t\t\t\t\t//if (oldPrediction) {\r\n\t\t\t\t\t//\ttf.dispose(oldPrediction);\r\n\t\t\t\t\t//}\r\n\t\t\t\t\treturn prediction;\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tconsole.error(e.message);\r\n\t\t\t\t// setPredictionFault(true)\r\n\t\t\t});\r\n\t\t\t*/\r\n\t};\r\n\r\n\tconst detectObjects = async (\r\n\t\tmodel,\r\n\t\tdata,\r\n\t\twidth,\r\n\t\theight,\r\n\t\tclasses,\r\n\t\trequestFramRef,\r\n\t\treturns,\r\n\t\tminConfidence\r\n\t) => {\r\n\t\tconst prediction = await createPrediction(model, data, requestFramRef);\r\n\r\n\t\t/*\r\n\t\tconst [setDataRef, prediction] = usePrediction({\r\n\t\t\tmodelUrl,\r\n\t\t\tlayers,\r\n\t\t\t...props\r\n\t\t})\r\n\t\t*/\r\n\r\n\t\tif (typeof width !== 'number' || typeof height !== 'number') {\r\n\t\t\t// noBoxesReturningRef.current()\r\n\t\t\t// ERROR CONDITION...\r\n\t\t}\r\n\r\n\t\tif (prediction) {\r\n\t\t\t// prediction as tf.Tensor4D[]\r\n\t\t\tconst objects = createObjectPredictions(width, height, classes, returns, minConfidence, prediction);\r\n\t\t\trequestFramRef.current = requestAnimationFrame(() => {\r\n\t\t\t\t//\treturn objects;\r\n\t\t\t});\r\n\t\t\treturn objects;\r\n\t\t} else {\r\n\t\t\t// ERROR CONDITION...\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\tconst IMAGENET_CLASSES = {\r\n\t\t0: 'tench, Tinca tinca',\r\n\t\t1: 'goldfish, Carassius auratus',\r\n\t\t2: 'great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias',\r\n\t\t3: 'tiger shark, Galeocerdo cuvieri',\r\n\t\t4: 'hammerhead, hammerhead shark',\r\n\t\t5: 'electric ray, crampfish, numbfish, torpedo',\r\n\t\t6: 'stingray',\r\n\t\t7: 'cock',\r\n\t\t8: 'hen',\r\n\t\t9: 'ostrich, Struthio camelus',\r\n\t\t10: 'brambling, Fringilla montifringilla',\r\n\t\t11: 'goldfinch, Carduelis carduelis',\r\n\t\t12: 'house finch, linnet, Carpodacus mexicanus',\r\n\t\t13: 'junco, snowbird',\r\n\t\t14: 'indigo bunting, indigo finch, indigo bird, Passerina cyanea',\r\n\t\t15: 'robin, American robin, Turdus migratorius',\r\n\t\t16: 'bulbul',\r\n\t\t17: 'jay',\r\n\t\t18: 'magpie',\r\n\t\t19: 'chickadee',\r\n\t\t20: 'water ouzel, dipper',\r\n\t\t21: 'kite',\r\n\t\t22: 'bald eagle, American eagle, Haliaeetus leucocephalus',\r\n\t\t23: 'vulture',\r\n\t\t24: 'great grey owl, great gray owl, Strix nebulosa',\r\n\t\t25: 'European fire salamander, Salamandra salamandra',\r\n\t\t26: 'common newt, Triturus vulgaris',\r\n\t\t27: 'eft',\r\n\t\t28: 'spotted salamander, Ambystoma maculatum',\r\n\t\t29: 'axolotl, mud puppy, Ambystoma mexicanum',\r\n\t\t30: 'bullfrog, Rana catesbeiana',\r\n\t\t31: 'tree frog, tree-frog',\r\n\t\t32: 'tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui',\r\n\t\t33: 'loggerhead, loggerhead turtle, Caretta caretta',\r\n\t\t34: 'leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea',\r\n\t\t35: 'mud turtle',\r\n\t\t36: 'terrapin',\r\n\t\t37: 'box turtle, box tortoise',\r\n\t\t38: 'banded gecko',\r\n\t\t39: 'common iguana, iguana, Iguana iguana',\r\n\t\t40: 'American chameleon, anole, Anolis carolinensis',\r\n\t\t41: 'whiptail, whiptail lizard',\r\n\t\t42: 'agama',\r\n\t\t43: 'frilled lizard, Chlamydosaurus kingi',\r\n\t\t44: 'alligator lizard',\r\n\t\t45: 'Gila monster, Heloderma suspectum',\r\n\t\t46: 'green lizard, Lacerta viridis',\r\n\t\t47: 'African chameleon, Chamaeleo chamaeleon',\r\n\t\t48: 'Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis',\r\n\t\t49: 'African crocodile, Nile crocodile, Crocodylus niloticus',\r\n\t\t50: 'American alligator, Alligator mississipiensis',\r\n\t\t51: 'triceratops',\r\n\t\t52: 'thunder snake, worm snake, Carphophis amoenus',\r\n\t\t53: 'ringneck snake, ring-necked snake, ring snake',\r\n\t\t54: 'hognose snake, puff adder, sand viper',\r\n\t\t55: 'green snake, grass snake',\r\n\t\t56: 'king snake, kingsnake',\r\n\t\t57: 'garter snake, grass snake',\r\n\t\t58: 'water snake',\r\n\t\t59: 'vine snake',\r\n\t\t60: 'night snake, Hypsiglena torquata',\r\n\t\t61: 'boa constrictor, Constrictor constrictor',\r\n\t\t62: 'rock python, rock snake, Python sebae',\r\n\t\t63: 'Indian cobra, Naja naja',\r\n\t\t64: 'green mamba',\r\n\t\t65: 'sea snake',\r\n\t\t66: 'horned viper, cerastes, sand viper, horned asp, Cerastes cornutus',\r\n\t\t67: 'diamondback, diamondback rattlesnake, Crotalus adamanteus',\r\n\t\t68: 'sidewinder, horned rattlesnake, Crotalus cerastes',\r\n\t\t69: 'trilobite',\r\n\t\t70: 'harvestman, daddy longlegs, Phalangium opilio',\r\n\t\t71: 'scorpion',\r\n\t\t72: 'black and gold garden spider, Argiope aurantia',\r\n\t\t73: 'barn spider, Araneus cavaticus',\r\n\t\t74: 'garden spider, Aranea diademata',\r\n\t\t75: 'black widow, Latrodectus mactans',\r\n\t\t76: 'tarantula',\r\n\t\t77: 'wolf spider, hunting spider',\r\n\t\t78: 'tick',\r\n\t\t79: 'centipede',\r\n\t\t80: 'black grouse',\r\n\t\t81: 'ptarmigan',\r\n\t\t82: 'ruffed grouse, partridge, Bonasa umbellus',\r\n\t\t83: 'prairie chicken, prairie grouse, prairie fowl',\r\n\t\t84: 'peacock',\r\n\t\t85: 'quail',\r\n\t\t86: 'partridge',\r\n\t\t87: 'African grey, African gray, Psittacus erithacus',\r\n\t\t88: 'macaw',\r\n\t\t89: 'sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita',\r\n\t\t90: 'lorikeet',\r\n\t\t91: 'coucal',\r\n\t\t92: 'bee eater',\r\n\t\t93: 'hornbill',\r\n\t\t94: 'hummingbird',\r\n\t\t95: 'jacamar',\r\n\t\t96: 'toucan',\r\n\t\t97: 'drake',\r\n\t\t98: 'red-breasted merganser, Mergus serrator',\r\n\t\t99: 'goose',\r\n\t\t100: 'black swan, Cygnus atratus',\r\n\t\t101: 'tusker',\r\n\t\t102: 'echidna, spiny anteater, anteater',\r\n\t\t103: 'platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus',\r\n\t\t104: 'wallaby, brush kangaroo',\r\n\t\t105: 'koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus',\r\n\t\t106: 'wombat',\r\n\t\t107: 'jelly fish',\r\n\t\t108: 'sea anemone, anemone',\r\n\t\t109: 'brain coral',\r\n\t\t110: 'flatworm, platyhelminth',\r\n\t\t111: 'nematode, nematode worm, roundworm',\r\n\t\t112: 'conch',\r\n\t\t113: 'snail',\r\n\t\t114: 'slug',\r\n\t\t115: 'sea slug, nudibranch',\r\n\t\t116: 'chiton, coat-of-mail shell, sea cradle, polyplacophore',\r\n\t\t117: 'chambered nautilus, pearly nautilus, nautilus',\r\n\t\t118: 'Dungeness crab, Cancer magister',\r\n\t\t119: 'rock crab, Cancer irroratus',\r\n\t\t120: 'fiddler crab',\r\n\t\t121: 'king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica',\r\n\t\t122: 'American lobster, Northern lobster, Maine lobster, Homarus americanus',\r\n\t\t123: 'spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish',\r\n\t\t124: 'crayfish, crawfish, crawdad, crawdaddy',\r\n\t\t125: 'hermit crab',\r\n\t\t126: 'isopod',\r\n\t\t127: 'white stork, Ciconia ciconia',\r\n\t\t128: 'black stork, Ciconia nigra',\r\n\t\t129: 'spoonbill',\r\n\t\t130: 'flamingo',\r\n\t\t131: 'little blue heron, Egretta caerulea',\r\n\t\t132: 'American egret, great white heron, Egretta albus',\r\n\t\t133: 'bittern',\r\n\t\t134: 'crane',\r\n\t\t135: 'limpkin, Aramus pictus',\r\n\t\t136: 'European gallinule, Porphyrio porphyrio',\r\n\t\t137: 'American coot, marsh hen, mud hen, water hen, Fulica americana',\r\n\t\t138: 'bustard',\r\n\t\t139: 'ruddy turnstone, Arenaria interpres',\r\n\t\t140: 'red-backed sandpiper, dunlin, Erolia alpina',\r\n\t\t141: 'redshank, Tringa totanus',\r\n\t\t142: 'dowitcher',\r\n\t\t143: 'oystercatcher, oyster catcher',\r\n\t\t144: 'pelican',\r\n\t\t145: 'king penguin, Aptenodytes patagonica',\r\n\t\t146: 'albatross, mollymawk',\r\n\t\t147: 'grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus',\r\n\t\t148: 'killer whale, killer, orca, grampus, sea wolf, Orcinus orca',\r\n\t\t149: 'dugong, Dugong dugon',\r\n\t\t150: 'sea lion',\r\n\t\t151: 'Chihuahua',\r\n\t\t152: 'Japanese spaniel',\r\n\t\t153: 'Maltese dog, Maltese terrier, Maltese',\r\n\t\t154: 'Pekinese, Pekingese, Peke',\r\n\t\t155: 'Shih-Tzu',\r\n\t\t156: 'Blenheim spaniel',\r\n\t\t157: 'papillon',\r\n\t\t158: 'toy terrier',\r\n\t\t159: 'Rhodesian ridgeback',\r\n\t\t160: 'Afghan hound, Afghan',\r\n\t\t161: 'basset, basset hound',\r\n\t\t162: 'beagle',\r\n\t\t163: 'bloodhound, sleuthhound',\r\n\t\t164: 'bluetick',\r\n\t\t165: 'black-and-tan coonhound',\r\n\t\t166: 'Walker hound, Walker foxhound',\r\n\t\t167: 'English foxhound',\r\n\t\t168: 'redbone',\r\n\t\t169: 'borzoi, Russian wolfhound',\r\n\t\t170: 'Irish wolfhound',\r\n\t\t171: 'Italian greyhound',\r\n\t\t172: 'whippet',\r\n\t\t173: 'Ibizan hound, Ibizan Podenco',\r\n\t\t174: 'Norwegian elkhound, elkhound',\r\n\t\t175: 'otterhound, otter hound',\r\n\t\t176: 'Saluki, gazelle hound',\r\n\t\t177: 'Scottish deerhound, deerhound',\r\n\t\t178: 'Weimaraner',\r\n\t\t179: 'Staffordshire bullterrier, Staffordshire bull terrier',\r\n\t\t180: 'American Staffordshire terrier, Staffordshire terrier, American pit, bull terrier, pit bull terrier',\r\n\t\t181: 'Bedlington terrier',\r\n\t\t182: 'Border terrier',\r\n\t\t183: 'Kerry blue terrier',\r\n\t\t184: 'Irish terrier',\r\n\t\t185: 'Norfolk terrier',\r\n\t\t186: 'Norwich terrier',\r\n\t\t187: 'Yorkshire terrier',\r\n\t\t188: 'wire-haired fox terrier',\r\n\t\t189: 'Lakeland terrier',\r\n\t\t190: 'Sealyham terrier, Sealyham',\r\n\t\t191: 'Airedale, Airedale terrier',\r\n\t\t192: 'cairn, cairn terrier',\r\n\t\t193: 'Australian terrier',\r\n\t\t194: 'Dandie Dinmont, Dandie Dinmont terrier',\r\n\t\t195: 'Boston bull, Boston terrier',\r\n\t\t196: 'miniature schnauzer',\r\n\t\t197: 'giant schnauzer',\r\n\t\t198: 'standard schnauzer',\r\n\t\t199: 'Scotch terrier, Scottish terrier, Scottie',\r\n\t\t200: 'Tibetan terrier, chrysanthemum dog',\r\n\t\t201: 'silky terrier, Sydney silky',\r\n\t\t202: 'soft-coated wheaten terrier',\r\n\t\t203: 'West Highland white terrier',\r\n\t\t204: 'Lhasa, Lhasa apso',\r\n\t\t205: 'flat-coated retriever',\r\n\t\t206: 'curly-coated retriever',\r\n\t\t207: 'golden retriever',\r\n\t\t208: 'Labrador retriever',\r\n\t\t209: 'Chesapeake Bay retriever',\r\n\t\t210: 'German short-haired pointer',\r\n\t\t211: 'vizsla, Hungarian pointer',\r\n\t\t212: 'English setter',\r\n\t\t213: 'Irish setter, red setter',\r\n\t\t214: 'Gordon setter',\r\n\t\t215: 'Brittany spaniel',\r\n\t\t216: 'clumber, clumber spaniel',\r\n\t\t217: 'English springer, English springer spaniel',\r\n\t\t218: 'Welsh springer spaniel',\r\n\t\t219: 'cocker spaniel, English cocker spaniel, cocker',\r\n\t\t220: 'Sussex spaniel',\r\n\t\t221: 'Irish water spaniel',\r\n\t\t222: 'kuvasz',\r\n\t\t223: 'schipperke',\r\n\t\t224: 'groenendael',\r\n\t\t225: 'malinois',\r\n\t\t226: 'briard',\r\n\t\t227: 'kelpie',\r\n\t\t228: 'komondor',\r\n\t\t229: 'Old English sheepdog, bobtail',\r\n\t\t230: 'Shetland sheepdog, Shetland sheep dog, Shetland',\r\n\t\t231: 'collie',\r\n\t\t232: 'Border collie',\r\n\t\t233: 'Bouvier des Flandres, Bouviers des Flandres',\r\n\t\t234: 'Rottweiler',\r\n\t\t235: 'German shepherd, German shepherd dog, German police dog, alsatian',\r\n\t\t236: 'Doberman, Doberman pinscher',\r\n\t\t237: 'miniature pinscher',\r\n\t\t238: 'Greater Swiss Mountain dog',\r\n\t\t239: 'Bernese mountain dog',\r\n\t\t240: 'Appenzeller',\r\n\t\t241: 'EntleBucher',\r\n\t\t242: 'boxer',\r\n\t\t243: 'bull mastiff',\r\n\t\t244: 'Tibetan mastiff',\r\n\t\t245: 'French bulldog',\r\n\t\t246: 'Great Dane',\r\n\t\t247: 'Saint Bernard, St Bernard',\r\n\t\t248: 'Eskimo dog, husky',\r\n\t\t249: 'malamute, malemute, Alaskan malamute',\r\n\t\t250: 'Siberian husky',\r\n\t\t251: 'dalmatian, coach dog, carriage dog',\r\n\t\t252: 'affenpinscher, monkey pinscher, monkey dog',\r\n\t\t253: 'basenji',\r\n\t\t254: 'pug, pug-dog',\r\n\t\t255: 'Leonberg',\r\n\t\t256: 'Newfoundland, Newfoundland dog',\r\n\t\t257: 'Great Pyrenees',\r\n\t\t258: 'Samoyed, Samoyede',\r\n\t\t259: 'Pomeranian',\r\n\t\t260: 'chow, chow chow',\r\n\t\t261: 'keeshond',\r\n\t\t262: 'Brabancon griffon',\r\n\t\t263: 'Pembroke, Pembroke Welsh corgi',\r\n\t\t264: 'Cardigan, Cardigan Welsh corgi',\r\n\t\t265: 'toy poodle',\r\n\t\t266: 'miniature poodle',\r\n\t\t267: 'standard poodle',\r\n\t\t268: 'Mexican hairless',\r\n\t\t269: 'timber wolf, grey wolf, gray wolf, Canis lupus',\r\n\t\t270: 'white wolf, Arctic wolf, Canis lupus tundrarum',\r\n\t\t271: 'red wolf, maned wolf, Canis rufus, Canis niger',\r\n\t\t272: 'coyote, prairie wolf, brush wolf, Canis latrans',\r\n\t\t273: 'dingo, warrigal, warragal, Canis dingo',\r\n\t\t274: 'dhole, Cuon alpinus',\r\n\t\t275: 'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus',\r\n\t\t276: 'hyena, hyaena',\r\n\t\t277: 'red fox, Vulpes vulpes',\r\n\t\t278: 'kit fox, Vulpes macrotis',\r\n\t\t279: 'Arctic fox, white fox, Alopex lagopus',\r\n\t\t280: 'grey fox, gray fox, Urocyon cinereoargenteus',\r\n\t\t281: 'tabby, tabby cat',\r\n\t\t282: 'tiger cat',\r\n\t\t283: 'Persian cat',\r\n\t\t284: 'Siamese cat, Siamese',\r\n\t\t285: 'Egyptian cat',\r\n\t\t286: 'cougar, puma, catamount, mountain lion, painter, panther, Felis concolor',\r\n\t\t287: 'lynx, catamount',\r\n\t\t288: 'leopard, Panthera pardus',\r\n\t\t289: 'snow leopard, ounce, Panthera uncia',\r\n\t\t290: 'jaguar, panther, Panthera onca, Felis onca',\r\n\t\t291: 'lion, king of beasts, Panthera leo',\r\n\t\t292: 'tiger, Panthera tigris',\r\n\t\t293: 'cheetah, chetah, Acinonyx jubatus',\r\n\t\t294: 'brown bear, bruin, Ursus arctos',\r\n\t\t295: 'American black bear, black bear, Ursus americanus, Euarctos americanus',\r\n\t\t296: 'ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus',\r\n\t\t297: 'sloth bear, Melursus ursinus, Ursus ursinus',\r\n\t\t298: 'mongoose',\r\n\t\t299: 'meerkat, mierkat',\r\n\t\t300: 'tiger beetle',\r\n\t\t301: 'ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle',\r\n\t\t302: 'ground beetle, carabid beetle',\r\n\t\t303: 'long-horned beetle, longicorn, longicorn beetle',\r\n\t\t304: 'leaf beetle, chrysomelid',\r\n\t\t305: 'dung beetle',\r\n\t\t306: 'rhinoceros beetle',\r\n\t\t307: 'weevil',\r\n\t\t308: 'fly',\r\n\t\t309: 'bee',\r\n\t\t310: 'ant, emmet, pismire',\r\n\t\t311: 'grasshopper, hopper',\r\n\t\t312: 'cricket',\r\n\t\t313: 'walking stick, walkingstick, stick insect',\r\n\t\t314: 'cockroach, roach',\r\n\t\t315: 'mantis, mantid',\r\n\t\t316: 'cicada, cicala',\r\n\t\t317: 'leafhopper',\r\n\t\t318: 'lacewing, lacewing fly',\r\n\t\t319: 'dragonfly, darning needle, devil\"s darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk',\r\n\t\t320: 'damselfly',\r\n\t\t321: 'admiral',\r\n\t\t322: 'ringlet, ringlet butterfly',\r\n\t\t323: 'monarch, monarch butterfly, milkweed butterfly, Danaus plexippus',\r\n\t\t324: 'cabbage butterfly',\r\n\t\t325: 'sulphur butterfly, sulfur butterfly',\r\n\t\t326: 'lycaenid, lycaenid butterfly',\r\n\t\t327: 'starfish, sea star',\r\n\t\t328: 'sea urchin',\r\n\t\t329: 'sea cucumber, holothurian',\r\n\t\t330: 'wood rabbit, cottontail, cottontail rabbit',\r\n\t\t331: 'hare',\r\n\t\t332: 'Angora, Angora rabbit',\r\n\t\t333: 'hamster',\r\n\t\t334: 'porcupine, hedgehog',\r\n\t\t335: 'fox squirrel, eastern fox squirrel, Sciurus niger',\r\n\t\t336: 'marmot',\r\n\t\t337: 'beaver',\r\n\t\t338: 'guinea pig, Cavia cobaya',\r\n\t\t339: 'sorrel',\r\n\t\t340: 'zebra',\r\n\t\t341: 'hog, pig, grunter, squealer, Sus scrofa',\r\n\t\t342: 'wild boar, boar, Sus scrofa',\r\n\t\t343: 'warthog',\r\n\t\t344: 'hippopotamus, hippo, river horse, Hippopotamus amphibius',\r\n\t\t345: 'ox',\r\n\t\t346: 'water buffalo, water ox, Asiatic buffalo, Bubalus bubalis',\r\n\t\t347: 'bison',\r\n\t\t348: 'ram, tup',\r\n\t\t349: 'bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis',\r\n\t\t350: 'ibex, Capra ibex',\r\n\t\t351: 'hartebeest',\r\n\t\t352: 'impala, Aepyceros melampus',\r\n\t\t353: 'gazelle',\r\n\t\t354: 'Arabian camel, dromedary, Camelus dromedarius',\r\n\t\t355: 'llama',\r\n\t\t356: 'weasel',\r\n\t\t357: 'mink',\r\n\t\t358: 'polecat, fitch, foulmart, foumart, Mustela putorius',\r\n\t\t359: 'black-footed ferret, ferret, Mustela nigripes',\r\n\t\t360: 'otter',\r\n\t\t361: 'skunk, polecat, wood pussy',\r\n\t\t362: 'badger',\r\n\t\t363: 'armadillo',\r\n\t\t364: 'three-toed sloth, ai, Bradypus tridactylus',\r\n\t\t365: 'orangutan, orang, orangutang, Pongo pygmaeus',\r\n\t\t366: 'gorilla, Gorilla gorilla',\r\n\t\t367: 'chimpanzee, chimp, Pan troglodytes',\r\n\t\t368: 'gibbon, Hylobates lar',\r\n\t\t369: 'siamang, Hylobates syndactylus, Symphalangus syndactylus',\r\n\t\t370: 'guenon, guenon monkey',\r\n\t\t371: 'patas, hussar monkey, Erythrocebus patas',\r\n\t\t372: 'baboon',\r\n\t\t373: 'macaque',\r\n\t\t374: 'langur',\r\n\t\t375: 'colobus, colobus monkey',\r\n\t\t376: 'proboscis monkey, Nasalis larvatus',\r\n\t\t377: 'marmoset',\r\n\t\t378: 'capuchin, ringtail, Cebus capucinus',\r\n\t\t379: 'howler monkey, howler',\r\n\t\t380: 'titi, titi monkey',\r\n\t\t381: 'spider monkey, Ateles geoffroyi',\r\n\t\t382: 'squirrel monkey, Saimiri sciureus',\r\n\t\t383: 'Madagascar cat, ring-tailed lemur, Lemur catta',\r\n\t\t384: 'indri, indris, Indri indri, Indri brevicaudatus',\r\n\t\t385: 'Indian elephant, Elephas maximus',\r\n\t\t386: 'African elephant, Loxodonta africana',\r\n\t\t387: 'lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens',\r\n\t\t388: 'giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca',\r\n\t\t389: 'barracouta, snoek',\r\n\t\t390: 'eel',\r\n\t\t391: 'coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch',\r\n\t\t392: 'rock beauty, Holocanthus tricolor',\r\n\t\t393: 'anemone fish',\r\n\t\t394: 'sturgeon',\r\n\t\t395: 'gar, garfish, garpike, billfish, Lepisosteus osseus',\r\n\t\t396: 'lionfish',\r\n\t\t397: 'puffer, pufferfish, blowfish, globefish',\r\n\t\t398: 'abacus',\r\n\t\t399: 'abaya',\r\n\t\t400: \"academic gown, academic robe, judge's robe\",\r\n\t\t401: 'accordion, piano accordion, squeeze box',\r\n\t\t402: 'acoustic guitar',\r\n\t\t403: 'aircraft carrier, carrier, flattop, attack aircraft carrier',\r\n\t\t404: 'airliner',\r\n\t\t405: 'airship, dirigible',\r\n\t\t406: 'altar',\r\n\t\t407: 'ambulance',\r\n\t\t408: 'amphibian, amphibious vehicle',\r\n\t\t409: 'analog clock',\r\n\t\t410: 'apiary, bee house',\r\n\t\t411: 'apron',\r\n\t\t412: 'ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin',\r\n\t\t413: 'assault rifle, assault gun',\r\n\t\t414: 'backpack, back pack, knapsack, packsack, rucksack, haversack',\r\n\t\t415: 'bakery, bakeshop, bakehouse',\r\n\t\t416: 'balance beam, beam',\r\n\t\t417: 'balloon',\r\n\t\t418: 'ballpoint, ballpoint pen, ballpen, Biro',\r\n\t\t419: 'Band Aid',\r\n\t\t420: 'banjo',\r\n\t\t421: 'bannister, banister, balustrade, balusters, handrail',\r\n\t\t422: 'barbell',\r\n\t\t423: 'barber chair',\r\n\t\t424: 'barbershop',\r\n\t\t425: 'barn',\r\n\t\t426: 'barometer',\r\n\t\t427: 'barrel, cask',\r\n\t\t428: 'barrow, garden cart, lawn cart, wheelbarrow',\r\n\t\t429: 'baseball',\r\n\t\t430: 'basketball',\r\n\t\t431: 'bassinet',\r\n\t\t432: 'bassoon',\r\n\t\t433: 'bathing cap, swimming cap',\r\n\t\t434: 'bath towel',\r\n\t\t435: 'bathtub, bathing tub, bath, tub',\r\n\t\t436: 'beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon',\r\n\t\t437: 'beacon, lighthouse, beacon light, pharos',\r\n\t\t438: 'beaker',\r\n\t\t439: 'bearskin, busby, shako',\r\n\t\t440: 'beer bottle',\r\n\t\t441: 'beer glass',\r\n\t\t442: 'bell cote, bell cot',\r\n\t\t443: 'bib',\r\n\t\t444: 'bicycle-built-for-two, tandem bicycle, tandem',\r\n\t\t445: 'bikini, two-piece',\r\n\t\t446: 'binder, ring-binder',\r\n\t\t447: 'binoculars, field glasses, opera glasses',\r\n\t\t448: 'birdhouse',\r\n\t\t449: 'boathouse',\r\n\t\t450: 'bobsled, bobsleigh, bob',\r\n\t\t451: 'bolo tie, bolo, bola tie, bola',\r\n\t\t452: 'bonnet, poke bonnet',\r\n\t\t453: 'bookcase',\r\n\t\t454: 'bookshop, bookstore, bookstall',\r\n\t\t455: 'bottlecap',\r\n\t\t456: 'bow',\r\n\t\t457: 'bow tie, bow-tie, bowtie',\r\n\t\t458: 'brass, memorial tablet, plaque',\r\n\t\t459: 'brassiere, bra, bandeau',\r\n\t\t460: 'breakwater, groin, groyne, mole, bulwark, seawall, jetty',\r\n\t\t461: 'breastplate, aegis, egis',\r\n\t\t462: 'broom',\r\n\t\t463: 'bucket, pail',\r\n\t\t464: 'buckle',\r\n\t\t465: 'bulletproof vest',\r\n\t\t466: 'bullet train, bullet',\r\n\t\t467: 'butcher shop, meat market',\r\n\t\t468: 'cab, hack, taxi, taxicab',\r\n\t\t469: 'caldron, cauldron',\r\n\t\t470: 'candle, taper, wax light',\r\n\t\t471: 'cannon',\r\n\t\t472: 'canoe',\r\n\t\t473: 'can opener, tin opener',\r\n\t\t474: 'cardigan',\r\n\t\t475: 'car mirror',\r\n\t\t476: 'carousel, carrousel, merry-go-round, roundabout, whirligig',\r\n\t\t477: \"carpenter's kit, tool kit\",\r\n\t\t478: 'carton',\r\n\t\t479: 'car wheel',\r\n\t\t480: 'cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM',\r\n\t\t481: 'cassette',\r\n\t\t482: 'cassette player',\r\n\t\t483: 'castle',\r\n\t\t484: 'catamaran',\r\n\t\t485: 'CD player',\r\n\t\t486: 'cello, violoncello',\r\n\t\t487: 'cellular telephone, cellular phone, cellphone, cell, mobile phone',\r\n\t\t488: 'chain',\r\n\t\t489: 'chainlink fence',\r\n\t\t490: 'chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour',\r\n\t\t491: 'chain saw, chainsaw',\r\n\t\t492: 'chest',\r\n\t\t493: 'chiffonier, commode',\r\n\t\t494: 'chime, bell, gong',\r\n\t\t495: 'china cabinet, china closet',\r\n\t\t496: 'Christmas stocking',\r\n\t\t497: 'church, church building',\r\n\t\t498: 'cinema, movie theater, movie theatre, movie house, picture palace',\r\n\t\t499: 'cleaver, meat cleaver, chopper',\r\n\t\t500: 'cliff dwelling',\r\n\t\t501: 'cloak',\r\n\t\t502: 'clog, geta, patten, sabot',\r\n\t\t503: 'cocktail shaker',\r\n\t\t504: 'coffee mug',\r\n\t\t505: 'coffeepot',\r\n\t\t506: 'coil, spiral, volute, whorl, helix',\r\n\t\t507: 'combination lock',\r\n\t\t508: 'computer keyboard, keypad',\r\n\t\t509: 'confectionery, confectionary, candy store',\r\n\t\t510: 'container ship, containership, container vessel',\r\n\t\t511: 'convertible',\r\n\t\t512: 'corkscrew, bottle screw',\r\n\t\t513: 'cornet, horn, trumpet, trump',\r\n\t\t514: 'cowboy boot',\r\n\t\t515: 'cowboy hat, ten-gallon hat',\r\n\t\t516: 'cradle',\r\n\t\t517: 'crane',\r\n\t\t518: 'crash helmet',\r\n\t\t519: 'crate',\r\n\t\t520: 'crib, cot',\r\n\t\t521: 'Crock Pot',\r\n\t\t522: 'croquet ball',\r\n\t\t523: 'crutch',\r\n\t\t524: 'cuirass',\r\n\t\t525: 'dam, dike, dyke',\r\n\t\t526: 'desk',\r\n\t\t527: 'desktop computer',\r\n\t\t528: 'dial telephone, dial phone',\r\n\t\t529: 'diaper, nappy, napkin',\r\n\t\t530: 'digital clock',\r\n\t\t531: 'digital watch',\r\n\t\t532: 'dining table, board',\r\n\t\t533: 'dishrag, dishcloth',\r\n\t\t534: 'dishwasher, dish washer, dishwashing machine',\r\n\t\t535: 'disk brake, disc brake',\r\n\t\t536: 'dock, dockage, docking facility',\r\n\t\t537: 'dogsled, dog sled, dog sleigh',\r\n\t\t538: 'dome',\r\n\t\t539: 'doormat, welcome mat',\r\n\t\t540: 'drilling platform, offshore rig',\r\n\t\t541: 'drum, membranophone, tympan',\r\n\t\t542: 'drumstick',\r\n\t\t543: 'dumbbell',\r\n\t\t544: 'Dutch oven',\r\n\t\t545: 'electric fan, blower',\r\n\t\t546: 'electric guitar',\r\n\t\t547: 'electric locomotive',\r\n\t\t548: 'entertainment center',\r\n\t\t549: 'envelope',\r\n\t\t550: 'espresso maker',\r\n\t\t551: 'face powder',\r\n\t\t552: 'feather boa, boa',\r\n\t\t553: 'file, file cabinet, filing cabinet',\r\n\t\t554: 'fireboat',\r\n\t\t555: 'fire engine, fire truck',\r\n\t\t556: 'fire screen, fireguard',\r\n\t\t557: 'flagpole, flagstaff',\r\n\t\t558: 'flute, transverse flute',\r\n\t\t559: 'folding chair',\r\n\t\t560: 'football helmet',\r\n\t\t561: 'forklift',\r\n\t\t562: 'fountain',\r\n\t\t563: 'fountain pen',\r\n\t\t564: 'four-poster',\r\n\t\t565: 'freight car',\r\n\t\t566: 'French horn, horn',\r\n\t\t567: 'frying pan, frypan, skillet',\r\n\t\t568: 'fur coat',\r\n\t\t569: 'garbage truck, dustcart',\r\n\t\t570: 'gasmask, respirator, gas helmet',\r\n\t\t571: 'gas pump, gasoline pump, petrol pump, island dispenser',\r\n\t\t572: 'goblet',\r\n\t\t573: 'go-kart',\r\n\t\t574: 'golf ball',\r\n\t\t575: 'golfcart, golf cart',\r\n\t\t576: 'gondola',\r\n\t\t577: 'gong, tam-tam',\r\n\t\t578: 'gown',\r\n\t\t579: 'grand piano, grand',\r\n\t\t580: 'greenhouse, nursery, glasshouse',\r\n\t\t581: 'grille, radiator grille',\r\n\t\t582: 'grocery store, grocery, food market, market',\r\n\t\t583: 'guillotine',\r\n\t\t584: 'hair slide',\r\n\t\t585: 'hair spray',\r\n\t\t586: 'half track',\r\n\t\t587: 'hammer',\r\n\t\t588: 'hamper',\r\n\t\t589: 'hand blower, blow dryer, blow drier, hair dryer, hair drier',\r\n\t\t590: 'hand-held computer, hand-held microcomputer',\r\n\t\t591: 'handkerchief, hankie, hanky, hankey',\r\n\t\t592: 'hard disc, hard disk, fixed disk',\r\n\t\t593: 'harmonica, mouth organ, harp, mouth harp',\r\n\t\t594: 'harp',\r\n\t\t595: 'harvester, reaper',\r\n\t\t596: 'hatchet',\r\n\t\t597: 'holster',\r\n\t\t598: 'home theater, home theatre',\r\n\t\t599: 'honeycomb',\r\n\t\t600: 'hook, claw',\r\n\t\t601: 'hoopskirt, crinoline',\r\n\t\t602: 'horizontal bar, high bar',\r\n\t\t603: 'horse cart, horse-cart',\r\n\t\t604: 'hourglass',\r\n\t\t605: 'iPod',\r\n\t\t606: 'iron, smoothing iron',\r\n\t\t607: \"jack-o'-lantern\",\r\n\t\t608: 'jean, blue jean, denim',\r\n\t\t609: 'jeep, landrover',\r\n\t\t610: 'jersey, T-shirt, tee shirt',\r\n\t\t611: 'jigsaw puzzle',\r\n\t\t612: 'jinrikisha, ricksha, rickshaw',\r\n\t\t613: 'joystick',\r\n\t\t614: 'kimono',\r\n\t\t615: 'knee pad',\r\n\t\t616: 'knot',\r\n\t\t617: 'lab coat, laboratory coat',\r\n\t\t618: 'ladle',\r\n\t\t619: 'lampshade, lamp shade',\r\n\t\t620: 'laptop, laptop computer',\r\n\t\t621: 'lawn mower, mower',\r\n\t\t622: 'lens cap, lens cover',\r\n\t\t623: 'letter opener, paper knife, paperknife',\r\n\t\t624: 'library',\r\n\t\t625: 'lifeboat',\r\n\t\t626: 'lighter, light, igniter, ignitor',\r\n\t\t627: 'limousine, limo',\r\n\t\t628: 'liner, ocean liner',\r\n\t\t629: 'lipstick, lip rouge',\r\n\t\t630: 'Loafer',\r\n\t\t631: 'lotion',\r\n\t\t632: 'loudspeaker, speaker, speaker unit, loudspeaker system, speaker ' + 'system',\r\n\t\t633: \"loupe, jeweler's loupe\",\r\n\t\t634: 'lumbermill, sawmill',\r\n\t\t635: 'magnetic compass',\r\n\t\t636: 'mailbag, postbag',\r\n\t\t637: 'mailbox, letter box',\r\n\t\t638: 'maillot',\r\n\t\t639: 'maillot, tank suit',\r\n\t\t640: 'manhole cover',\r\n\t\t641: 'maraca',\r\n\t\t642: 'marimba, xylophone',\r\n\t\t643: 'mask',\r\n\t\t644: 'matchstick',\r\n\t\t645: 'maypole',\r\n\t\t646: 'maze, labyrinth',\r\n\t\t647: 'measuring cup',\r\n\t\t648: 'medicine chest, medicine cabinet',\r\n\t\t649: 'megalith, megalithic structure',\r\n\t\t650: 'microphone, mike',\r\n\t\t651: 'microwave, microwave oven',\r\n\t\t652: 'military uniform',\r\n\t\t653: 'milk can',\r\n\t\t654: 'minibus',\r\n\t\t655: 'miniskirt, mini',\r\n\t\t656: 'minivan',\r\n\t\t657: 'missile',\r\n\t\t658: 'mitten',\r\n\t\t659: 'mixing bowl',\r\n\t\t660: 'mobile home, manufactured home',\r\n\t\t661: 'Model T',\r\n\t\t662: 'modem',\r\n\t\t663: 'monastery',\r\n\t\t664: 'monitor',\r\n\t\t665: 'moped',\r\n\t\t666: 'mortar',\r\n\t\t667: 'mortarboard',\r\n\t\t668: 'mosque',\r\n\t\t669: 'mosquito net',\r\n\t\t670: 'motor scooter, scooter',\r\n\t\t671: 'mountain bike, all-terrain bike, off-roader',\r\n\t\t672: 'mountain tent',\r\n\t\t673: 'mouse, computer mouse',\r\n\t\t674: 'mousetrap',\r\n\t\t675: 'moving van',\r\n\t\t676: 'muzzle',\r\n\t\t677: 'nail',\r\n\t\t678: 'neck brace',\r\n\t\t679: 'necklace',\r\n\t\t680: 'nipple',\r\n\t\t681: 'notebook, notebook computer',\r\n\t\t682: 'obelisk',\r\n\t\t683: 'oboe, hautboy, hautbois',\r\n\t\t684: 'ocarina, sweet potato',\r\n\t\t685: 'odometer, hodometer, mileometer, milometer',\r\n\t\t686: 'oil filter',\r\n\t\t687: 'organ, pipe organ',\r\n\t\t688: 'oscilloscope, scope, cathode-ray oscilloscope, CRO',\r\n\t\t689: 'overskirt',\r\n\t\t690: 'oxcart',\r\n\t\t691: 'oxygen mask',\r\n\t\t692: 'packet',\r\n\t\t693: 'paddle, boat paddle',\r\n\t\t694: 'paddlewheel, paddle wheel',\r\n\t\t695: 'padlock',\r\n\t\t696: 'paintbrush',\r\n\t\t697: \"pajama, pyjama, pj's, jammies\",\r\n\t\t698: 'palace',\r\n\t\t699: 'panpipe, pandean pipe, syrinx',\r\n\t\t700: 'paper towel',\r\n\t\t701: 'parachute, chute',\r\n\t\t702: 'parallel bars, bars',\r\n\t\t703: 'park bench',\r\n\t\t704: 'parking meter',\r\n\t\t705: 'passenger car, coach, carriage',\r\n\t\t706: 'patio, terrace',\r\n\t\t707: 'pay-phone, pay-station',\r\n\t\t708: 'pedestal, plinth, footstall',\r\n\t\t709: 'pencil box, pencil case',\r\n\t\t710: 'pencil sharpener',\r\n\t\t711: 'perfume, essence',\r\n\t\t712: 'Petri dish',\r\n\t\t713: 'photocopier',\r\n\t\t714: 'pick, plectrum, plectron',\r\n\t\t715: 'pickelhaube',\r\n\t\t716: 'picket fence, paling',\r\n\t\t717: 'pickup, pickup truck',\r\n\t\t718: 'pier',\r\n\t\t719: 'piggy bank, penny bank',\r\n\t\t720: 'pill bottle',\r\n\t\t721: 'pillow',\r\n\t\t722: 'ping-pong ball',\r\n\t\t723: 'pinwheel',\r\n\t\t724: 'pirate, pirate ship',\r\n\t\t725: 'pitcher, ewer',\r\n\t\t726: \"plane, carpenter's plane, woodworking plane\",\r\n\t\t727: 'planetarium',\r\n\t\t728: 'plastic bag',\r\n\t\t729: 'plate rack',\r\n\t\t730: 'plow, plough',\r\n\t\t731: \"plunger, plumber's helper\",\r\n\t\t732: 'Polaroid camera, Polaroid Land camera',\r\n\t\t733: 'pole',\r\n\t\t734: 'police van, police wagon, paddy wagon, patrol wagon, wagon, black ' + 'Maria',\r\n\t\t735: 'poncho',\r\n\t\t736: 'pool table, billiard table, snooker table',\r\n\t\t737: 'pop bottle, soda bottle',\r\n\t\t738: 'pot, flowerpot',\r\n\t\t739: \"potter's wheel\",\r\n\t\t740: 'power drill',\r\n\t\t741: 'prayer rug, prayer mat',\r\n\t\t742: 'printer',\r\n\t\t743: 'prison, prison house',\r\n\t\t744: 'projectile, missile',\r\n\t\t745: 'projector',\r\n\t\t746: 'puck, hockey puck',\r\n\t\t747: 'punching bag, punch bag, punching ball, punchball',\r\n\t\t748: 'purse',\r\n\t\t749: 'quill, quill pen',\r\n\t\t750: 'quilt, comforter, comfort, puff',\r\n\t\t751: 'racer, race car, racing car',\r\n\t\t752: 'racket, racquet',\r\n\t\t753: 'radiator',\r\n\t\t754: 'radio, wireless',\r\n\t\t755: 'radio telescope, radio reflector',\r\n\t\t756: 'rain barrel',\r\n\t\t757: 'recreational vehicle, RV, R.V.',\r\n\t\t758: 'reel',\r\n\t\t759: 'reflex camera',\r\n\t\t760: 'refrigerator, icebox',\r\n\t\t761: 'remote control, remote',\r\n\t\t762: 'restaurant, eating house, eating place, eatery',\r\n\t\t763: 'revolver, six-gun, six-shooter',\r\n\t\t764: 'rifle',\r\n\t\t765: 'rocking chair, rocker',\r\n\t\t766: 'rotisserie',\r\n\t\t767: 'rubber eraser, rubber, pencil eraser',\r\n\t\t768: 'rugby ball',\r\n\t\t769: 'rule, ruler',\r\n\t\t770: 'running shoe',\r\n\t\t771: 'safe',\r\n\t\t772: 'safety pin',\r\n\t\t773: 'saltshaker, salt shaker',\r\n\t\t774: 'sandal',\r\n\t\t775: 'sarong',\r\n\t\t776: 'sax, saxophone',\r\n\t\t777: 'scabbard',\r\n\t\t778: 'scale, weighing machine',\r\n\t\t779: 'school bus',\r\n\t\t780: 'schooner',\r\n\t\t781: 'scoreboard',\r\n\t\t782: 'screen, CRT screen',\r\n\t\t783: 'screw',\r\n\t\t784: 'screwdriver',\r\n\t\t785: 'seat belt, seatbelt',\r\n\t\t786: 'sewing machine',\r\n\t\t787: 'shield, buckler',\r\n\t\t788: 'shoe shop, shoe-shop, shoe store',\r\n\t\t789: 'shoji',\r\n\t\t790: 'shopping basket',\r\n\t\t791: 'shopping cart',\r\n\t\t792: 'shovel',\r\n\t\t793: 'shower cap',\r\n\t\t794: 'shower curtain',\r\n\t\t795: 'ski',\r\n\t\t796: 'ski mask',\r\n\t\t797: 'sleeping bag',\r\n\t\t798: 'slide rule, slipstick',\r\n\t\t799: 'sliding door',\r\n\t\t800: 'slot, one-armed bandit',\r\n\t\t801: 'snorkel',\r\n\t\t802: 'snowmobile',\r\n\t\t803: 'snowplow, snowplough',\r\n\t\t804: 'soap dispenser',\r\n\t\t805: 'soccer ball',\r\n\t\t806: 'sock',\r\n\t\t807: 'solar dish, solar collector, solar furnace',\r\n\t\t808: 'sombrero',\r\n\t\t809: 'soup bowl',\r\n\t\t810: 'space bar',\r\n\t\t811: 'space heater',\r\n\t\t812: 'space shuttle',\r\n\t\t813: 'spatula',\r\n\t\t814: 'speedboat',\r\n\t\t815: \"spider web, spider's web\",\r\n\t\t816: 'spindle',\r\n\t\t817: 'sports car, sport car',\r\n\t\t818: 'spotlight, spot',\r\n\t\t819: 'stage',\r\n\t\t820: 'steam locomotive',\r\n\t\t821: 'steel arch bridge',\r\n\t\t822: 'steel drum',\r\n\t\t823: 'stethoscope',\r\n\t\t824: 'stole',\r\n\t\t825: 'stone wall',\r\n\t\t826: 'stopwatch, stop watch',\r\n\t\t827: 'stove',\r\n\t\t828: 'strainer',\r\n\t\t829: 'streetcar, tram, tramcar, trolley, trolley car',\r\n\t\t830: 'stretcher',\r\n\t\t831: 'studio couch, day bed',\r\n\t\t832: 'stupa, tope',\r\n\t\t833: 'submarine, pigboat, sub, U-boat',\r\n\t\t834: 'suit, suit of clothes',\r\n\t\t835: 'sundial',\r\n\t\t836: 'sunglass',\r\n\t\t837: 'sunglasses, dark glasses, shades',\r\n\t\t838: 'sunscreen, sunblock, sun blocker',\r\n\t\t839: 'suspension bridge',\r\n\t\t840: 'swab, swob, mop',\r\n\t\t841: 'sweatshirt',\r\n\t\t842: 'swimming trunks, bathing trunks',\r\n\t\t843: 'swing',\r\n\t\t844: 'switch, electric switch, electrical switch',\r\n\t\t845: 'syringe',\r\n\t\t846: 'table lamp',\r\n\t\t847: 'tank, army tank, armored combat vehicle, armoured combat vehicle',\r\n\t\t848: 'tape player',\r\n\t\t849: 'teapot',\r\n\t\t850: 'teddy, teddy bear',\r\n\t\t851: 'television, television system',\r\n\t\t852: 'tennis ball',\r\n\t\t853: 'thatch, thatched roof',\r\n\t\t854: 'theater curtain, theatre curtain',\r\n\t\t855: 'thimble',\r\n\t\t856: 'thresher, thrasher, threshing machine',\r\n\t\t857: 'throne',\r\n\t\t858: 'tile roof',\r\n\t\t859: 'toaster',\r\n\t\t860: 'tobacco shop, tobacconist shop, tobacconist',\r\n\t\t861: 'toilet seat',\r\n\t\t862: 'torch',\r\n\t\t863: 'totem pole',\r\n\t\t864: 'tow truck, tow car, wrecker',\r\n\t\t865: 'toyshop',\r\n\t\t866: 'tractor',\r\n\t\t867: 'trailer truck, tractor trailer, trucking rig, rig, articulated ' + 'lorry, semi',\r\n\t\t868: 'tray',\r\n\t\t869: 'trench coat',\r\n\t\t870: 'tricycle, trike, velocipede',\r\n\t\t871: 'trimaran',\r\n\t\t872: 'tripod',\r\n\t\t873: 'triumphal arch',\r\n\t\t874: 'trolleybus, trolley coach, trackless trolley',\r\n\t\t875: 'trombone',\r\n\t\t876: 'tub, vat',\r\n\t\t877: 'turnstile',\r\n\t\t878: 'typewriter keyboard',\r\n\t\t879: 'umbrella',\r\n\t\t880: 'unicycle, monocycle',\r\n\t\t881: 'upright, upright piano',\r\n\t\t882: 'vacuum, vacuum cleaner',\r\n\t\t883: 'vase',\r\n\t\t884: 'vault',\r\n\t\t885: 'velvet',\r\n\t\t886: 'vending machine',\r\n\t\t887: 'vestment',\r\n\t\t888: 'viaduct',\r\n\t\t889: 'violin, fiddle',\r\n\t\t890: 'volleyball',\r\n\t\t891: 'waffle iron',\r\n\t\t892: 'wall clock',\r\n\t\t893: 'wallet, billfold, notecase, pocketbook',\r\n\t\t894: 'wardrobe, closet, press',\r\n\t\t895: 'warplane, military plane',\r\n\t\t896: 'washbasin, handbasin, washbowl, lavabo, wash-hand basin',\r\n\t\t897: 'washer, automatic washer, washing machine',\r\n\t\t898: 'water bottle',\r\n\t\t899: 'water jug',\r\n\t\t900: 'water tower',\r\n\t\t901: 'whiskey jug',\r\n\t\t902: 'whistle',\r\n\t\t903: 'wig',\r\n\t\t904: 'window screen',\r\n\t\t905: 'window shade',\r\n\t\t906: 'Windsor tie',\r\n\t\t907: 'wine bottle',\r\n\t\t908: 'wing',\r\n\t\t909: 'wok',\r\n\t\t910: 'wooden spoon',\r\n\t\t911: 'wool, woolen, woollen',\r\n\t\t912: 'worm fence, snake fence, snake-rail fence, Virginia fence',\r\n\t\t913: 'wreck',\r\n\t\t914: 'yawl',\r\n\t\t915: 'yurt',\r\n\t\t916: 'web site, website, internet site, site',\r\n\t\t917: 'comic book',\r\n\t\t918: 'crossword puzzle, crossword',\r\n\t\t919: 'street sign',\r\n\t\t920: 'traffic light, traffic signal, stoplight',\r\n\t\t921: 'book jacket, dust cover, dust jacket, dust wrapper',\r\n\t\t922: 'menu',\r\n\t\t923: 'plate',\r\n\t\t924: 'guacamole',\r\n\t\t925: 'consomme',\r\n\t\t926: 'hot pot, hotpot',\r\n\t\t927: 'trifle',\r\n\t\t928: 'ice cream, icecream',\r\n\t\t929: 'ice lolly, lolly, lollipop, popsicle',\r\n\t\t930: 'French loaf',\r\n\t\t931: 'bagel, beigel',\r\n\t\t932: 'pretzel',\r\n\t\t933: 'cheeseburger',\r\n\t\t934: 'hotdog, hot dog, red hot',\r\n\t\t935: 'mashed potato',\r\n\t\t936: 'head cabbage',\r\n\t\t937: 'broccoli',\r\n\t\t938: 'cauliflower',\r\n\t\t939: 'zucchini, courgette',\r\n\t\t940: 'spaghetti squash',\r\n\t\t941: 'acorn squash',\r\n\t\t942: 'butternut squash',\r\n\t\t943: 'cucumber, cuke',\r\n\t\t944: 'artichoke, globe artichoke',\r\n\t\t945: 'bell pepper',\r\n\t\t946: 'cardoon',\r\n\t\t947: 'mushroom',\r\n\t\t948: 'Granny Smith',\r\n\t\t949: 'strawberry',\r\n\t\t950: 'orange',\r\n\t\t951: 'lemon',\r\n\t\t952: 'fig',\r\n\t\t953: 'pineapple, ananas',\r\n\t\t954: 'banana',\r\n\t\t955: 'jackfruit, jak, jack',\r\n\t\t956: 'custard apple',\r\n\t\t957: 'pomegranate',\r\n\t\t958: 'hay',\r\n\t\t959: 'carbonara',\r\n\t\t960: 'chocolate sauce, chocolate syrup',\r\n\t\t961: 'dough',\r\n\t\t962: 'meat loaf, meatloaf',\r\n\t\t963: 'pizza, pizza pie',\r\n\t\t964: 'potpie',\r\n\t\t965: 'burrito',\r\n\t\t966: 'red wine',\r\n\t\t967: 'espresso',\r\n\t\t968: 'cup',\r\n\t\t969: 'eggnog',\r\n\t\t970: 'alp',\r\n\t\t971: 'bubble',\r\n\t\t972: 'cliff, drop, drop-off',\r\n\t\t973: 'coral reef',\r\n\t\t974: 'geyser',\r\n\t\t975: 'lakeside, lakeshore',\r\n\t\t976: 'promontory, headland, head, foreland',\r\n\t\t977: 'sandbar, sand bar',\r\n\t\t978: 'seashore, coast, seacoast, sea-coast',\r\n\t\t979: 'valley, vale',\r\n\t\t980: 'volcano',\r\n\t\t981: 'ballplayer, baseball player',\r\n\t\t982: 'groom, bridegroom',\r\n\t\t983: 'scuba diver',\r\n\t\t984: 'rapeseed',\r\n\t\t985: 'daisy',\r\n\t\t986: \"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, \" + 'Cypripedium parviflorum',\r\n\t\t987: 'corn',\r\n\t\t988: 'acorn',\r\n\t\t989: 'hip, rose hip, rosehip',\r\n\t\t990: 'buckeye, horse chestnut, conker',\r\n\t\t991: 'coral fungus',\r\n\t\t992: 'agaric',\r\n\t\t993: 'gyromitra',\r\n\t\t994: 'stinkhorn, carrion fungus',\r\n\t\t995: 'earthstar',\r\n\t\t996: 'hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola ' + 'frondosa',\r\n\t\t997: 'bolete',\r\n\t\t998: 'ear, spike, capitulum',\r\n\t\t999: 'toilet tissue, toilet paper, bathroom tissue',\r\n\t};\r\n\r\n\tconst COCO_SSD_CLASSES = {\r\n\t\t1: 'person',\r\n\t\t2: 'bicycle',\r\n\t\t3: 'car',\r\n\t\t4: 'motorcycle',\r\n\t\t5: 'airplane',\r\n\t\t6: 'bus',\r\n\t\t7: 'train',\r\n\t\t8: 'truck',\r\n\t\t9: 'boat',\r\n\t\t10: 'traffic light',\r\n\t\t11: 'fire hydrant',\r\n\t\t13: 'stop sign',\r\n\t\t14: 'parking meter',\r\n\t\t15: 'bench',\r\n\t\t16: 'bird',\r\n\t\t17: 'cat',\r\n\t\t18: 'dog',\r\n\t\t19: 'horse',\r\n\t\t20: 'sheep',\r\n\t\t21: 'cow',\r\n\t\t22: 'elephant',\r\n\t\t23: 'bear',\r\n\t\t24: 'zebra',\r\n\t\t25: 'giraffe',\r\n\t\t27: 'backpack',\r\n\t\t28: 'umbrella',\r\n\t\t31: 'handbag',\r\n\t\t32: 'tie',\r\n\t\t33: 'suitcase',\r\n\t\t34: 'frisbee',\r\n\t\t35: 'skis',\r\n\t\t36: 'snowboard',\r\n\t\t37: 'sports ball',\r\n\t\t38: 'kite',\r\n\t\t39: 'baseball bat',\r\n\t\t40: 'baseball glove',\r\n\t\t41: 'skateboard',\r\n\t\t42: 'surfboard',\r\n\t\t43: 'tennis racket',\r\n\t\t44: 'bottle',\r\n\t\t46: 'wine glass',\r\n\t\t47: 'cup',\r\n\t\t48: 'fork',\r\n\t\t49: 'knife',\r\n\t\t50: 'spoon',\r\n\t\t51: 'bowl',\r\n\t\t52: 'banana',\r\n\t\t53: 'apple',\r\n\t\t54: 'sandwich',\r\n\t\t55: 'orange',\r\n\t\t56: 'broccoli',\r\n\t\t57: 'carrot',\r\n\t\t58: 'hot dog',\r\n\t\t59: 'pizza',\r\n\t\t60: 'donut',\r\n\t\t61: 'cake',\r\n\t\t62: 'chair',\r\n\t\t63: 'couch',\r\n\t\t64: 'potted plant',\r\n\t\t65: 'bed',\r\n\t\t67: 'dining table',\r\n\t\t70: 'toilet',\r\n\t\t72: 'tv',\r\n\t\t73: 'laptop',\r\n\t\t74: 'mouse',\r\n\t\t75: 'remote',\r\n\t\t76: 'keyboard',\r\n\t\t77: 'cell phone',\r\n\t\t78: 'microwave',\r\n\t\t79: 'oven',\r\n\t\t80: 'toaster',\r\n\t\t81: 'sink',\r\n\t\t82: 'refrigerator',\r\n\t\t84: 'book',\r\n\t\t85: 'clock',\r\n\t\t86: 'vase',\r\n\t\t87: 'scissors',\r\n\t\t88: 'teddy bear',\r\n\t\t89: 'hair drier',\r\n\t\t90: 'toothbrush',\r\n\t};\r\n\r\n\tconst getCocoSSDClasses = () => {\r\n\t\treturn COCO_SSD_CLASSES;\r\n\t};\r\n\r\n\tconst getImageNetClasses = () => {\r\n\t\treturn IMAGENET_CLASSES;\r\n\t};\r\n\r\n\tconst padSequences = (sequences, maxLen, padding = 'pre', truncating = 'pre', value = PAD_INDEX) => {\r\n\t\treturn sequences.map((seq) => {\r\n\t\t\tif (seq.length > maxLen) {\r\n\t\t\t\tif (truncating === 'pre') {\r\n\t\t\t\t\tseq.splice(0, seq.length - maxLen);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tseq.splice(maxLen, seq.length - maxLen);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (seq.length < maxLen) {\r\n\t\t\t\tconst pad = [];\r\n\t\t\t\tfor (let i = 0; i < maxLen - seq.length; ++i) {\r\n\t\t\t\t\tpad.push(value);\r\n\t\t\t\t}\r\n\t\t\t\tif (padding === 'pre') {\r\n\t\t\t\t\tseq = pad.concat(seq);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tseq = seq.concat(pad);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn seq;\r\n\t\t});\r\n\t};\r\n\r\n\treturn {\r\n\t\tdetectObjects,\r\n\t\tgetCocoSSDClasses,\r\n\t\tpadSequences,\r\n\t\tgetImageNetClasses,\r\n\t};\r\n};\r\n\r\nexport default MachineLearningService;\r\n",{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":77,"column":5,"nodeType":"118","endLine":77,"endColumn":7,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"117","line":39,"column":5,"nodeType":"118","endLine":39,"endColumn":7,"suggestions":"120"},{"ruleId":"116","severity":1,"message":"117","line":40,"column":5,"nodeType":"118","endLine":40,"endColumn":7,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":1,"nodeType":"124","messageId":"125","fix":"126"},{"ruleId":"112","replacedBy":"127"},{"ruleId":"114","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":17,"column":10,"nodeType":"131","messageId":"132","endLine":17,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":49,"column":5,"nodeType":"118","endLine":49,"endColumn":7,"suggestions":"133"},{"ruleId":"116","severity":1,"message":"134","line":56,"column":5,"nodeType":"118","endLine":56,"endColumn":7,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":81,"column":18,"nodeType":"138","messageId":"139","endLine":81,"endColumn":19,"suggestions":"140"},{"ruleId":"136","severity":1,"message":"141","line":81,"column":21,"nodeType":"138","messageId":"139","endLine":81,"endColumn":22,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":172,"column":11,"nodeType":"145","messageId":"146","endLine":172,"endColumn":17},{"ruleId":"116","severity":1,"message":"117","line":45,"column":5,"nodeType":"118","endLine":45,"endColumn":7,"suggestions":"147"},{"ruleId":"116","severity":1,"message":"117","line":49,"column":5,"nodeType":"118","endLine":49,"endColumn":7,"suggestions":"148"},{"ruleId":"129","severity":1,"message":"149","line":105,"column":9,"nodeType":"131","messageId":"132","endLine":105,"endColumn":16},{"ruleId":"129","severity":1,"message":"150","line":106,"column":9,"nodeType":"131","messageId":"132","endLine":106,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":1,"column":1,"nodeType":"124","messageId":"125","fix":"151"},{"ruleId":"152","severity":1,"message":"153","line":802,"column":75,"nodeType":"145","messageId":"154","endLine":802,"endColumn":76},{"ruleId":"152","severity":1,"message":"153","line":904,"column":77,"nodeType":"145","messageId":"154","endLine":904,"endColumn":78},{"ruleId":"152","severity":1,"message":"153","line":1037,"column":74,"nodeType":"145","messageId":"154","endLine":1037,"endColumn":75},{"ruleId":"152","severity":1,"message":"153","line":1156,"column":78,"nodeType":"145","messageId":"154","endLine":1156,"endColumn":79},{"ruleId":"152","severity":1,"message":"153","line":1166,"column":76,"nodeType":"145","messageId":"154","endLine":1166,"endColumn":77},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'localizationService'. Either include it or remove the dependency array.","ArrayExpression",["157"],["158"],["159"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"160","text":"161"},["155"],["156"],"no-unused-vars","'padSequences' is defined but never used.","Identifier","unusedVar",["162"],"React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["163"],"no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["164","165"],"Unnecessary escape character: \\!.",["166","167"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf",["168"],["169"],"'returns' is assigned a value but never used.","'minConfidence' is assigned a value but never used.",{"range":"170","text":"161"},"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"171","fix":"173"},{"desc":"171","fix":"174"},[-1,0],"",{"desc":"171","fix":"175"},{"desc":"176","fix":"177"},{"messageId":"178","fix":"179","desc":"180"},{"messageId":"181","fix":"182","desc":"183"},{"messageId":"178","fix":"184","desc":"180"},{"messageId":"181","fix":"185","desc":"183"},{"desc":"171","fix":"186"},{"desc":"171","fix":"187"},[-1,0],"Update the dependencies array to be: [localizationService]",{"range":"188","text":"189"},{"range":"190","text":"189"},{"range":"191","text":"189"},{"range":"192","text":"189"},"Update the dependencies array to be: [url]",{"range":"193","text":"194"},"removeEscape",{"range":"195","text":"161"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"196","text":"197"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"198","text":"161"},{"range":"199","text":"197"},{"range":"200","text":"189"},{"range":"201","text":"189"},[2232,2234],"[localizationService]",[1047,1049],[1197,1199],[1873,1875],[1975,1977],"[url]",[2478,2479],[2478,2478],"\\",[2481,2482],[2481,2481],[1803,1805],[2160,2162]]